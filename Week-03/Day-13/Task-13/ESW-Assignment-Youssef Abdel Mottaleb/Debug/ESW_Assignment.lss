
ESW_Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00002b0a  00002b9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800180  00800180  00002cbe  2**0
                  ALLOC
  3 .stab         00001d70  00000000  00000000  00002cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e73  00000000  00000000  00004a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000058a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00005a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00005c33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000803f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  000093b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a590  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000a750  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000aa43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b411  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <main>
      8a:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e7       	ldi	r22, 0x77	; 119
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e1 58       	subi	r30, 0x81	; 129
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <DIO_voidSetPinDirection>:
#include "BIT_MATH.h"

#include "DIO.h"

void DIO_voidSetPinDirection (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	27 97       	sbiw	r28, 0x07	; 7
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	6a 83       	std	Y+2, r22	; 0x02
     e10:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Direction == DIO_OUTPUT)
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	09 f0       	breq	.+2      	; 0xe1a <DIO_voidSetPinDirection+0x22>
     e18:	6f c0       	rjmp	.+222    	; 0xef8 <DIO_voidSetPinDirection+0x100>
	{
		switch (Copy_u8Port)
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	3f 83       	std	Y+7, r19	; 0x07
     e22:	2e 83       	std	Y+6, r18	; 0x06
     e24:	8e 81       	ldd	r24, Y+6	; 0x06
     e26:	9f 81       	ldd	r25, Y+7	; 0x07
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	91 05       	cpc	r25, r1
     e2c:	49 f1       	breq	.+82     	; 0xe80 <DIO_voidSetPinDirection+0x88>
     e2e:	2e 81       	ldd	r18, Y+6	; 0x06
     e30:	3f 81       	ldd	r19, Y+7	; 0x07
     e32:	22 30       	cpi	r18, 0x02	; 2
     e34:	31 05       	cpc	r19, r1
     e36:	2c f4       	brge	.+10     	; 0xe42 <DIO_voidSetPinDirection+0x4a>
     e38:	8e 81       	ldd	r24, Y+6	; 0x06
     e3a:	9f 81       	ldd	r25, Y+7	; 0x07
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	61 f0       	breq	.+24     	; 0xe58 <DIO_voidSetPinDirection+0x60>
     e40:	d2 c0       	rjmp	.+420    	; 0xfe6 <DIO_voidSetPinDirection+0x1ee>
     e42:	2e 81       	ldd	r18, Y+6	; 0x06
     e44:	3f 81       	ldd	r19, Y+7	; 0x07
     e46:	22 30       	cpi	r18, 0x02	; 2
     e48:	31 05       	cpc	r19, r1
     e4a:	71 f1       	breq	.+92     	; 0xea8 <DIO_voidSetPinDirection+0xb0>
     e4c:	8e 81       	ldd	r24, Y+6	; 0x06
     e4e:	9f 81       	ldd	r25, Y+7	; 0x07
     e50:	83 30       	cpi	r24, 0x03	; 3
     e52:	91 05       	cpc	r25, r1
     e54:	e9 f1       	breq	.+122    	; 0xed0 <DIO_voidSetPinDirection+0xd8>
     e56:	c7 c0       	rjmp	.+398    	; 0xfe6 <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA : SET_BIT(DDRA , Copy_u8Pin); break ;
     e58:	aa e3       	ldi	r26, 0x3A	; 58
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ea e3       	ldi	r30, 0x3A	; 58
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	48 2f       	mov	r20, r24
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 2e       	mov	r0, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_voidSetPinDirection+0x7e>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_voidSetPinDirection+0x7a>
     e7a:	84 2b       	or	r24, r20
     e7c:	8c 93       	st	X, r24
     e7e:	b3 c0       	rjmp	.+358    	; 0xfe6 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTB : SET_BIT(DDRB , Copy_u8Pin); break ;
     e80:	a7 e3       	ldi	r26, 0x37	; 55
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e7 e3       	ldi	r30, 0x37	; 55
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 2e       	mov	r0, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_voidSetPinDirection+0xa6>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	0a 94       	dec	r0
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_voidSetPinDirection+0xa2>
     ea2:	84 2b       	or	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	9f c0       	rjmp	.+318    	; 0xfe6 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTC : SET_BIT(DDRC , Copy_u8Pin); break ;
     ea8:	a4 e3       	ldi	r26, 0x34	; 52
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e4 e3       	ldi	r30, 0x34	; 52
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <DIO_voidSetPinDirection+0xce>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <DIO_voidSetPinDirection+0xca>
     eca:	84 2b       	or	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	8b c0       	rjmp	.+278    	; 0xfe6 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTD : SET_BIT(DDRD , Copy_u8Pin); break ;
     ed0:	a1 e3       	ldi	r26, 0x31	; 49
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e1 e3       	ldi	r30, 0x31	; 49
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <DIO_voidSetPinDirection+0xf6>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <DIO_voidSetPinDirection+0xf2>
     ef2:	84 2b       	or	r24, r20
     ef4:	8c 93       	st	X, r24
     ef6:	77 c0       	rjmp	.+238    	; 0xfe6 <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if (Copy_u8Direction == DIO_INPUT)
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	88 23       	and	r24, r24
     efc:	09 f0       	breq	.+2      	; 0xf00 <DIO_voidSetPinDirection+0x108>
     efe:	73 c0       	rjmp	.+230    	; 0xfe6 <DIO_voidSetPinDirection+0x1ee>
	{
		switch (Copy_u8Port)
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	3d 83       	std	Y+5, r19	; 0x05
     f08:	2c 83       	std	Y+4, r18	; 0x04
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	9d 81       	ldd	r25, Y+5	; 0x05
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	91 05       	cpc	r25, r1
     f12:	59 f1       	breq	.+86     	; 0xf6a <DIO_voidSetPinDirection+0x172>
     f14:	2c 81       	ldd	r18, Y+4	; 0x04
     f16:	3d 81       	ldd	r19, Y+5	; 0x05
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	31 05       	cpc	r19, r1
     f1c:	2c f4       	brge	.+10     	; 0xf28 <DIO_voidSetPinDirection+0x130>
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	69 f0       	breq	.+26     	; 0xf40 <DIO_voidSetPinDirection+0x148>
     f26:	5f c0       	rjmp	.+190    	; 0xfe6 <DIO_voidSetPinDirection+0x1ee>
     f28:	2c 81       	ldd	r18, Y+4	; 0x04
     f2a:	3d 81       	ldd	r19, Y+5	; 0x05
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	89 f1       	breq	.+98     	; 0xf94 <DIO_voidSetPinDirection+0x19c>
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	9d 81       	ldd	r25, Y+5	; 0x05
     f36:	83 30       	cpi	r24, 0x03	; 3
     f38:	91 05       	cpc	r25, r1
     f3a:	09 f4       	brne	.+2      	; 0xf3e <DIO_voidSetPinDirection+0x146>
     f3c:	40 c0       	rjmp	.+128    	; 0xfbe <DIO_voidSetPinDirection+0x1c6>
     f3e:	53 c0       	rjmp	.+166    	; 0xfe6 <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA : CLR_BIT(DDRA , Copy_u8Pin); break ;
     f40:	aa e3       	ldi	r26, 0x3A	; 58
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ea e3       	ldi	r30, 0x3A	; 58
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_voidSetPinDirection+0x166>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_voidSetPinDirection+0x162>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	3e c0       	rjmp	.+124    	; 0xfe6 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTB : CLR_BIT(DDRB , Copy_u8Pin); break ;
     f6a:	a7 e3       	ldi	r26, 0x37	; 55
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e7 e3       	ldi	r30, 0x37	; 55
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_voidSetPinDirection+0x190>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_voidSetPinDirection+0x18c>
     f8c:	80 95       	com	r24
     f8e:	84 23       	and	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	29 c0       	rjmp	.+82     	; 0xfe6 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTC : CLR_BIT(DDRC , Copy_u8Pin); break ;
     f94:	a4 e3       	ldi	r26, 0x34	; 52
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e4 e3       	ldi	r30, 0x34	; 52
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_voidSetPinDirection+0x1ba>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_voidSetPinDirection+0x1b6>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	14 c0       	rjmp	.+40     	; 0xfe6 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTD : CLR_BIT(DDRD , Copy_u8Pin); break ;
     fbe:	a1 e3       	ldi	r26, 0x31	; 49
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e1 e3       	ldi	r30, 0x31	; 49
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_voidSetPinDirection+0x1e4>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_voidSetPinDirection+0x1e0>
     fe0:	80 95       	com	r24
     fe2:	84 23       	and	r24, r20
     fe4:	8c 93       	st	X, r24
		}
	}
}
     fe6:	27 96       	adiw	r28, 0x07	; 7
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	27 97       	sbiw	r28, 0x07	; 7
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	6a 83       	std	Y+2, r22	; 0x02
    1010:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Value == DIO_HIGH)
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	09 f0       	breq	.+2      	; 0x101a <DIO_voidSetPinValue+0x22>
    1018:	6f c0       	rjmp	.+222    	; 0x10f8 <DIO_voidSetPinValue+0x100>
	{
		switch (Copy_u8Port)
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	3f 83       	std	Y+7, r19	; 0x07
    1022:	2e 83       	std	Y+6, r18	; 0x06
    1024:	8e 81       	ldd	r24, Y+6	; 0x06
    1026:	9f 81       	ldd	r25, Y+7	; 0x07
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	91 05       	cpc	r25, r1
    102c:	49 f1       	breq	.+82     	; 0x1080 <DIO_voidSetPinValue+0x88>
    102e:	2e 81       	ldd	r18, Y+6	; 0x06
    1030:	3f 81       	ldd	r19, Y+7	; 0x07
    1032:	22 30       	cpi	r18, 0x02	; 2
    1034:	31 05       	cpc	r19, r1
    1036:	2c f4       	brge	.+10     	; 0x1042 <DIO_voidSetPinValue+0x4a>
    1038:	8e 81       	ldd	r24, Y+6	; 0x06
    103a:	9f 81       	ldd	r25, Y+7	; 0x07
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	61 f0       	breq	.+24     	; 0x1058 <DIO_voidSetPinValue+0x60>
    1040:	d2 c0       	rjmp	.+420    	; 0x11e6 <DIO_voidSetPinValue+0x1ee>
    1042:	2e 81       	ldd	r18, Y+6	; 0x06
    1044:	3f 81       	ldd	r19, Y+7	; 0x07
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	71 f1       	breq	.+92     	; 0x10a8 <DIO_voidSetPinValue+0xb0>
    104c:	8e 81       	ldd	r24, Y+6	; 0x06
    104e:	9f 81       	ldd	r25, Y+7	; 0x07
    1050:	83 30       	cpi	r24, 0x03	; 3
    1052:	91 05       	cpc	r25, r1
    1054:	e9 f1       	breq	.+122    	; 0x10d0 <DIO_voidSetPinValue+0xd8>
    1056:	c7 c0       	rjmp	.+398    	; 0x11e6 <DIO_voidSetPinValue+0x1ee>
		{
			case DIO_PORTA : SET_BIT(PORTA , Copy_u8Pin); break ;
    1058:	ab e3       	ldi	r26, 0x3B	; 59
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	eb e3       	ldi	r30, 0x3B	; 59
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_voidSetPinValue+0x7e>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_voidSetPinValue+0x7a>
    107a:	84 2b       	or	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	b3 c0       	rjmp	.+358    	; 0x11e6 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTB : SET_BIT(PORTB , Copy_u8Pin); break ;
    1080:	a8 e3       	ldi	r26, 0x38	; 56
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e8 e3       	ldi	r30, 0x38	; 56
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_voidSetPinValue+0xa6>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_voidSetPinValue+0xa2>
    10a2:	84 2b       	or	r24, r20
    10a4:	8c 93       	st	X, r24
    10a6:	9f c0       	rjmp	.+318    	; 0x11e6 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTC : SET_BIT(PORTC , Copy_u8Pin); break ;
    10a8:	a5 e3       	ldi	r26, 0x35	; 53
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e5 e3       	ldi	r30, 0x35	; 53
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_voidSetPinValue+0xce>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_voidSetPinValue+0xca>
    10ca:	84 2b       	or	r24, r20
    10cc:	8c 93       	st	X, r24
    10ce:	8b c0       	rjmp	.+278    	; 0x11e6 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTD : SET_BIT(PORTD , Copy_u8Pin); break ;
    10d0:	a2 e3       	ldi	r26, 0x32	; 50
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e2 e3       	ldi	r30, 0x32	; 50
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <DIO_voidSetPinValue+0xf6>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <DIO_voidSetPinValue+0xf2>
    10f2:	84 2b       	or	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	77 c0       	rjmp	.+238    	; 0x11e6 <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if (Copy_u8Value == DIO_LOW)
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	88 23       	and	r24, r24
    10fc:	09 f0       	breq	.+2      	; 0x1100 <DIO_voidSetPinValue+0x108>
    10fe:	73 c0       	rjmp	.+230    	; 0x11e6 <DIO_voidSetPinValue+0x1ee>
	{
		switch (Copy_u8Port)
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	3d 83       	std	Y+5, r19	; 0x05
    1108:	2c 83       	std	Y+4, r18	; 0x04
    110a:	8c 81       	ldd	r24, Y+4	; 0x04
    110c:	9d 81       	ldd	r25, Y+5	; 0x05
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	91 05       	cpc	r25, r1
    1112:	59 f1       	breq	.+86     	; 0x116a <DIO_voidSetPinValue+0x172>
    1114:	2c 81       	ldd	r18, Y+4	; 0x04
    1116:	3d 81       	ldd	r19, Y+5	; 0x05
    1118:	22 30       	cpi	r18, 0x02	; 2
    111a:	31 05       	cpc	r19, r1
    111c:	2c f4       	brge	.+10     	; 0x1128 <DIO_voidSetPinValue+0x130>
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	9d 81       	ldd	r25, Y+5	; 0x05
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	69 f0       	breq	.+26     	; 0x1140 <DIO_voidSetPinValue+0x148>
    1126:	5f c0       	rjmp	.+190    	; 0x11e6 <DIO_voidSetPinValue+0x1ee>
    1128:	2c 81       	ldd	r18, Y+4	; 0x04
    112a:	3d 81       	ldd	r19, Y+5	; 0x05
    112c:	22 30       	cpi	r18, 0x02	; 2
    112e:	31 05       	cpc	r19, r1
    1130:	89 f1       	breq	.+98     	; 0x1194 <DIO_voidSetPinValue+0x19c>
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	9d 81       	ldd	r25, Y+5	; 0x05
    1136:	83 30       	cpi	r24, 0x03	; 3
    1138:	91 05       	cpc	r25, r1
    113a:	09 f4       	brne	.+2      	; 0x113e <DIO_voidSetPinValue+0x146>
    113c:	40 c0       	rjmp	.+128    	; 0x11be <DIO_voidSetPinValue+0x1c6>
    113e:	53 c0       	rjmp	.+166    	; 0x11e6 <DIO_voidSetPinValue+0x1ee>
		{
			case DIO_PORTA : CLR_BIT(PORTA , Copy_u8Pin); break ;
    1140:	ab e3       	ldi	r26, 0x3B	; 59
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	eb e3       	ldi	r30, 0x3B	; 59
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_voidSetPinValue+0x166>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_voidSetPinValue+0x162>
    1162:	80 95       	com	r24
    1164:	84 23       	and	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	3e c0       	rjmp	.+124    	; 0x11e6 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTB : CLR_BIT(PORTB , Copy_u8Pin); break ;
    116a:	a8 e3       	ldi	r26, 0x38	; 56
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e8 e3       	ldi	r30, 0x38	; 56
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_voidSetPinValue+0x190>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_voidSetPinValue+0x18c>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	29 c0       	rjmp	.+82     	; 0x11e6 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTC : CLR_BIT(PORTC , Copy_u8Pin); break ;
    1194:	a5 e3       	ldi	r26, 0x35	; 53
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e5 e3       	ldi	r30, 0x35	; 53
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <DIO_voidSetPinValue+0x1ba>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <DIO_voidSetPinValue+0x1b6>
    11b6:	80 95       	com	r24
    11b8:	84 23       	and	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	14 c0       	rjmp	.+40     	; 0x11e6 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTD : CLR_BIT(PORTD , Copy_u8Pin); break ;
    11be:	a2 e3       	ldi	r26, 0x32	; 50
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e2 e3       	ldi	r30, 0x32	; 50
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <DIO_voidSetPinValue+0x1e4>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <DIO_voidSetPinValue+0x1e0>
    11e0:	80 95       	com	r24
    11e2:	84 23       	and	r24, r20
    11e4:	8c 93       	st	X, r24
		}
	}
}
    11e6:	27 96       	adiw	r28, 0x07	; 7
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <DIO_u8GetPinValue>:

u8   DIO_u8GetPinValue	 (u8 Copy_u8Port , u8 Copy_u8Pin)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <DIO_u8GetPinValue+0x6>
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <DIO_u8GetPinValue+0x8>
    1200:	00 d0       	rcall	.+0      	; 0x1202 <DIO_u8GetPinValue+0xa>
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	3d 83       	std	Y+5, r19	; 0x05
    1212:	2c 83       	std	Y+4, r18	; 0x04
    1214:	4c 81       	ldd	r20, Y+4	; 0x04
    1216:	5d 81       	ldd	r21, Y+5	; 0x05
    1218:	41 30       	cpi	r20, 0x01	; 1
    121a:	51 05       	cpc	r21, r1
    121c:	49 f1       	breq	.+82     	; 0x1270 <DIO_u8GetPinValue+0x78>
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	91 05       	cpc	r25, r1
    1226:	34 f4       	brge	.+12     	; 0x1234 <DIO_u8GetPinValue+0x3c>
    1228:	2c 81       	ldd	r18, Y+4	; 0x04
    122a:	3d 81       	ldd	r19, Y+5	; 0x05
    122c:	21 15       	cp	r18, r1
    122e:	31 05       	cpc	r19, r1
    1230:	61 f0       	breq	.+24     	; 0x124a <DIO_u8GetPinValue+0x52>
    1232:	57 c0       	rjmp	.+174    	; 0x12e2 <DIO_u8GetPinValue+0xea>
    1234:	4c 81       	ldd	r20, Y+4	; 0x04
    1236:	5d 81       	ldd	r21, Y+5	; 0x05
    1238:	42 30       	cpi	r20, 0x02	; 2
    123a:	51 05       	cpc	r21, r1
    123c:	61 f1       	breq	.+88     	; 0x1296 <DIO_u8GetPinValue+0x9e>
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	83 30       	cpi	r24, 0x03	; 3
    1244:	91 05       	cpc	r25, r1
    1246:	d1 f1       	breq	.+116    	; 0x12bc <DIO_u8GetPinValue+0xc4>
    1248:	4c c0       	rjmp	.+152    	; 0x12e2 <DIO_u8GetPinValue+0xea>
		{
			case DIO_PORTA : return GET_BIT(PINA , Copy_u8Pin); 
    124a:	e9 e3       	ldi	r30, 0x39	; 57
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	88 2f       	mov	r24, r24
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a9 01       	movw	r20, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_u8GetPinValue+0x6a>
    125e:	55 95       	asr	r21
    1260:	47 95       	ror	r20
    1262:	8a 95       	dec	r24
    1264:	e2 f7       	brpl	.-8      	; 0x125e <DIO_u8GetPinValue+0x66>
    1266:	ca 01       	movw	r24, r20
    1268:	58 2f       	mov	r21, r24
    126a:	51 70       	andi	r21, 0x01	; 1
    126c:	5b 83       	std	Y+3, r21	; 0x03
    126e:	3a c0       	rjmp	.+116    	; 0x12e4 <DIO_u8GetPinValue+0xec>
			case DIO_PORTB : return GET_BIT(PINB , Copy_u8Pin); 
    1270:	e6 e3       	ldi	r30, 0x36	; 54
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	a9 01       	movw	r20, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_u8GetPinValue+0x90>
    1284:	55 95       	asr	r21
    1286:	47 95       	ror	r20
    1288:	8a 95       	dec	r24
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_u8GetPinValue+0x8c>
    128c:	ca 01       	movw	r24, r20
    128e:	58 2f       	mov	r21, r24
    1290:	51 70       	andi	r21, 0x01	; 1
    1292:	5b 83       	std	Y+3, r21	; 0x03
    1294:	27 c0       	rjmp	.+78     	; 0x12e4 <DIO_u8GetPinValue+0xec>
			case DIO_PORTC : return GET_BIT(PINC , Copy_u8Pin); 
    1296:	e3 e3       	ldi	r30, 0x33	; 51
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	a9 01       	movw	r20, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_u8GetPinValue+0xb6>
    12aa:	55 95       	asr	r21
    12ac:	47 95       	ror	r20
    12ae:	8a 95       	dec	r24
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_u8GetPinValue+0xb2>
    12b2:	ca 01       	movw	r24, r20
    12b4:	58 2f       	mov	r21, r24
    12b6:	51 70       	andi	r21, 0x01	; 1
    12b8:	5b 83       	std	Y+3, r21	; 0x03
    12ba:	14 c0       	rjmp	.+40     	; 0x12e4 <DIO_u8GetPinValue+0xec>
			case DIO_PORTD : return GET_BIT(PIND , Copy_u8Pin); 
    12bc:	e0 e3       	ldi	r30, 0x30	; 48
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a9 01       	movw	r20, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_u8GetPinValue+0xdc>
    12d0:	55 95       	asr	r21
    12d2:	47 95       	ror	r20
    12d4:	8a 95       	dec	r24
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_u8GetPinValue+0xd8>
    12d8:	ca 01       	movw	r24, r20
    12da:	58 2f       	mov	r21, r24
    12dc:	51 70       	andi	r21, 0x01	; 1
    12de:	5b 83       	std	Y+3, r21	; 0x03
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <DIO_u8GetPinValue+0xec>
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_u8GetPinValue+0xf0>
		}
}
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	8e 83       	std	Y+6, r24	; 0x06
    12e8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ea:	26 96       	adiw	r28, 0x06	; 6
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <DIO_voidTogglePin>:

void DIO_voidTogglePin	 (u8 Copy_u8Port , u8 Copy_u8Pin)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	00 d0       	rcall	.+0      	; 0x1302 <DIO_voidTogglePin+0x6>
    1302:	00 d0       	rcall	.+0      	; 0x1304 <DIO_voidTogglePin+0x8>
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	3c 83       	std	Y+4, r19	; 0x04
    1314:	2b 83       	std	Y+3, r18	; 0x03
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	91 05       	cpc	r25, r1
    131e:	49 f1       	breq	.+82     	; 0x1372 <DIO_voidTogglePin+0x76>
    1320:	2b 81       	ldd	r18, Y+3	; 0x03
    1322:	3c 81       	ldd	r19, Y+4	; 0x04
    1324:	22 30       	cpi	r18, 0x02	; 2
    1326:	31 05       	cpc	r19, r1
    1328:	2c f4       	brge	.+10     	; 0x1334 <DIO_voidTogglePin+0x38>
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	9c 81       	ldd	r25, Y+4	; 0x04
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	61 f0       	breq	.+24     	; 0x134a <DIO_voidTogglePin+0x4e>
    1332:	5a c0       	rjmp	.+180    	; 0x13e8 <DIO_voidTogglePin+0xec>
    1334:	2b 81       	ldd	r18, Y+3	; 0x03
    1336:	3c 81       	ldd	r19, Y+4	; 0x04
    1338:	22 30       	cpi	r18, 0x02	; 2
    133a:	31 05       	cpc	r19, r1
    133c:	71 f1       	breq	.+92     	; 0x139a <DIO_voidTogglePin+0x9e>
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	91 05       	cpc	r25, r1
    1346:	e9 f1       	breq	.+122    	; 0x13c2 <DIO_voidTogglePin+0xc6>
    1348:	4f c0       	rjmp	.+158    	; 0x13e8 <DIO_voidTogglePin+0xec>
		{
			case DIO_PORTA : TOGGLE_BIT(PORTA , Copy_u8Pin); break ;
    134a:	ab e3       	ldi	r26, 0x3B	; 59
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	eb e3       	ldi	r30, 0x3B	; 59
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_voidTogglePin+0x6c>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_voidTogglePin+0x68>
    136c:	84 27       	eor	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	3b c0       	rjmp	.+118    	; 0x13e8 <DIO_voidTogglePin+0xec>
			case DIO_PORTB : TOGGLE_BIT(PORTB , Copy_u8Pin); break ;
    1372:	a8 e3       	ldi	r26, 0x38	; 56
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e8 e3       	ldi	r30, 0x38	; 56
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_voidTogglePin+0x94>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_voidTogglePin+0x90>
    1394:	84 27       	eor	r24, r20
    1396:	8c 93       	st	X, r24
    1398:	27 c0       	rjmp	.+78     	; 0x13e8 <DIO_voidTogglePin+0xec>
			case DIO_PORTC : TOGGLE_BIT(PORTC , Copy_u8Pin); break ;
    139a:	a5 e3       	ldi	r26, 0x35	; 53
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e5 e3       	ldi	r30, 0x35	; 53
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_voidTogglePin+0xbc>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_voidTogglePin+0xb8>
    13bc:	84 27       	eor	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	13 c0       	rjmp	.+38     	; 0x13e8 <DIO_voidTogglePin+0xec>
			case DIO_PORTD : TOGGLE_BIT(PORTD , Copy_u8Pin); break ;
    13c2:	a2 e3       	ldi	r26, 0x32	; 50
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e2 e3       	ldi	r30, 0x32	; 50
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 2e       	mov	r0, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO_voidTogglePin+0xe4>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <DIO_voidTogglePin+0xe0>
    13e4:	84 27       	eor	r24, r20
    13e6:	8c 93       	st	X, r24
		}
}
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection (u8 Copy_u8Port , u8 Copy_u8Direction)
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <DIO_voidSetPortDirection+0x6>
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <DIO_voidSetPortDirection+0x8>
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	3c 83       	std	Y+4, r19	; 0x04
    140e:	2b 83       	std	Y+3, r18	; 0x03
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	91 05       	cpc	r25, r1
    1418:	d1 f0       	breq	.+52     	; 0x144e <DIO_voidSetPortDirection+0x58>
    141a:	2b 81       	ldd	r18, Y+3	; 0x03
    141c:	3c 81       	ldd	r19, Y+4	; 0x04
    141e:	22 30       	cpi	r18, 0x02	; 2
    1420:	31 05       	cpc	r19, r1
    1422:	2c f4       	brge	.+10     	; 0x142e <DIO_voidSetPortDirection+0x38>
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	9c 81       	ldd	r25, Y+4	; 0x04
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	61 f0       	breq	.+24     	; 0x1444 <DIO_voidSetPortDirection+0x4e>
    142c:	1e c0       	rjmp	.+60     	; 0x146a <DIO_voidSetPortDirection+0x74>
    142e:	2b 81       	ldd	r18, Y+3	; 0x03
    1430:	3c 81       	ldd	r19, Y+4	; 0x04
    1432:	22 30       	cpi	r18, 0x02	; 2
    1434:	31 05       	cpc	r19, r1
    1436:	81 f0       	breq	.+32     	; 0x1458 <DIO_voidSetPortDirection+0x62>
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	9c 81       	ldd	r25, Y+4	; 0x04
    143c:	83 30       	cpi	r24, 0x03	; 3
    143e:	91 05       	cpc	r25, r1
    1440:	81 f0       	breq	.+32     	; 0x1462 <DIO_voidSetPortDirection+0x6c>
    1442:	13 c0       	rjmp	.+38     	; 0x146a <DIO_voidSetPortDirection+0x74>
		{
			case DIO_PORTA : DDRA = Copy_u8Direction ; break ;
    1444:	ea e3       	ldi	r30, 0x3A	; 58
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	80 83       	st	Z, r24
    144c:	0e c0       	rjmp	.+28     	; 0x146a <DIO_voidSetPortDirection+0x74>
			case DIO_PORTB : DDRB = Copy_u8Direction ; break ;
    144e:	e7 e3       	ldi	r30, 0x37	; 55
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	80 83       	st	Z, r24
    1456:	09 c0       	rjmp	.+18     	; 0x146a <DIO_voidSetPortDirection+0x74>
			case DIO_PORTC : DDRC = Copy_u8Direction ; break ;
    1458:	e4 e3       	ldi	r30, 0x34	; 52
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	80 83       	st	Z, r24
    1460:	04 c0       	rjmp	.+8      	; 0x146a <DIO_voidSetPortDirection+0x74>
			case DIO_PORTD : DDRD = Copy_u8Direction ; break ;
    1462:	e1 e3       	ldi	r30, 0x31	; 49
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	80 83       	st	Z, r24
		}
}
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue (u8 Copy_u8Port , u8 Copy_u8Value)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	00 d0       	rcall	.+0      	; 0x147e <DIO_voidSetPortValue+0x6>
    147e:	00 d0       	rcall	.+0      	; 0x1480 <DIO_voidSetPortValue+0x8>
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	3c 83       	std	Y+4, r19	; 0x04
    1490:	2b 83       	std	Y+3, r18	; 0x03
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	91 05       	cpc	r25, r1
    149a:	d1 f0       	breq	.+52     	; 0x14d0 <DIO_voidSetPortValue+0x58>
    149c:	2b 81       	ldd	r18, Y+3	; 0x03
    149e:	3c 81       	ldd	r19, Y+4	; 0x04
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	2c f4       	brge	.+10     	; 0x14b0 <DIO_voidSetPortValue+0x38>
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	61 f0       	breq	.+24     	; 0x14c6 <DIO_voidSetPortValue+0x4e>
    14ae:	1e c0       	rjmp	.+60     	; 0x14ec <DIO_voidSetPortValue+0x74>
    14b0:	2b 81       	ldd	r18, Y+3	; 0x03
    14b2:	3c 81       	ldd	r19, Y+4	; 0x04
    14b4:	22 30       	cpi	r18, 0x02	; 2
    14b6:	31 05       	cpc	r19, r1
    14b8:	81 f0       	breq	.+32     	; 0x14da <DIO_voidSetPortValue+0x62>
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	83 30       	cpi	r24, 0x03	; 3
    14c0:	91 05       	cpc	r25, r1
    14c2:	81 f0       	breq	.+32     	; 0x14e4 <DIO_voidSetPortValue+0x6c>
    14c4:	13 c0       	rjmp	.+38     	; 0x14ec <DIO_voidSetPortValue+0x74>
		{
			case DIO_PORTA : PORTA = Copy_u8Value ; break ;
    14c6:	eb e3       	ldi	r30, 0x3B	; 59
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	80 83       	st	Z, r24
    14ce:	0e c0       	rjmp	.+28     	; 0x14ec <DIO_voidSetPortValue+0x74>
			case DIO_PORTB : PORTB = Copy_u8Value ; break ;
    14d0:	e8 e3       	ldi	r30, 0x38	; 56
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	80 83       	st	Z, r24
    14d8:	09 c0       	rjmp	.+18     	; 0x14ec <DIO_voidSetPortValue+0x74>
			case DIO_PORTC : PORTC = Copy_u8Value ; break ;
    14da:	e5 e3       	ldi	r30, 0x35	; 53
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	80 83       	st	Z, r24
    14e2:	04 c0       	rjmp	.+8      	; 0x14ec <DIO_voidSetPortValue+0x74>
			case DIO_PORTD : PORTD = Copy_u8Value ; break ;
    14e4:	e2 e3       	ldi	r30, 0x32	; 50
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	80 83       	st	Z, r24
		}
}
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <DIO_u8GetPortValue>:

u8 	 DIO_u8GetPortValue	  (u8 Copy_u8Port)
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <DIO_u8GetPortValue+0x6>
    1500:	00 d0       	rcall	.+0      	; 0x1502 <DIO_u8GetPortValue+0x8>
    1502:	0f 92       	push	r0
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Port)
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	3c 83       	std	Y+4, r19	; 0x04
    1512:	2b 83       	std	Y+3, r18	; 0x03
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	91 05       	cpc	r25, r1
    151c:	d1 f0       	breq	.+52     	; 0x1552 <DIO_u8GetPortValue+0x58>
    151e:	2b 81       	ldd	r18, Y+3	; 0x03
    1520:	3c 81       	ldd	r19, Y+4	; 0x04
    1522:	22 30       	cpi	r18, 0x02	; 2
    1524:	31 05       	cpc	r19, r1
    1526:	2c f4       	brge	.+10     	; 0x1532 <DIO_u8GetPortValue+0x38>
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	61 f0       	breq	.+24     	; 0x1548 <DIO_u8GetPortValue+0x4e>
    1530:	1f c0       	rjmp	.+62     	; 0x1570 <DIO_u8GetPortValue+0x76>
    1532:	2b 81       	ldd	r18, Y+3	; 0x03
    1534:	3c 81       	ldd	r19, Y+4	; 0x04
    1536:	22 30       	cpi	r18, 0x02	; 2
    1538:	31 05       	cpc	r19, r1
    153a:	81 f0       	breq	.+32     	; 0x155c <DIO_u8GetPortValue+0x62>
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	91 05       	cpc	r25, r1
    1544:	81 f0       	breq	.+32     	; 0x1566 <DIO_u8GetPortValue+0x6c>
    1546:	14 c0       	rjmp	.+40     	; 0x1570 <DIO_u8GetPortValue+0x76>
		{
			case DIO_PORTA : return PINA ;
    1548:	e9 e3       	ldi	r30, 0x39	; 57
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	90 81       	ld	r25, Z
    154e:	9a 83       	std	Y+2, r25	; 0x02
    1550:	10 c0       	rjmp	.+32     	; 0x1572 <DIO_u8GetPortValue+0x78>
			case DIO_PORTB : return PINB ;
    1552:	e6 e3       	ldi	r30, 0x36	; 54
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	20 81       	ld	r18, Z
    1558:	2a 83       	std	Y+2, r18	; 0x02
    155a:	0b c0       	rjmp	.+22     	; 0x1572 <DIO_u8GetPortValue+0x78>
			case DIO_PORTC : return PINC ;
    155c:	e3 e3       	ldi	r30, 0x33	; 51
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	30 81       	ld	r19, Z
    1562:	3a 83       	std	Y+2, r19	; 0x02
    1564:	06 c0       	rjmp	.+12     	; 0x1572 <DIO_u8GetPortValue+0x78>
			case DIO_PORTD : return PIND ;
    1566:	e0 e3       	ldi	r30, 0x30	; 48
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	8a 83       	std	Y+2, r24	; 0x02
    156e:	01 c0       	rjmp	.+2      	; 0x1572 <DIO_u8GetPortValue+0x78>
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <DIO_u8GetPortValue+0x7c>
		}
}
    1572:	9a 81       	ldd	r25, Y+2	; 0x02
    1574:	9d 83       	std	Y+5, r25	; 0x05
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <LCD_voidSendCommand>:
#include "BIT_MATH.h"

#include "DIO.h"
#include "LCD.h"

void LCD_voidSendCommand(u8 Copy_u8Command){
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	2f 97       	sbiw	r28, 0x0f	; 15
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	8f 87       	std	Y+15, r24	; 0x0f

    DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_LOW);
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	40 e0       	ldi	r20, 0x00	; 0
    15a4:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	61 e0       	ldi	r22, 0x01	; 1
    15ac:	40 e0       	ldi	r20, 0x00	; 0
    15ae:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>

    DIO_voidSetPortValue(LCD_Data_PORT, Copy_u8Command);
    15b2:	82 e0       	ldi	r24, 0x02	; 2
    15b4:	6f 85       	ldd	r22, Y+15	; 0x0f
    15b6:	0e 94 3c 0a 	call	0x1478	; 0x1478 <DIO_voidSetPortValue>

    DIO_voidSetPinValue(LCD_CONTROL_PORT, E, DIO_HIGH);
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	62 e0       	ldi	r22, 0x02	; 2
    15be:	41 e0       	ldi	r20, 0x01	; 1
    15c0:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a0 e0       	ldi	r26, 0x00	; 0
    15ca:	b0 e4       	ldi	r27, 0x40	; 64
    15cc:	8b 87       	std	Y+11, r24	; 0x0b
    15ce:	9c 87       	std	Y+12, r25	; 0x0c
    15d0:	ad 87       	std	Y+13, r26	; 0x0d
    15d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15da:	9e 85       	ldd	r25, Y+14	; 0x0e
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	4a ef       	ldi	r20, 0xFA	; 250
    15e2:	54 e4       	ldi	r21, 0x44	; 68
    15e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	8f 83       	std	Y+7, r24	; 0x07
    15ee:	98 87       	std	Y+8, r25	; 0x08
    15f0:	a9 87       	std	Y+9, r26	; 0x09
    15f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15f4:	6f 81       	ldd	r22, Y+7	; 0x07
    15f6:	78 85       	ldd	r23, Y+8	; 0x08
    15f8:	89 85       	ldd	r24, Y+9	; 0x09
    15fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e8       	ldi	r20, 0x80	; 128
    1602:	5f e3       	ldi	r21, 0x3F	; 63
    1604:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1608:	88 23       	and	r24, r24
    160a:	2c f4       	brge	.+10     	; 0x1616 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	9e 83       	std	Y+6, r25	; 0x06
    1612:	8d 83       	std	Y+5, r24	; 0x05
    1614:	3f c0       	rjmp	.+126    	; 0x1694 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1616:	6f 81       	ldd	r22, Y+7	; 0x07
    1618:	78 85       	ldd	r23, Y+8	; 0x08
    161a:	89 85       	ldd	r24, Y+9	; 0x09
    161c:	9a 85       	ldd	r25, Y+10	; 0x0a
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	3f ef       	ldi	r19, 0xFF	; 255
    1622:	4f e7       	ldi	r20, 0x7F	; 127
    1624:	57 e4       	ldi	r21, 0x47	; 71
    1626:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    162a:	18 16       	cp	r1, r24
    162c:	4c f5       	brge	.+82     	; 0x1680 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1630:	7c 85       	ldd	r23, Y+12	; 0x0c
    1632:	8d 85       	ldd	r24, Y+13	; 0x0d
    1634:	9e 85       	ldd	r25, Y+14	; 0x0e
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e2       	ldi	r20, 0x20	; 32
    163c:	51 e4       	ldi	r21, 0x41	; 65
    163e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	bc 01       	movw	r22, r24
    1648:	cd 01       	movw	r24, r26
    164a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	9e 83       	std	Y+6, r25	; 0x06
    1654:	8d 83       	std	Y+5, r24	; 0x05
    1656:	0f c0       	rjmp	.+30     	; 0x1676 <LCD_voidSendCommand+0xee>
    1658:	88 ec       	ldi	r24, 0xC8	; 200
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	9c 83       	std	Y+4, r25	; 0x04
    165e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <LCD_voidSendCommand+0xdc>
    1668:	9c 83       	std	Y+4, r25	; 0x04
    166a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	9e 83       	std	Y+6, r25	; 0x06
    1674:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	69 f7       	brne	.-38     	; 0x1658 <LCD_voidSendCommand+0xd0>
    167e:	14 c0       	rjmp	.+40     	; 0x16a8 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1680:	6f 81       	ldd	r22, Y+7	; 0x07
    1682:	78 85       	ldd	r23, Y+8	; 0x08
    1684:	89 85       	ldd	r24, Y+9	; 0x09
    1686:	9a 85       	ldd	r25, Y+10	; 0x0a
    1688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	9e 83       	std	Y+6, r25	; 0x06
    1692:	8d 83       	std	Y+5, r24	; 0x05
    1694:	8d 81       	ldd	r24, Y+5	; 0x05
    1696:	9e 81       	ldd	r25, Y+6	; 0x06
    1698:	9a 83       	std	Y+2, r25	; 0x02
    169a:	89 83       	std	Y+1, r24	; 0x01
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	9a 81       	ldd	r25, Y+2	; 0x02
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <LCD_voidSendCommand+0x118>
    16a4:	9a 83       	std	Y+2, r25	; 0x02
    16a6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(LCD_CONTROL_PORT, E, DIO_LOW);
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	62 e0       	ldi	r22, 0x02	; 2
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>

}
    16b2:	2f 96       	adiw	r28, 0x0f	; 15
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char){
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	2f 97       	sbiw	r28, 0x0f	; 15
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	8f 87       	std	Y+15, r24	; 0x0f

    DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_HIGH);
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	41 e0       	ldi	r20, 0x01	; 1
    16e0:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	61 e0       	ldi	r22, 0x01	; 1
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>

    DIO_voidSetPortValue(LCD_Data_PORT, Copy_u8Char);
    16ee:	82 e0       	ldi	r24, 0x02	; 2
    16f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    16f2:	0e 94 3c 0a 	call	0x1478	; 0x1478 <DIO_voidSetPortValue>

    DIO_voidSetPinValue(LCD_CONTROL_PORT, E, DIO_HIGH);
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	62 e0       	ldi	r22, 0x02	; 2
    16fa:	41 e0       	ldi	r20, 0x01	; 1
    16fc:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	a0 e0       	ldi	r26, 0x00	; 0
    1706:	b0 e4       	ldi	r27, 0x40	; 64
    1708:	8b 87       	std	Y+11, r24	; 0x0b
    170a:	9c 87       	std	Y+12, r25	; 0x0c
    170c:	ad 87       	std	Y+13, r26	; 0x0d
    170e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1710:	6b 85       	ldd	r22, Y+11	; 0x0b
    1712:	7c 85       	ldd	r23, Y+12	; 0x0c
    1714:	8d 85       	ldd	r24, Y+13	; 0x0d
    1716:	9e 85       	ldd	r25, Y+14	; 0x0e
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	4a ef       	ldi	r20, 0xFA	; 250
    171e:	54 e4       	ldi	r21, 0x44	; 68
    1720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	8f 83       	std	Y+7, r24	; 0x07
    172a:	98 87       	std	Y+8, r25	; 0x08
    172c:	a9 87       	std	Y+9, r26	; 0x09
    172e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1730:	6f 81       	ldd	r22, Y+7	; 0x07
    1732:	78 85       	ldd	r23, Y+8	; 0x08
    1734:	89 85       	ldd	r24, Y+9	; 0x09
    1736:	9a 85       	ldd	r25, Y+10	; 0x0a
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	40 e8       	ldi	r20, 0x80	; 128
    173e:	5f e3       	ldi	r21, 0x3F	; 63
    1740:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1744:	88 23       	and	r24, r24
    1746:	2c f4       	brge	.+10     	; 0x1752 <LCD_voidSendChar+0x8e>
		__ticks = 1;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	9e 83       	std	Y+6, r25	; 0x06
    174e:	8d 83       	std	Y+5, r24	; 0x05
    1750:	3f c0       	rjmp	.+126    	; 0x17d0 <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
    1752:	6f 81       	ldd	r22, Y+7	; 0x07
    1754:	78 85       	ldd	r23, Y+8	; 0x08
    1756:	89 85       	ldd	r24, Y+9	; 0x09
    1758:	9a 85       	ldd	r25, Y+10	; 0x0a
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	3f ef       	ldi	r19, 0xFF	; 255
    175e:	4f e7       	ldi	r20, 0x7F	; 127
    1760:	57 e4       	ldi	r21, 0x47	; 71
    1762:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1766:	18 16       	cp	r1, r24
    1768:	4c f5       	brge	.+82     	; 0x17bc <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176a:	6b 85       	ldd	r22, Y+11	; 0x0b
    176c:	7c 85       	ldd	r23, Y+12	; 0x0c
    176e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1770:	9e 85       	ldd	r25, Y+14	; 0x0e
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e2       	ldi	r20, 0x20	; 32
    1778:	51 e4       	ldi	r21, 0x41	; 65
    177a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	bc 01       	movw	r22, r24
    1784:	cd 01       	movw	r24, r26
    1786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	9e 83       	std	Y+6, r25	; 0x06
    1790:	8d 83       	std	Y+5, r24	; 0x05
    1792:	0f c0       	rjmp	.+30     	; 0x17b2 <LCD_voidSendChar+0xee>
    1794:	88 ec       	ldi	r24, 0xC8	; 200
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	9c 83       	std	Y+4, r25	; 0x04
    179a:	8b 83       	std	Y+3, r24	; 0x03
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	9c 81       	ldd	r25, Y+4	; 0x04
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	f1 f7       	brne	.-4      	; 0x17a0 <LCD_voidSendChar+0xdc>
    17a4:	9c 83       	std	Y+4, r25	; 0x04
    17a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a8:	8d 81       	ldd	r24, Y+5	; 0x05
    17aa:	9e 81       	ldd	r25, Y+6	; 0x06
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	9e 83       	std	Y+6, r25	; 0x06
    17b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	69 f7       	brne	.-38     	; 0x1794 <LCD_voidSendChar+0xd0>
    17ba:	14 c0       	rjmp	.+40     	; 0x17e4 <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17bc:	6f 81       	ldd	r22, Y+7	; 0x07
    17be:	78 85       	ldd	r23, Y+8	; 0x08
    17c0:	89 85       	ldd	r24, Y+9	; 0x09
    17c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c8:	dc 01       	movw	r26, r24
    17ca:	cb 01       	movw	r24, r22
    17cc:	9e 83       	std	Y+6, r25	; 0x06
    17ce:	8d 83       	std	Y+5, r24	; 0x05
    17d0:	8d 81       	ldd	r24, Y+5	; 0x05
    17d2:	9e 81       	ldd	r25, Y+6	; 0x06
    17d4:	9a 83       	std	Y+2, r25	; 0x02
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	9a 81       	ldd	r25, Y+2	; 0x02
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <LCD_voidSendChar+0x118>
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(LCD_CONTROL_PORT, E, DIO_LOW);
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	62 e0       	ldi	r22, 0x02	; 2
    17e8:	40 e0       	ldi	r20, 0x00	; 0
    17ea:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
}
    17ee:	2f 96       	adiw	r28, 0x0f	; 15
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	de bf       	out	0x3e, r29	; 62
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	cd bf       	out	0x3d, r28	; 61
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <LCD_voidInit>:


void LCD_voidInit(void){
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	cc 54       	subi	r28, 0x4C	; 76
    180e:	d0 40       	sbci	r29, 0x00	; 0
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    // Data Port Direction --> OUTPUT
    DIO_voidSetPortDirection(LCD_Data_PORT, 0xff);
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	6f ef       	ldi	r22, 0xFF	; 255
    181e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_voidSetPortDirection>
    // Control Pins Direction --> OUTPUT
    DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS, DIO_OUTPUT);
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW, DIO_OUTPUT);
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	61 e0       	ldi	r22, 0x01	; 1
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT, E, DIO_OUTPUT);
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	62 e0       	ldi	r22, 0x02	; 2
    183a:	41 e0       	ldi	r20, 0x01	; 1
    183c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
    1840:	fe 01       	movw	r30, r28
    1842:	e7 5b       	subi	r30, 0xB7	; 183
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	a0 ef       	ldi	r26, 0xF0	; 240
    184c:	b1 e4       	ldi	r27, 0x41	; 65
    184e:	80 83       	st	Z, r24
    1850:	91 83       	std	Z+1, r25	; 0x01
    1852:	a2 83       	std	Z+2, r26	; 0x02
    1854:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1856:	8e 01       	movw	r16, r28
    1858:	0b 5b       	subi	r16, 0xBB	; 187
    185a:	1f 4f       	sbci	r17, 0xFF	; 255
    185c:	fe 01       	movw	r30, r28
    185e:	e7 5b       	subi	r30, 0xB7	; 183
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	4a ef       	ldi	r20, 0xFA	; 250
    1870:	54 e4       	ldi	r21, 0x44	; 68
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	f8 01       	movw	r30, r16
    187c:	80 83       	st	Z, r24
    187e:	91 83       	std	Z+1, r25	; 0x01
    1880:	a2 83       	std	Z+2, r26	; 0x02
    1882:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1884:	fe 01       	movw	r30, r28
    1886:	eb 5b       	subi	r30, 0xBB	; 187
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e8       	ldi	r20, 0x80	; 128
    1898:	5f e3       	ldi	r21, 0x3F	; 63
    189a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    189e:	88 23       	and	r24, r24
    18a0:	44 f4       	brge	.+16     	; 0x18b2 <LCD_voidInit+0xb2>
		__ticks = 1;
    18a2:	fe 01       	movw	r30, r28
    18a4:	ed 5b       	subi	r30, 0xBD	; 189
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	80 83       	st	Z, r24
    18b0:	64 c0       	rjmp	.+200    	; 0x197a <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    18b2:	fe 01       	movw	r30, r28
    18b4:	eb 5b       	subi	r30, 0xBB	; 187
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	60 81       	ld	r22, Z
    18ba:	71 81       	ldd	r23, Z+1	; 0x01
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	3f ef       	ldi	r19, 0xFF	; 255
    18c4:	4f e7       	ldi	r20, 0x7F	; 127
    18c6:	57 e4       	ldi	r21, 0x47	; 71
    18c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18cc:	18 16       	cp	r1, r24
    18ce:	0c f0       	brlt	.+2      	; 0x18d2 <LCD_voidInit+0xd2>
    18d0:	43 c0       	rjmp	.+134    	; 0x1958 <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d2:	fe 01       	movw	r30, r28
    18d4:	e7 5b       	subi	r30, 0xB7	; 183
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	60 81       	ld	r22, Z
    18da:	71 81       	ldd	r23, Z+1	; 0x01
    18dc:	82 81       	ldd	r24, Z+2	; 0x02
    18de:	93 81       	ldd	r25, Z+3	; 0x03
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e2       	ldi	r20, 0x20	; 32
    18e6:	51 e4       	ldi	r21, 0x41	; 65
    18e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	8e 01       	movw	r16, r28
    18f2:	0d 5b       	subi	r16, 0xBD	; 189
    18f4:	1f 4f       	sbci	r17, 0xFF	; 255
    18f6:	bc 01       	movw	r22, r24
    18f8:	cd 01       	movw	r24, r26
    18fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	f8 01       	movw	r30, r16
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	80 83       	st	Z, r24
    1908:	1f c0       	rjmp	.+62     	; 0x1948 <LCD_voidInit+0x148>
    190a:	fe 01       	movw	r30, r28
    190c:	ef 5b       	subi	r30, 0xBF	; 191
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	88 ec       	ldi	r24, 0xC8	; 200
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	91 83       	std	Z+1, r25	; 0x01
    1916:	80 83       	st	Z, r24
    1918:	fe 01       	movw	r30, r28
    191a:	ef 5b       	subi	r30, 0xBF	; 191
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	80 81       	ld	r24, Z
    1920:	91 81       	ldd	r25, Z+1	; 0x01
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <LCD_voidInit+0x122>
    1926:	fe 01       	movw	r30, r28
    1928:	ef 5b       	subi	r30, 0xBF	; 191
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1930:	de 01       	movw	r26, r28
    1932:	ad 5b       	subi	r26, 0xBD	; 189
    1934:	bf 4f       	sbci	r27, 0xFF	; 255
    1936:	fe 01       	movw	r30, r28
    1938:	ed 5b       	subi	r30, 0xBD	; 189
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	80 81       	ld	r24, Z
    193e:	91 81       	ldd	r25, Z+1	; 0x01
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	11 96       	adiw	r26, 0x01	; 1
    1944:	9c 93       	st	X, r25
    1946:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1948:	fe 01       	movw	r30, r28
    194a:	ed 5b       	subi	r30, 0xBD	; 189
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	80 81       	ld	r24, Z
    1950:	91 81       	ldd	r25, Z+1	; 0x01
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	d1 f6       	brne	.-76     	; 0x190a <LCD_voidInit+0x10a>
    1956:	24 c0       	rjmp	.+72     	; 0x19a0 <LCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1958:	8e 01       	movw	r16, r28
    195a:	0d 5b       	subi	r16, 0xBD	; 189
    195c:	1f 4f       	sbci	r17, 0xFF	; 255
    195e:	fe 01       	movw	r30, r28
    1960:	eb 5b       	subi	r30, 0xBB	; 187
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	60 81       	ld	r22, Z
    1966:	71 81       	ldd	r23, Z+1	; 0x01
    1968:	82 81       	ldd	r24, Z+2	; 0x02
    196a:	93 81       	ldd	r25, Z+3	; 0x03
    196c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	f8 01       	movw	r30, r16
    1976:	91 83       	std	Z+1, r25	; 0x01
    1978:	80 83       	st	Z, r24
    197a:	fe 01       	movw	r30, r28
    197c:	ed 5b       	subi	r30, 0xBD	; 189
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	80 81       	ld	r24, Z
    1982:	91 81       	ldd	r25, Z+1	; 0x01
    1984:	fe 01       	movw	r30, r28
    1986:	ff 96       	adiw	r30, 0x3f	; 63
    1988:	91 83       	std	Z+1, r25	; 0x01
    198a:	80 83       	st	Z, r24
    198c:	fe 01       	movw	r30, r28
    198e:	ff 96       	adiw	r30, 0x3f	; 63
    1990:	80 81       	ld	r24, Z
    1992:	91 81       	ldd	r25, Z+1	; 0x01
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <LCD_voidInit+0x194>
    1998:	fe 01       	movw	r30, r28
    199a:	ff 96       	adiw	r30, 0x3f	; 63
    199c:	91 83       	std	Z+1, r25	; 0x01
    199e:	80 83       	st	Z, r24

    // DELAY FOR 30 milliseconds
    _delay_ms(30);

    LCD_voidSendCommand(FUNCTION_SET);
    19a0:	88 e3       	ldi	r24, 0x38	; 56
    19a2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_voidSendCommand>
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a0 e2       	ldi	r26, 0x20	; 32
    19ac:	b2 e4       	ldi	r27, 0x42	; 66
    19ae:	8b af       	std	Y+59, r24	; 0x3b
    19b0:	9c af       	std	Y+60, r25	; 0x3c
    19b2:	ad af       	std	Y+61, r26	; 0x3d
    19b4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19b6:	6b ad       	ldd	r22, Y+59	; 0x3b
    19b8:	7c ad       	ldd	r23, Y+60	; 0x3c
    19ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    19bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    19be:	2b ea       	ldi	r18, 0xAB	; 171
    19c0:	3a ea       	ldi	r19, 0xAA	; 170
    19c2:	4a e2       	ldi	r20, 0x2A	; 42
    19c4:	50 e4       	ldi	r21, 0x40	; 64
    19c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	8f ab       	std	Y+55, r24	; 0x37
    19d0:	98 af       	std	Y+56, r25	; 0x38
    19d2:	a9 af       	std	Y+57, r26	; 0x39
    19d4:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    19d6:	6f a9       	ldd	r22, Y+55	; 0x37
    19d8:	78 ad       	ldd	r23, Y+56	; 0x38
    19da:	89 ad       	ldd	r24, Y+57	; 0x39
    19dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e8       	ldi	r20, 0x80	; 128
    19e4:	5f e3       	ldi	r21, 0x3F	; 63
    19e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19ea:	88 23       	and	r24, r24
    19ec:	1c f4       	brge	.+6      	; 0x19f4 <LCD_voidInit+0x1f4>
		__ticks = 1;
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	8e ab       	std	Y+54, r24	; 0x36
    19f2:	91 c0       	rjmp	.+290    	; 0x1b16 <LCD_voidInit+0x316>
	else if (__tmp > 255)
    19f4:	6f a9       	ldd	r22, Y+55	; 0x37
    19f6:	78 ad       	ldd	r23, Y+56	; 0x38
    19f8:	89 ad       	ldd	r24, Y+57	; 0x39
    19fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	4f e7       	ldi	r20, 0x7F	; 127
    1a02:	53 e4       	ldi	r21, 0x43	; 67
    1a04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a08:	18 16       	cp	r1, r24
    1a0a:	0c f0       	brlt	.+2      	; 0x1a0e <LCD_voidInit+0x20e>
    1a0c:	7b c0       	rjmp	.+246    	; 0x1b04 <LCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1a0e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a10:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a12:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a14:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	4a e7       	ldi	r20, 0x7A	; 122
    1a1c:	54 e4       	ldi	r21, 0x44	; 68
    1a1e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	8a ab       	std	Y+50, r24	; 0x32
    1a28:	9b ab       	std	Y+51, r25	; 0x33
    1a2a:	ac ab       	std	Y+52, r26	; 0x34
    1a2c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2e:	6a a9       	ldd	r22, Y+50	; 0x32
    1a30:	7b a9       	ldd	r23, Y+51	; 0x33
    1a32:	8c a9       	ldd	r24, Y+52	; 0x34
    1a34:	9d a9       	ldd	r25, Y+53	; 0x35
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	4a ef       	ldi	r20, 0xFA	; 250
    1a3c:	54 e4       	ldi	r21, 0x44	; 68
    1a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	8e a7       	std	Y+46, r24	; 0x2e
    1a48:	9f a7       	std	Y+47, r25	; 0x2f
    1a4a:	a8 ab       	std	Y+48, r26	; 0x30
    1a4c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1a4e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a50:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a52:	88 a9       	ldd	r24, Y+48	; 0x30
    1a54:	99 a9       	ldd	r25, Y+49	; 0x31
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e8       	ldi	r20, 0x80	; 128
    1a5c:	5f e3       	ldi	r21, 0x3F	; 63
    1a5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a62:	88 23       	and	r24, r24
    1a64:	2c f4       	brge	.+10     	; 0x1a70 <LCD_voidInit+0x270>
		__ticks = 1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9d a7       	std	Y+45, r25	; 0x2d
    1a6c:	8c a7       	std	Y+44, r24	; 0x2c
    1a6e:	3f c0       	rjmp	.+126    	; 0x1aee <LCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    1a70:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a72:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a74:	88 a9       	ldd	r24, Y+48	; 0x30
    1a76:	99 a9       	ldd	r25, Y+49	; 0x31
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	3f ef       	ldi	r19, 0xFF	; 255
    1a7c:	4f e7       	ldi	r20, 0x7F	; 127
    1a7e:	57 e4       	ldi	r21, 0x47	; 71
    1a80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a84:	18 16       	cp	r1, r24
    1a86:	4c f5       	brge	.+82     	; 0x1ada <LCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a88:	6a a9       	ldd	r22, Y+50	; 0x32
    1a8a:	7b a9       	ldd	r23, Y+51	; 0x33
    1a8c:	8c a9       	ldd	r24, Y+52	; 0x34
    1a8e:	9d a9       	ldd	r25, Y+53	; 0x35
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e2       	ldi	r20, 0x20	; 32
    1a96:	51 e4       	ldi	r21, 0x41	; 65
    1a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	cd 01       	movw	r24, r26
    1aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	9d a7       	std	Y+45, r25	; 0x2d
    1aae:	8c a7       	std	Y+44, r24	; 0x2c
    1ab0:	0f c0       	rjmp	.+30     	; 0x1ad0 <LCD_voidInit+0x2d0>
    1ab2:	88 ec       	ldi	r24, 0xC8	; 200
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	9b a7       	std	Y+43, r25	; 0x2b
    1ab8:	8a a7       	std	Y+42, r24	; 0x2a
    1aba:	8a a5       	ldd	r24, Y+42	; 0x2a
    1abc:	9b a5       	ldd	r25, Y+43	; 0x2b
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <LCD_voidInit+0x2be>
    1ac2:	9b a7       	std	Y+43, r25	; 0x2b
    1ac4:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ac8:	9d a5       	ldd	r25, Y+45	; 0x2d
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	9d a7       	std	Y+45, r25	; 0x2d
    1ace:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ad2:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	69 f7       	brne	.-38     	; 0x1ab2 <LCD_voidInit+0x2b2>
    1ad8:	24 c0       	rjmp	.+72     	; 0x1b22 <LCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ada:	6e a5       	ldd	r22, Y+46	; 0x2e
    1adc:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ade:	88 a9       	ldd	r24, Y+48	; 0x30
    1ae0:	99 a9       	ldd	r25, Y+49	; 0x31
    1ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9d a7       	std	Y+45, r25	; 0x2d
    1aec:	8c a7       	std	Y+44, r24	; 0x2c
    1aee:	8c a5       	ldd	r24, Y+44	; 0x2c
    1af0:	9d a5       	ldd	r25, Y+45	; 0x2d
    1af2:	99 a7       	std	Y+41, r25	; 0x29
    1af4:	88 a7       	std	Y+40, r24	; 0x28
    1af6:	88 a5       	ldd	r24, Y+40	; 0x28
    1af8:	99 a5       	ldd	r25, Y+41	; 0x29
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <LCD_voidInit+0x2fa>
    1afe:	99 a7       	std	Y+41, r25	; 0x29
    1b00:	88 a7       	std	Y+40, r24	; 0x28
    1b02:	0f c0       	rjmp	.+30     	; 0x1b22 <LCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b04:	6f a9       	ldd	r22, Y+55	; 0x37
    1b06:	78 ad       	ldd	r23, Y+56	; 0x38
    1b08:	89 ad       	ldd	r24, Y+57	; 0x39
    1b0a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	8e ab       	std	Y+54, r24	; 0x36
    1b16:	8e a9       	ldd	r24, Y+54	; 0x36
    1b18:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b1a:	8f a1       	ldd	r24, Y+39	; 0x27
    1b1c:	8a 95       	dec	r24
    1b1e:	f1 f7       	brne	.-4      	; 0x1b1c <LCD_voidInit+0x31c>
    1b20:	8f a3       	std	Y+39, r24	; 0x27
    // DELAY FOR 40 microseconds
    _delay_us(40);

    LCD_voidSendCommand(ON_OFF_DISPLAY);
    1b22:	8f e0       	ldi	r24, 0x0F	; 15
    1b24:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_voidSendCommand>
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	a0 e2       	ldi	r26, 0x20	; 32
    1b2e:	b2 e4       	ldi	r27, 0x42	; 66
    1b30:	8b a3       	std	Y+35, r24	; 0x23
    1b32:	9c a3       	std	Y+36, r25	; 0x24
    1b34:	ad a3       	std	Y+37, r26	; 0x25
    1b36:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b38:	6b a1       	ldd	r22, Y+35	; 0x23
    1b3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b40:	2b ea       	ldi	r18, 0xAB	; 171
    1b42:	3a ea       	ldi	r19, 0xAA	; 170
    1b44:	4a e2       	ldi	r20, 0x2A	; 42
    1b46:	50 e4       	ldi	r21, 0x40	; 64
    1b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	8f 8f       	std	Y+31, r24	; 0x1f
    1b52:	98 a3       	std	Y+32, r25	; 0x20
    1b54:	a9 a3       	std	Y+33, r26	; 0x21
    1b56:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1b58:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b5a:	78 a1       	ldd	r23, Y+32	; 0x20
    1b5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e8       	ldi	r20, 0x80	; 128
    1b66:	5f e3       	ldi	r21, 0x3F	; 63
    1b68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b6c:	88 23       	and	r24, r24
    1b6e:	1c f4       	brge	.+6      	; 0x1b76 <LCD_voidInit+0x376>
		__ticks = 1;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	8e 8f       	std	Y+30, r24	; 0x1e
    1b74:	91 c0       	rjmp	.+290    	; 0x1c98 <LCD_voidInit+0x498>
	else if (__tmp > 255)
    1b76:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b78:	78 a1       	ldd	r23, Y+32	; 0x20
    1b7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	4f e7       	ldi	r20, 0x7F	; 127
    1b84:	53 e4       	ldi	r21, 0x43	; 67
    1b86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b8a:	18 16       	cp	r1, r24
    1b8c:	0c f0       	brlt	.+2      	; 0x1b90 <LCD_voidInit+0x390>
    1b8e:	7b c0       	rjmp	.+246    	; 0x1c86 <LCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    1b90:	6b a1       	ldd	r22, Y+35	; 0x23
    1b92:	7c a1       	ldd	r23, Y+36	; 0x24
    1b94:	8d a1       	ldd	r24, Y+37	; 0x25
    1b96:	9e a1       	ldd	r25, Y+38	; 0x26
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	4a e7       	ldi	r20, 0x7A	; 122
    1b9e:	54 e4       	ldi	r21, 0x44	; 68
    1ba0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	8a 8f       	std	Y+26, r24	; 0x1a
    1baa:	9b 8f       	std	Y+27, r25	; 0x1b
    1bac:	ac 8f       	std	Y+28, r26	; 0x1c
    1bae:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1bb2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bb4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bb6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	4a ef       	ldi	r20, 0xFA	; 250
    1bbe:	54 e4       	ldi	r21, 0x44	; 68
    1bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	8e 8b       	std	Y+22, r24	; 0x16
    1bca:	9f 8b       	std	Y+23, r25	; 0x17
    1bcc:	a8 8f       	std	Y+24, r26	; 0x18
    1bce:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1bd0:	6e 89       	ldd	r22, Y+22	; 0x16
    1bd2:	7f 89       	ldd	r23, Y+23	; 0x17
    1bd4:	88 8d       	ldd	r24, Y+24	; 0x18
    1bd6:	99 8d       	ldd	r25, Y+25	; 0x19
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be4:	88 23       	and	r24, r24
    1be6:	2c f4       	brge	.+10     	; 0x1bf2 <LCD_voidInit+0x3f2>
		__ticks = 1;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	9d 8b       	std	Y+21, r25	; 0x15
    1bee:	8c 8b       	std	Y+20, r24	; 0x14
    1bf0:	3f c0       	rjmp	.+126    	; 0x1c70 <LCD_voidInit+0x470>
	else if (__tmp > 65535)
    1bf2:	6e 89       	ldd	r22, Y+22	; 0x16
    1bf4:	7f 89       	ldd	r23, Y+23	; 0x17
    1bf6:	88 8d       	ldd	r24, Y+24	; 0x18
    1bf8:	99 8d       	ldd	r25, Y+25	; 0x19
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	3f ef       	ldi	r19, 0xFF	; 255
    1bfe:	4f e7       	ldi	r20, 0x7F	; 127
    1c00:	57 e4       	ldi	r21, 0x47	; 71
    1c02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c06:	18 16       	cp	r1, r24
    1c08:	4c f5       	brge	.+82     	; 0x1c5c <LCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c0c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c0e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c10:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e2       	ldi	r20, 0x20	; 32
    1c18:	51 e4       	ldi	r21, 0x41	; 65
    1c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9d 8b       	std	Y+21, r25	; 0x15
    1c30:	8c 8b       	std	Y+20, r24	; 0x14
    1c32:	0f c0       	rjmp	.+30     	; 0x1c52 <LCD_voidInit+0x452>
    1c34:	88 ec       	ldi	r24, 0xC8	; 200
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9b 8b       	std	Y+19, r25	; 0x13
    1c3a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c3c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c3e:	9b 89       	ldd	r25, Y+19	; 0x13
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <LCD_voidInit+0x440>
    1c44:	9b 8b       	std	Y+19, r25	; 0x13
    1c46:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c48:	8c 89       	ldd	r24, Y+20	; 0x14
    1c4a:	9d 89       	ldd	r25, Y+21	; 0x15
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	9d 8b       	std	Y+21, r25	; 0x15
    1c50:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c52:	8c 89       	ldd	r24, Y+20	; 0x14
    1c54:	9d 89       	ldd	r25, Y+21	; 0x15
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	69 f7       	brne	.-38     	; 0x1c34 <LCD_voidInit+0x434>
    1c5a:	24 c0       	rjmp	.+72     	; 0x1ca4 <LCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5c:	6e 89       	ldd	r22, Y+22	; 0x16
    1c5e:	7f 89       	ldd	r23, Y+23	; 0x17
    1c60:	88 8d       	ldd	r24, Y+24	; 0x18
    1c62:	99 8d       	ldd	r25, Y+25	; 0x19
    1c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9d 8b       	std	Y+21, r25	; 0x15
    1c6e:	8c 8b       	std	Y+20, r24	; 0x14
    1c70:	8c 89       	ldd	r24, Y+20	; 0x14
    1c72:	9d 89       	ldd	r25, Y+21	; 0x15
    1c74:	99 8b       	std	Y+17, r25	; 0x11
    1c76:	88 8b       	std	Y+16, r24	; 0x10
    1c78:	88 89       	ldd	r24, Y+16	; 0x10
    1c7a:	99 89       	ldd	r25, Y+17	; 0x11
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <LCD_voidInit+0x47c>
    1c80:	99 8b       	std	Y+17, r25	; 0x11
    1c82:	88 8b       	std	Y+16, r24	; 0x10
    1c84:	0f c0       	rjmp	.+30     	; 0x1ca4 <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c86:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c88:	78 a1       	ldd	r23, Y+32	; 0x20
    1c8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c8c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	8e 8f       	std	Y+30, r24	; 0x1e
    1c98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c9a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c9e:	8a 95       	dec	r24
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <LCD_voidInit+0x49e>
    1ca2:	8f 87       	std	Y+15, r24	; 0x0f
    // DELAY FOR 40 microseconds
    _delay_us(40);

    LCD_voidSendCommand(CLEAR_DISPLAY);
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_voidSendCommand>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a0 e0       	ldi	r26, 0x00	; 0
    1cb0:	b0 e4       	ldi	r27, 0x40	; 64
    1cb2:	8b 87       	std	Y+11, r24	; 0x0b
    1cb4:	9c 87       	std	Y+12, r25	; 0x0c
    1cb6:	ad 87       	std	Y+13, r26	; 0x0d
    1cb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	4a ef       	ldi	r20, 0xFA	; 250
    1cc8:	54 e4       	ldi	r21, 0x44	; 68
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	8f 83       	std	Y+7, r24	; 0x07
    1cd4:	98 87       	std	Y+8, r25	; 0x08
    1cd6:	a9 87       	std	Y+9, r26	; 0x09
    1cd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cda:	6f 81       	ldd	r22, Y+7	; 0x07
    1cdc:	78 85       	ldd	r23, Y+8	; 0x08
    1cde:	89 85       	ldd	r24, Y+9	; 0x09
    1ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e8       	ldi	r20, 0x80	; 128
    1ce8:	5f e3       	ldi	r21, 0x3F	; 63
    1cea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cee:	88 23       	and	r24, r24
    1cf0:	2c f4       	brge	.+10     	; 0x1cfc <LCD_voidInit+0x4fc>
		__ticks = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
    1cfa:	3f c0       	rjmp	.+126    	; 0x1d7a <LCD_voidInit+0x57a>
	else if (__tmp > 65535)
    1cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfe:	78 85       	ldd	r23, Y+8	; 0x08
    1d00:	89 85       	ldd	r24, Y+9	; 0x09
    1d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	3f ef       	ldi	r19, 0xFF	; 255
    1d08:	4f e7       	ldi	r20, 0x7F	; 127
    1d0a:	57 e4       	ldi	r21, 0x47	; 71
    1d0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d10:	18 16       	cp	r1, r24
    1d12:	4c f5       	brge	.+82     	; 0x1d66 <LCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e2       	ldi	r20, 0x20	; 32
    1d22:	51 e4       	ldi	r21, 0x41	; 65
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	9e 83       	std	Y+6, r25	; 0x06
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
    1d3c:	0f c0       	rjmp	.+30     	; 0x1d5c <LCD_voidInit+0x55c>
    1d3e:	88 ec       	ldi	r24, 0xC8	; 200
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	9c 83       	std	Y+4, r25	; 0x04
    1d44:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <LCD_voidInit+0x54a>
    1d4e:	9c 83       	std	Y+4, r25	; 0x04
    1d50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	69 f7       	brne	.-38     	; 0x1d3e <LCD_voidInit+0x53e>
    1d64:	14 c0       	rjmp	.+40     	; 0x1d8e <LCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d66:	6f 81       	ldd	r22, Y+7	; 0x07
    1d68:	78 85       	ldd	r23, Y+8	; 0x08
    1d6a:	89 85       	ldd	r24, Y+9	; 0x09
    1d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9e 83       	std	Y+6, r25	; 0x06
    1d78:	8d 83       	std	Y+5, r24	; 0x05
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	9a 81       	ldd	r25, Y+2	; 0x02
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <LCD_voidInit+0x586>
    1d8a:	9a 83       	std	Y+2, r25	; 0x02
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    // DELAY FOR 2 microseconds
    _delay_ms(2);

}
    1d8e:	c4 5b       	subi	r28, 0xB4	; 180
    1d90:	df 4f       	sbci	r29, 0xFF	; 255
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	08 95       	ret

00001da6 <LCD_voidSendString>:

void LCD_voidSendString(u8* Copy_u8PString){
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <LCD_voidSendString+0x6>
    1dac:	0f 92       	push	r0
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	9b 83       	std	Y+3, r25	; 0x03
    1db4:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8Counter;
    for ( Local_u8Counter = 0; Copy_u8PString[Local_u8Counter] != "\0"; Local_u8Counter++)
    1db6:	19 82       	std	Y+1, r1	; 0x01
    1db8:	0e c0       	rjmp	.+28     	; 0x1dd6 <LCD_voidSendString+0x30>
    {
        LCD_voidSendChar(Copy_u8PString[Local_u8Counter]);
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	e2 0f       	add	r30, r18
    1dc8:	f3 1f       	adc	r31, r19
    1dca:	80 81       	ld	r24, Z
    1dcc:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <LCD_voidSendChar>
}

void LCD_voidSendString(u8* Copy_u8PString){

    u8 Local_u8Counter;
    for ( Local_u8Counter = 0; Copy_u8PString[Local_u8Counter] != "\0"; Local_u8Counter++)
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	8f 5f       	subi	r24, 0xFF	; 255
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	9b 81       	ldd	r25, Y+3	; 0x03
    1de0:	fc 01       	movw	r30, r24
    1de2:	e2 0f       	add	r30, r18
    1de4:	f3 1f       	adc	r31, r19
    1de6:	80 81       	ld	r24, Z
    1de8:	88 2f       	mov	r24, r24
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	80 36       	cpi	r24, 0x60	; 96
    1df0:	92 07       	cpc	r25, r18
    1df2:	19 f7       	brne	.-58     	; 0x1dba <LCD_voidSendString+0x14>
    {
        LCD_voidSendChar(Copy_u8PString[Local_u8Counter]);
    }
    
}
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_u8CharAddress, u8* Copy_u8PASpecialChar){
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <LCD_voidSendSpecialChar+0x6>
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <LCD_voidSendSpecialChar+0x8>
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	8a 83       	std	Y+2, r24	; 0x02
    1e0e:	7c 83       	std	Y+4, r23	; 0x04
    1e10:	6b 83       	std	Y+3, r22	; 0x03

    LCD_voidSendCommand(CG_BASE_ADDRESS + Copy_u8CharAddress * 8);
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	88 2f       	mov	r24, r24
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	08 96       	adiw	r24, 0x08	; 8
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_voidSendCommand>
    u8 Local_u8Counter;
    for ( Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    1e2a:	19 82       	std	Y+1, r1	; 0x01
    1e2c:	0e c0       	rjmp	.+28     	; 0x1e4a <LCD_voidSendSpecialChar+0x4a>
    {
        LCD_voidSendChar(Copy_u8PASpecialChar[Local_u8Counter]);
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	fc 01       	movw	r30, r24
    1e3a:	e2 0f       	add	r30, r18
    1e3c:	f3 1f       	adc	r31, r19
    1e3e:	80 81       	ld	r24, Z
    1e40:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <LCD_voidSendChar>

void LCD_voidSendSpecialChar(u8 Copy_u8CharAddress, u8* Copy_u8PASpecialChar){

    LCD_voidSendCommand(CG_BASE_ADDRESS + Copy_u8CharAddress * 8);
    u8 Local_u8Counter;
    for ( Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	8f 5f       	subi	r24, 0xFF	; 255
    1e48:	89 83       	std	Y+1, r24	; 0x01
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	88 30       	cpi	r24, 0x08	; 8
    1e4e:	78 f3       	brcs	.-34     	; 0x1e2e <LCD_voidSendSpecialChar+0x2e>
    {
        LCD_voidSendChar(Copy_u8PASpecialChar[Local_u8Counter]);
    }
    //LCD_voidSendCommand(0x80);
}
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <LCD_voidSetLocation>:

void LCD_voidSetLocation(u8 Copy_u8Line, u8 Copy_u8CharNum){
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <LCD_voidSetLocation+0x6>
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <LCD_voidSetLocation+0x8>
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    1e6c:	6a 83       	std	Y+2, r22	; 0x02

    switch (Copy_u8Line)
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	3c 83       	std	Y+4, r19	; 0x04
    1e76:	2b 83       	std	Y+3, r18	; 0x03
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	91 05       	cpc	r25, r1
    1e80:	31 f0       	breq	.+12     	; 0x1e8e <LCD_voidSetLocation+0x30>
    1e82:	2b 81       	ldd	r18, Y+3	; 0x03
    1e84:	3c 81       	ldd	r19, Y+4	; 0x04
    1e86:	22 30       	cpi	r18, 0x02	; 2
    1e88:	31 05       	cpc	r19, r1
    1e8a:	31 f0       	breq	.+12     	; 0x1e98 <LCD_voidSetLocation+0x3a>
    1e8c:	09 c0       	rjmp	.+18     	; 0x1ea0 <LCD_voidSetLocation+0x42>
    {
    case LCD_LINE1:
        LCD_voidSendCommand(LCD_L1_BASE_ADDRESS + Copy_u8CharNum);
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	80 58       	subi	r24, 0x80	; 128
    1e92:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_voidSendCommand>
    1e96:	04 c0       	rjmp	.+8      	; 0x1ea0 <LCD_voidSetLocation+0x42>
        break;

    case LCD_LINE2:
        LCD_voidSendCommand(LCD_L2_BASE_ADDRESS + Copy_u8CharNum);
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	80 54       	subi	r24, 0x40	; 64
    1e9c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_voidSendCommand>
        break;
    
    default:
        break;
    }
}
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <LCD_voidSendNumber>:


void LCD_voidSendNumber(s32 Copy_s32Number)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	29 97       	sbiw	r28, 0x09	; 9
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	6e 83       	std	Y+6, r22	; 0x06
    1ec4:	7f 83       	std	Y+7, r23	; 0x07
    1ec6:	88 87       	std	Y+8, r24	; 0x08
    1ec8:	99 87       	std	Y+9, r25	; 0x09
	u32 Local_u32Counter = 1;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	a0 e0       	ldi	r26, 0x00	; 0
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	8a 83       	std	Y+2, r24	; 0x02
    1ed4:	9b 83       	std	Y+3, r25	; 0x03
    1ed6:	ac 83       	std	Y+4, r26	; 0x04
    1ed8:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_u32Digit = 0;
    1eda:	19 82       	std	Y+1, r1	; 0x01

	/* print (-) if the number is negative */
	if(Copy_s32Number < 0)
    1edc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ede:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee0:	a8 85       	ldd	r26, Y+8	; 0x08
    1ee2:	b9 85       	ldd	r27, Y+9	; 0x09
    1ee4:	bb 23       	and	r27, r27
    1ee6:	94 f4       	brge	.+36     	; 0x1f0c <LCD_voidSendNumber+0x5e>
	{
		LCD_voidSendChar('-');
    1ee8:	8d e2       	ldi	r24, 0x2D	; 45
    1eea:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <LCD_voidSendChar>
		/* return the number to positive */
		Copy_s32Number = -Copy_s32Number;
    1eee:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef2:	a8 85       	ldd	r26, Y+8	; 0x08
    1ef4:	b9 85       	ldd	r27, Y+9	; 0x09
    1ef6:	b0 95       	com	r27
    1ef8:	a0 95       	com	r26
    1efa:	90 95       	com	r25
    1efc:	81 95       	neg	r24
    1efe:	9f 4f       	sbci	r25, 0xFF	; 255
    1f00:	af 4f       	sbci	r26, 0xFF	; 255
    1f02:	bf 4f       	sbci	r27, 0xFF	; 255
    1f04:	8e 83       	std	Y+6, r24	; 0x06
    1f06:	9f 83       	std	Y+7, r25	; 0x07
    1f08:	a8 87       	std	Y+8, r26	; 0x08
    1f0a:	b9 87       	std	Y+9, r27	; 0x09
	}
	if (Copy_s32Number == 0)
    1f0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f10:	a8 85       	ldd	r26, Y+8	; 0x08
    1f12:	b9 85       	ldd	r27, Y+9	; 0x09
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	a1 05       	cpc	r26, r1
    1f18:	b1 05       	cpc	r27, r1
    1f1a:	b1 f4       	brne	.+44     	; 0x1f48 <LCD_voidSendNumber+0x9a>
		LCD_voidSendChar('0');
    1f1c:	80 e3       	ldi	r24, 0x30	; 48
    1f1e:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <LCD_voidSendChar>
    1f22:	76 c0       	rjmp	.+236    	; 0x2010 <LCD_voidSendNumber+0x162>
	else
	{
		while (Copy_s32Number/Local_u32Counter != 0)
		{
			Local_u32Counter *= 10;
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	9b 81       	ldd	r25, Y+3	; 0x03
    1f28:	ac 81       	ldd	r26, Y+4	; 0x04
    1f2a:	bd 81       	ldd	r27, Y+5	; 0x05
    1f2c:	2a e0       	ldi	r18, 0x0A	; 10
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e0       	ldi	r20, 0x00	; 0
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	bc 01       	movw	r22, r24
    1f36:	cd 01       	movw	r24, r26
    1f38:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__mulsi3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	8a 83       	std	Y+2, r24	; 0x02
    1f42:	9b 83       	std	Y+3, r25	; 0x03
    1f44:	ac 83       	std	Y+4, r26	; 0x04
    1f46:	bd 83       	std	Y+5, r27	; 0x05
	}
	if (Copy_s32Number == 0)
		LCD_voidSendChar('0');
	else
	{
		while (Copy_s32Number/Local_u32Counter != 0)
    1f48:	8e 81       	ldd	r24, Y+6	; 0x06
    1f4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f4c:	a8 85       	ldd	r26, Y+8	; 0x08
    1f4e:	b9 85       	ldd	r27, Y+9	; 0x09
    1f50:	2a 81       	ldd	r18, Y+2	; 0x02
    1f52:	3b 81       	ldd	r19, Y+3	; 0x03
    1f54:	4c 81       	ldd	r20, Y+4	; 0x04
    1f56:	5d 81       	ldd	r21, Y+5	; 0x05
    1f58:	bc 01       	movw	r22, r24
    1f5a:	cd 01       	movw	r24, r26
    1f5c:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <__udivmodsi4>
    1f60:	da 01       	movw	r26, r20
    1f62:	c9 01       	movw	r24, r18
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	a1 05       	cpc	r26, r1
    1f68:	b1 05       	cpc	r27, r1
    1f6a:	e1 f6       	brne	.-72     	; 0x1f24 <LCD_voidSendNumber+0x76>
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f70:	ac 81       	ldd	r26, Y+4	; 0x04
    1f72:	bd 81       	ldd	r27, Y+5	; 0x05
    1f74:	2a e0       	ldi	r18, 0x0A	; 10
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	50 e0       	ldi	r21, 0x00	; 0
    1f7c:	bc 01       	movw	r22, r24
    1f7e:	cd 01       	movw	r24, r26
    1f80:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <__udivmodsi4>
    1f84:	da 01       	movw	r26, r20
    1f86:	c9 01       	movw	r24, r18
    1f88:	8a 83       	std	Y+2, r24	; 0x02
    1f8a:	9b 83       	std	Y+3, r25	; 0x03
    1f8c:	ac 83       	std	Y+4, r26	; 0x04
    1f8e:	bd 83       	std	Y+5, r27	; 0x05
    1f90:	37 c0       	rjmp	.+110    	; 0x2000 <LCD_voidSendNumber+0x152>

		while (Local_u32Counter != 0)
		{
			Local_u32Digit = Copy_s32Number/Local_u32Counter;
    1f92:	8e 81       	ldd	r24, Y+6	; 0x06
    1f94:	9f 81       	ldd	r25, Y+7	; 0x07
    1f96:	a8 85       	ldd	r26, Y+8	; 0x08
    1f98:	b9 85       	ldd	r27, Y+9	; 0x09
    1f9a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f9c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f9e:	4c 81       	ldd	r20, Y+4	; 0x04
    1fa0:	5d 81       	ldd	r21, Y+5	; 0x05
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <__udivmodsi4>
    1faa:	da 01       	movw	r26, r20
    1fac:	c9 01       	movw	r24, r18
    1fae:	89 83       	std	Y+1, r24	; 0x01

			LCD_voidSendChar(Local_u32Digit + '0');
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	80 5d       	subi	r24, 0xD0	; 208
    1fb4:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <LCD_voidSendChar>

			Copy_s32Number = Copy_s32Number%Local_u32Counter;
    1fb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fba:	9f 81       	ldd	r25, Y+7	; 0x07
    1fbc:	a8 85       	ldd	r26, Y+8	; 0x08
    1fbe:	b9 85       	ldd	r27, Y+9	; 0x09
    1fc0:	2a 81       	ldd	r18, Y+2	; 0x02
    1fc2:	3b 81       	ldd	r19, Y+3	; 0x03
    1fc4:	4c 81       	ldd	r20, Y+4	; 0x04
    1fc6:	5d 81       	ldd	r21, Y+5	; 0x05
    1fc8:	bc 01       	movw	r22, r24
    1fca:	cd 01       	movw	r24, r26
    1fcc:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <__udivmodsi4>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	8e 83       	std	Y+6, r24	; 0x06
    1fd6:	9f 83       	std	Y+7, r25	; 0x07
    1fd8:	a8 87       	std	Y+8, r26	; 0x08
    1fda:	b9 87       	std	Y+9, r27	; 0x09

			Local_u32Counter /= 10;
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe0:	ac 81       	ldd	r26, Y+4	; 0x04
    1fe2:	bd 81       	ldd	r27, Y+5	; 0x05
    1fe4:	2a e0       	ldi	r18, 0x0A	; 10
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	bc 01       	movw	r22, r24
    1fee:	cd 01       	movw	r24, r26
    1ff0:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <__udivmodsi4>
    1ff4:	da 01       	movw	r26, r20
    1ff6:	c9 01       	movw	r24, r18
    1ff8:	8a 83       	std	Y+2, r24	; 0x02
    1ffa:	9b 83       	std	Y+3, r25	; 0x03
    1ffc:	ac 83       	std	Y+4, r26	; 0x04
    1ffe:	bd 83       	std	Y+5, r27	; 0x05
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;

		while (Local_u32Counter != 0)
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	9b 81       	ldd	r25, Y+3	; 0x03
    2004:	ac 81       	ldd	r26, Y+4	; 0x04
    2006:	bd 81       	ldd	r27, Y+5	; 0x05
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	a1 05       	cpc	r26, r1
    200c:	b1 05       	cpc	r27, r1
    200e:	09 f6       	brne	.-126    	; 0x1f92 <LCD_voidSendNumber+0xe4>
			Copy_s32Number = Copy_s32Number%Local_u32Counter;

			Local_u32Counter /= 10;
		}
	}
}
    2010:	29 96       	adiw	r28, 0x09	; 9
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <LCD_voidDisplayDirection>:

void LCD_voidDisplayDirection(u8 Copy_u8Direction) {
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	0f 92       	push	r0
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	89 83       	std	Y+1, r24	; 0x01

    LCD_voidSendCommand(CLEAR_DISPLAY);
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_voidSendCommand>
    LCD_voidSetLocation(1, 0);
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_voidSetLocation>

    if (Copy_u8Direction == CLOCKWISE) {
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	81 30       	cpi	r24, 0x01	; 1
    2040:	29 f4       	brne	.+10     	; 0x204c <LCD_voidDisplayDirection+0x2a>
        LCD_voidSendString("Clockwise");
    2042:	82 e6       	ldi	r24, 0x62	; 98
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <LCD_voidSendString>
    204a:	07 c0       	rjmp	.+14     	; 0x205a <LCD_voidDisplayDirection+0x38>
    } else if (Copy_u8Direction == COUNTER_CLOCKWISE) {
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	82 30       	cpi	r24, 0x02	; 2
    2050:	21 f4       	brne	.+8      	; 0x205a <LCD_voidDisplayDirection+0x38>
        LCD_voidSendString("Counter-CW");
    2052:	8c e6       	ldi	r24, 0x6C	; 108
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <LCD_voidSendString>
    }
}
    205a:	0f 90       	pop	r0
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <MOTOR_voidInit>:
#include "DIO.h"
#include "LCD.h"
#include "MOTOR.h"


void MOTOR_voidInit(void){
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    // set the pin of STPM OUTPUT
	DIO_voidSetPinDirection(MOTOR_PORT, DIO_PIN0, DIO_OUTPUT);
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	41 e0       	ldi	r20, 0x01	; 1
    2070:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(MOTOR_PORT, DIO_PIN1, DIO_OUTPUT);
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	61 e0       	ldi	r22, 0x01	; 1
    2078:	41 e0       	ldi	r20, 0x01	; 1
    207a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(MOTOR_PORT, DIO_PIN2, DIO_OUTPUT);
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	62 e0       	ldi	r22, 0x02	; 2
    2082:	41 e0       	ldi	r20, 0x01	; 1
    2084:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(MOTOR_PORT, DIO_PIN3, DIO_OUTPUT);
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	63 e0       	ldi	r22, 0x03	; 3
    208c:	41 e0       	ldi	r20, 0x01	; 1
    208e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidSetPinDirection>
}
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <MOTOR_voidClockwiseRotation>:

void MOTOR_voidClockwiseRotation(u8 Copy_u8Step)
{
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	ea 97       	sbiw	r28, 0x3a	; 58
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	8a af       	std	Y+58, r24	; 0x3a

	for(u8 Localu8Count = 0; Localu8Count < Copy_u8Step/4; Localu8Count++)
    20ae:	19 ae       	std	Y+57, r1	; 0x39
    20b0:	1b c2       	rjmp	.+1078   	; 0x24e8 <MOTOR_voidClockwiseRotation+0x450>
	{
		// blue
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN0, DIO_HIGH);
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	60 e0       	ldi	r22, 0x00	; 0
    20b6:	41 e0       	ldi	r20, 0x01	; 1
    20b8:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN1, DIO_LOW);
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	61 e0       	ldi	r22, 0x01	; 1
    20c0:	40 e0       	ldi	r20, 0x00	; 0
    20c2:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN2, DIO_LOW);
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	62 e0       	ldi	r22, 0x02	; 2
    20ca:	40 e0       	ldi	r20, 0x00	; 0
    20cc:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN3, DIO_LOW);
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	63 e0       	ldi	r22, 0x03	; 3
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	a8 e4       	ldi	r26, 0x48	; 72
    20e0:	b3 e4       	ldi	r27, 0x43	; 67
    20e2:	8d ab       	std	Y+53, r24	; 0x35
    20e4:	9e ab       	std	Y+54, r25	; 0x36
    20e6:	af ab       	std	Y+55, r26	; 0x37
    20e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ea:	6d a9       	ldd	r22, Y+53	; 0x35
    20ec:	7e a9       	ldd	r23, Y+54	; 0x36
    20ee:	8f a9       	ldd	r24, Y+55	; 0x37
    20f0:	98 ad       	ldd	r25, Y+56	; 0x38
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	4a ef       	ldi	r20, 0xFA	; 250
    20f8:	54 e4       	ldi	r21, 0x44	; 68
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	89 ab       	std	Y+49, r24	; 0x31
    2104:	9a ab       	std	Y+50, r25	; 0x32
    2106:	ab ab       	std	Y+51, r26	; 0x33
    2108:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    210a:	69 a9       	ldd	r22, Y+49	; 0x31
    210c:	7a a9       	ldd	r23, Y+50	; 0x32
    210e:	8b a9       	ldd	r24, Y+51	; 0x33
    2110:	9c a9       	ldd	r25, Y+52	; 0x34
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e8       	ldi	r20, 0x80	; 128
    2118:	5f e3       	ldi	r21, 0x3F	; 63
    211a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    211e:	88 23       	and	r24, r24
    2120:	2c f4       	brge	.+10     	; 0x212c <MOTOR_voidClockwiseRotation+0x94>
		__ticks = 1;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	98 ab       	std	Y+48, r25	; 0x30
    2128:	8f a7       	std	Y+47, r24	; 0x2f
    212a:	3f c0       	rjmp	.+126    	; 0x21aa <MOTOR_voidClockwiseRotation+0x112>
	else if (__tmp > 65535)
    212c:	69 a9       	ldd	r22, Y+49	; 0x31
    212e:	7a a9       	ldd	r23, Y+50	; 0x32
    2130:	8b a9       	ldd	r24, Y+51	; 0x33
    2132:	9c a9       	ldd	r25, Y+52	; 0x34
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	3f ef       	ldi	r19, 0xFF	; 255
    2138:	4f e7       	ldi	r20, 0x7F	; 127
    213a:	57 e4       	ldi	r21, 0x47	; 71
    213c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2140:	18 16       	cp	r1, r24
    2142:	4c f5       	brge	.+82     	; 0x2196 <MOTOR_voidClockwiseRotation+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2144:	6d a9       	ldd	r22, Y+53	; 0x35
    2146:	7e a9       	ldd	r23, Y+54	; 0x36
    2148:	8f a9       	ldd	r24, Y+55	; 0x37
    214a:	98 ad       	ldd	r25, Y+56	; 0x38
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e2       	ldi	r20, 0x20	; 32
    2152:	51 e4       	ldi	r21, 0x41	; 65
    2154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	bc 01       	movw	r22, r24
    215e:	cd 01       	movw	r24, r26
    2160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	98 ab       	std	Y+48, r25	; 0x30
    216a:	8f a7       	std	Y+47, r24	; 0x2f
    216c:	0f c0       	rjmp	.+30     	; 0x218c <MOTOR_voidClockwiseRotation+0xf4>
    216e:	88 ec       	ldi	r24, 0xC8	; 200
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9e a7       	std	Y+46, r25	; 0x2e
    2174:	8d a7       	std	Y+45, r24	; 0x2d
    2176:	8d a5       	ldd	r24, Y+45	; 0x2d
    2178:	9e a5       	ldd	r25, Y+46	; 0x2e
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	f1 f7       	brne	.-4      	; 0x217a <MOTOR_voidClockwiseRotation+0xe2>
    217e:	9e a7       	std	Y+46, r25	; 0x2e
    2180:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2182:	8f a5       	ldd	r24, Y+47	; 0x2f
    2184:	98 a9       	ldd	r25, Y+48	; 0x30
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	98 ab       	std	Y+48, r25	; 0x30
    218a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218c:	8f a5       	ldd	r24, Y+47	; 0x2f
    218e:	98 a9       	ldd	r25, Y+48	; 0x30
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	69 f7       	brne	.-38     	; 0x216e <MOTOR_voidClockwiseRotation+0xd6>
    2194:	14 c0       	rjmp	.+40     	; 0x21be <MOTOR_voidClockwiseRotation+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2196:	69 a9       	ldd	r22, Y+49	; 0x31
    2198:	7a a9       	ldd	r23, Y+50	; 0x32
    219a:	8b a9       	ldd	r24, Y+51	; 0x33
    219c:	9c a9       	ldd	r25, Y+52	; 0x34
    219e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	98 ab       	std	Y+48, r25	; 0x30
    21a8:	8f a7       	std	Y+47, r24	; 0x2f
    21aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ac:	98 a9       	ldd	r25, Y+48	; 0x30
    21ae:	9c a7       	std	Y+44, r25	; 0x2c
    21b0:	8b a7       	std	Y+43, r24	; 0x2b
    21b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    21b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <MOTOR_voidClockwiseRotation+0x11e>
    21ba:	9c a7       	std	Y+44, r25	; 0x2c
    21bc:	8b a7       	std	Y+43, r24	; 0x2b
		// because proteus work on 200 ms
		_delay_ms(200);

		// pink
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN0, DIO_LOW);
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	40 e0       	ldi	r20, 0x00	; 0
    21c4:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN1, DIO_HIGH);
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	61 e0       	ldi	r22, 0x01	; 1
    21cc:	41 e0       	ldi	r20, 0x01	; 1
    21ce:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN2, DIO_LOW);
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	62 e0       	ldi	r22, 0x02	; 2
    21d6:	40 e0       	ldi	r20, 0x00	; 0
    21d8:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN3, DIO_LOW);
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	63 e0       	ldi	r22, 0x03	; 3
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	a8 e4       	ldi	r26, 0x48	; 72
    21ec:	b3 e4       	ldi	r27, 0x43	; 67
    21ee:	8f a3       	std	Y+39, r24	; 0x27
    21f0:	98 a7       	std	Y+40, r25	; 0x28
    21f2:	a9 a7       	std	Y+41, r26	; 0x29
    21f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f6:	6f a1       	ldd	r22, Y+39	; 0x27
    21f8:	78 a5       	ldd	r23, Y+40	; 0x28
    21fa:	89 a5       	ldd	r24, Y+41	; 0x29
    21fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	4a ef       	ldi	r20, 0xFA	; 250
    2204:	54 e4       	ldi	r21, 0x44	; 68
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	8b a3       	std	Y+35, r24	; 0x23
    2210:	9c a3       	std	Y+36, r25	; 0x24
    2212:	ad a3       	std	Y+37, r26	; 0x25
    2214:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2216:	6b a1       	ldd	r22, Y+35	; 0x23
    2218:	7c a1       	ldd	r23, Y+36	; 0x24
    221a:	8d a1       	ldd	r24, Y+37	; 0x25
    221c:	9e a1       	ldd	r25, Y+38	; 0x26
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e8       	ldi	r20, 0x80	; 128
    2224:	5f e3       	ldi	r21, 0x3F	; 63
    2226:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    222a:	88 23       	and	r24, r24
    222c:	2c f4       	brge	.+10     	; 0x2238 <MOTOR_voidClockwiseRotation+0x1a0>
		__ticks = 1;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	9a a3       	std	Y+34, r25	; 0x22
    2234:	89 a3       	std	Y+33, r24	; 0x21
    2236:	3f c0       	rjmp	.+126    	; 0x22b6 <MOTOR_voidClockwiseRotation+0x21e>
	else if (__tmp > 65535)
    2238:	6b a1       	ldd	r22, Y+35	; 0x23
    223a:	7c a1       	ldd	r23, Y+36	; 0x24
    223c:	8d a1       	ldd	r24, Y+37	; 0x25
    223e:	9e a1       	ldd	r25, Y+38	; 0x26
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	3f ef       	ldi	r19, 0xFF	; 255
    2244:	4f e7       	ldi	r20, 0x7F	; 127
    2246:	57 e4       	ldi	r21, 0x47	; 71
    2248:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    224c:	18 16       	cp	r1, r24
    224e:	4c f5       	brge	.+82     	; 0x22a2 <MOTOR_voidClockwiseRotation+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2250:	6f a1       	ldd	r22, Y+39	; 0x27
    2252:	78 a5       	ldd	r23, Y+40	; 0x28
    2254:	89 a5       	ldd	r24, Y+41	; 0x29
    2256:	9a a5       	ldd	r25, Y+42	; 0x2a
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e2       	ldi	r20, 0x20	; 32
    225e:	51 e4       	ldi	r21, 0x41	; 65
    2260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	bc 01       	movw	r22, r24
    226a:	cd 01       	movw	r24, r26
    226c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	9a a3       	std	Y+34, r25	; 0x22
    2276:	89 a3       	std	Y+33, r24	; 0x21
    2278:	0f c0       	rjmp	.+30     	; 0x2298 <MOTOR_voidClockwiseRotation+0x200>
    227a:	88 ec       	ldi	r24, 0xC8	; 200
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	98 a3       	std	Y+32, r25	; 0x20
    2280:	8f 8f       	std	Y+31, r24	; 0x1f
    2282:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2284:	98 a1       	ldd	r25, Y+32	; 0x20
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <MOTOR_voidClockwiseRotation+0x1ee>
    228a:	98 a3       	std	Y+32, r25	; 0x20
    228c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228e:	89 a1       	ldd	r24, Y+33	; 0x21
    2290:	9a a1       	ldd	r25, Y+34	; 0x22
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	9a a3       	std	Y+34, r25	; 0x22
    2296:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2298:	89 a1       	ldd	r24, Y+33	; 0x21
    229a:	9a a1       	ldd	r25, Y+34	; 0x22
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	69 f7       	brne	.-38     	; 0x227a <MOTOR_voidClockwiseRotation+0x1e2>
    22a0:	14 c0       	rjmp	.+40     	; 0x22ca <MOTOR_voidClockwiseRotation+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a2:	6b a1       	ldd	r22, Y+35	; 0x23
    22a4:	7c a1       	ldd	r23, Y+36	; 0x24
    22a6:	8d a1       	ldd	r24, Y+37	; 0x25
    22a8:	9e a1       	ldd	r25, Y+38	; 0x26
    22aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	9a a3       	std	Y+34, r25	; 0x22
    22b4:	89 a3       	std	Y+33, r24	; 0x21
    22b6:	89 a1       	ldd	r24, Y+33	; 0x21
    22b8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ba:	9e 8f       	std	Y+30, r25	; 0x1e
    22bc:	8d 8f       	std	Y+29, r24	; 0x1d
    22be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <MOTOR_voidClockwiseRotation+0x22a>
    22c6:	9e 8f       	std	Y+30, r25	; 0x1e
    22c8:	8d 8f       	std	Y+29, r24	; 0x1d
		// because proteus work on 200 ms
		_delay_ms(200);

		// yellow
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN0, DIO_LOW);
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN1, DIO_LOW);
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	61 e0       	ldi	r22, 0x01	; 1
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN2, DIO_HIGH);
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	62 e0       	ldi	r22, 0x02	; 2
    22e2:	41 e0       	ldi	r20, 0x01	; 1
    22e4:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN3, DIO_LOW);
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	63 e0       	ldi	r22, 0x03	; 3
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	a8 e4       	ldi	r26, 0x48	; 72
    22f8:	b3 e4       	ldi	r27, 0x43	; 67
    22fa:	89 8f       	std	Y+25, r24	; 0x19
    22fc:	9a 8f       	std	Y+26, r25	; 0x1a
    22fe:	ab 8f       	std	Y+27, r26	; 0x1b
    2300:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2302:	69 8d       	ldd	r22, Y+25	; 0x19
    2304:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2306:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2308:	9c 8d       	ldd	r25, Y+28	; 0x1c
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	4a ef       	ldi	r20, 0xFA	; 250
    2310:	54 e4       	ldi	r21, 0x44	; 68
    2312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	8d 8b       	std	Y+21, r24	; 0x15
    231c:	9e 8b       	std	Y+22, r25	; 0x16
    231e:	af 8b       	std	Y+23, r26	; 0x17
    2320:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2322:	6d 89       	ldd	r22, Y+21	; 0x15
    2324:	7e 89       	ldd	r23, Y+22	; 0x16
    2326:	8f 89       	ldd	r24, Y+23	; 0x17
    2328:	98 8d       	ldd	r25, Y+24	; 0x18
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e8       	ldi	r20, 0x80	; 128
    2330:	5f e3       	ldi	r21, 0x3F	; 63
    2332:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2336:	88 23       	and	r24, r24
    2338:	2c f4       	brge	.+10     	; 0x2344 <MOTOR_voidClockwiseRotation+0x2ac>
		__ticks = 1;
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9c 8b       	std	Y+20, r25	; 0x14
    2340:	8b 8b       	std	Y+19, r24	; 0x13
    2342:	3f c0       	rjmp	.+126    	; 0x23c2 <MOTOR_voidClockwiseRotation+0x32a>
	else if (__tmp > 65535)
    2344:	6d 89       	ldd	r22, Y+21	; 0x15
    2346:	7e 89       	ldd	r23, Y+22	; 0x16
    2348:	8f 89       	ldd	r24, Y+23	; 0x17
    234a:	98 8d       	ldd	r25, Y+24	; 0x18
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	3f ef       	ldi	r19, 0xFF	; 255
    2350:	4f e7       	ldi	r20, 0x7F	; 127
    2352:	57 e4       	ldi	r21, 0x47	; 71
    2354:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2358:	18 16       	cp	r1, r24
    235a:	4c f5       	brge	.+82     	; 0x23ae <MOTOR_voidClockwiseRotation+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235c:	69 8d       	ldd	r22, Y+25	; 0x19
    235e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2360:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2362:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e2       	ldi	r20, 0x20	; 32
    236a:	51 e4       	ldi	r21, 0x41	; 65
    236c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	bc 01       	movw	r22, r24
    2376:	cd 01       	movw	r24, r26
    2378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	9c 8b       	std	Y+20, r25	; 0x14
    2382:	8b 8b       	std	Y+19, r24	; 0x13
    2384:	0f c0       	rjmp	.+30     	; 0x23a4 <MOTOR_voidClockwiseRotation+0x30c>
    2386:	88 ec       	ldi	r24, 0xC8	; 200
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	9a 8b       	std	Y+18, r25	; 0x12
    238c:	89 8b       	std	Y+17, r24	; 0x11
    238e:	89 89       	ldd	r24, Y+17	; 0x11
    2390:	9a 89       	ldd	r25, Y+18	; 0x12
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <MOTOR_voidClockwiseRotation+0x2fa>
    2396:	9a 8b       	std	Y+18, r25	; 0x12
    2398:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239a:	8b 89       	ldd	r24, Y+19	; 0x13
    239c:	9c 89       	ldd	r25, Y+20	; 0x14
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	9c 8b       	std	Y+20, r25	; 0x14
    23a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a4:	8b 89       	ldd	r24, Y+19	; 0x13
    23a6:	9c 89       	ldd	r25, Y+20	; 0x14
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	69 f7       	brne	.-38     	; 0x2386 <MOTOR_voidClockwiseRotation+0x2ee>
    23ac:	14 c0       	rjmp	.+40     	; 0x23d6 <MOTOR_voidClockwiseRotation+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ae:	6d 89       	ldd	r22, Y+21	; 0x15
    23b0:	7e 89       	ldd	r23, Y+22	; 0x16
    23b2:	8f 89       	ldd	r24, Y+23	; 0x17
    23b4:	98 8d       	ldd	r25, Y+24	; 0x18
    23b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	9c 8b       	std	Y+20, r25	; 0x14
    23c0:	8b 8b       	std	Y+19, r24	; 0x13
    23c2:	8b 89       	ldd	r24, Y+19	; 0x13
    23c4:	9c 89       	ldd	r25, Y+20	; 0x14
    23c6:	98 8b       	std	Y+16, r25	; 0x10
    23c8:	8f 87       	std	Y+15, r24	; 0x0f
    23ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    23cc:	98 89       	ldd	r25, Y+16	; 0x10
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <MOTOR_voidClockwiseRotation+0x336>
    23d2:	98 8b       	std	Y+16, r25	; 0x10
    23d4:	8f 87       	std	Y+15, r24	; 0x0f
		// because proteus work on 200 ms
		_delay_ms(200);

		// orange
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN0, DIO_LOW);
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	40 e0       	ldi	r20, 0x00	; 0
    23dc:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN1, DIO_LOW);
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	61 e0       	ldi	r22, 0x01	; 1
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN2, DIO_LOW);
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	62 e0       	ldi	r22, 0x02	; 2
    23ee:	40 e0       	ldi	r20, 0x00	; 0
    23f0:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN3, DIO_HIGH);
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	63 e0       	ldi	r22, 0x03	; 3
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	a8 e4       	ldi	r26, 0x48	; 72
    2404:	b3 e4       	ldi	r27, 0x43	; 67
    2406:	8b 87       	std	Y+11, r24	; 0x0b
    2408:	9c 87       	std	Y+12, r25	; 0x0c
    240a:	ad 87       	std	Y+13, r26	; 0x0d
    240c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2410:	7c 85       	ldd	r23, Y+12	; 0x0c
    2412:	8d 85       	ldd	r24, Y+13	; 0x0d
    2414:	9e 85       	ldd	r25, Y+14	; 0x0e
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	4a ef       	ldi	r20, 0xFA	; 250
    241c:	54 e4       	ldi	r21, 0x44	; 68
    241e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	8f 83       	std	Y+7, r24	; 0x07
    2428:	98 87       	std	Y+8, r25	; 0x08
    242a:	a9 87       	std	Y+9, r26	; 0x09
    242c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    242e:	6f 81       	ldd	r22, Y+7	; 0x07
    2430:	78 85       	ldd	r23, Y+8	; 0x08
    2432:	89 85       	ldd	r24, Y+9	; 0x09
    2434:	9a 85       	ldd	r25, Y+10	; 0x0a
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e8       	ldi	r20, 0x80	; 128
    243c:	5f e3       	ldi	r21, 0x3F	; 63
    243e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2442:	88 23       	and	r24, r24
    2444:	2c f4       	brge	.+10     	; 0x2450 <MOTOR_voidClockwiseRotation+0x3b8>
		__ticks = 1;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	9e 83       	std	Y+6, r25	; 0x06
    244c:	8d 83       	std	Y+5, r24	; 0x05
    244e:	3f c0       	rjmp	.+126    	; 0x24ce <MOTOR_voidClockwiseRotation+0x436>
	else if (__tmp > 65535)
    2450:	6f 81       	ldd	r22, Y+7	; 0x07
    2452:	78 85       	ldd	r23, Y+8	; 0x08
    2454:	89 85       	ldd	r24, Y+9	; 0x09
    2456:	9a 85       	ldd	r25, Y+10	; 0x0a
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	3f ef       	ldi	r19, 0xFF	; 255
    245c:	4f e7       	ldi	r20, 0x7F	; 127
    245e:	57 e4       	ldi	r21, 0x47	; 71
    2460:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2464:	18 16       	cp	r1, r24
    2466:	4c f5       	brge	.+82     	; 0x24ba <MOTOR_voidClockwiseRotation+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2468:	6b 85       	ldd	r22, Y+11	; 0x0b
    246a:	7c 85       	ldd	r23, Y+12	; 0x0c
    246c:	8d 85       	ldd	r24, Y+13	; 0x0d
    246e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e2       	ldi	r20, 0x20	; 32
    2476:	51 e4       	ldi	r21, 0x41	; 65
    2478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	bc 01       	movw	r22, r24
    2482:	cd 01       	movw	r24, r26
    2484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	9e 83       	std	Y+6, r25	; 0x06
    248e:	8d 83       	std	Y+5, r24	; 0x05
    2490:	0f c0       	rjmp	.+30     	; 0x24b0 <MOTOR_voidClockwiseRotation+0x418>
    2492:	88 ec       	ldi	r24, 0xC8	; 200
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	9c 83       	std	Y+4, r25	; 0x04
    2498:	8b 83       	std	Y+3, r24	; 0x03
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	9c 81       	ldd	r25, Y+4	; 0x04
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	f1 f7       	brne	.-4      	; 0x249e <MOTOR_voidClockwiseRotation+0x406>
    24a2:	9c 83       	std	Y+4, r25	; 0x04
    24a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	9e 81       	ldd	r25, Y+6	; 0x06
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	9e 83       	std	Y+6, r25	; 0x06
    24ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	9e 81       	ldd	r25, Y+6	; 0x06
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	69 f7       	brne	.-38     	; 0x2492 <MOTOR_voidClockwiseRotation+0x3fa>
    24b8:	14 c0       	rjmp	.+40     	; 0x24e2 <MOTOR_voidClockwiseRotation+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ba:	6f 81       	ldd	r22, Y+7	; 0x07
    24bc:	78 85       	ldd	r23, Y+8	; 0x08
    24be:	89 85       	ldd	r24, Y+9	; 0x09
    24c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	9e 83       	std	Y+6, r25	; 0x06
    24cc:	8d 83       	std	Y+5, r24	; 0x05
    24ce:	8d 81       	ldd	r24, Y+5	; 0x05
    24d0:	9e 81       	ldd	r25, Y+6	; 0x06
    24d2:	9a 83       	std	Y+2, r25	; 0x02
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	9a 81       	ldd	r25, Y+2	; 0x02
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <MOTOR_voidClockwiseRotation+0x442>
    24de:	9a 83       	std	Y+2, r25	; 0x02
    24e0:	89 83       	std	Y+1, r24	; 0x01
}

void MOTOR_voidClockwiseRotation(u8 Copy_u8Step)
{

	for(u8 Localu8Count = 0; Localu8Count < Copy_u8Step/4; Localu8Count++)
    24e2:	89 ad       	ldd	r24, Y+57	; 0x39
    24e4:	8f 5f       	subi	r24, 0xFF	; 255
    24e6:	89 af       	std	Y+57, r24	; 0x39
    24e8:	8a ad       	ldd	r24, Y+58	; 0x3a
    24ea:	98 2f       	mov	r25, r24
    24ec:	96 95       	lsr	r25
    24ee:	96 95       	lsr	r25
    24f0:	89 ad       	ldd	r24, Y+57	; 0x39
    24f2:	89 17       	cp	r24, r25
    24f4:	08 f4       	brcc	.+2      	; 0x24f8 <MOTOR_voidClockwiseRotation+0x460>
    24f6:	dd cd       	rjmp	.-1094   	; 0x20b2 <MOTOR_voidClockwiseRotation+0x1a>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN2, DIO_LOW);
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN3, DIO_HIGH);
		// because proteus work on 200 ms
		_delay_ms(200);
	}
}
    24f8:	ea 96       	adiw	r28, 0x3a	; 58
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	f8 94       	cli
    24fe:	de bf       	out	0x3e, r29	; 62
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	cd bf       	out	0x3d, r28	; 61
    2504:	cf 91       	pop	r28
    2506:	df 91       	pop	r29
    2508:	08 95       	ret

0000250a <MOTOR_voidCounterClockwiseRotation>:

void MOTOR_voidCounterClockwiseRotation(u8 Copy_u8Step)
{
    250a:	df 93       	push	r29
    250c:	cf 93       	push	r28
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	ea 97       	sbiw	r28, 0x3a	; 58
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	de bf       	out	0x3e, r29	; 62
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	cd bf       	out	0x3d, r28	; 61
    251e:	8a af       	std	Y+58, r24	; 0x3a

	for(u8 Localu8Count = 0; Localu8Count < Copy_u8Step/4; Localu8Count++)
    2520:	19 ae       	std	Y+57, r1	; 0x39
    2522:	1b c2       	rjmp	.+1078   	; 0x295a <MOTOR_voidCounterClockwiseRotation+0x450>
	{
		// blue
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN0, DIO_LOW);
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	60 e0       	ldi	r22, 0x00	; 0
    2528:	40 e0       	ldi	r20, 0x00	; 0
    252a:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN1, DIO_LOW);
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	61 e0       	ldi	r22, 0x01	; 1
    2532:	40 e0       	ldi	r20, 0x00	; 0
    2534:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN2, DIO_LOW);
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	62 e0       	ldi	r22, 0x02	; 2
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN3, DIO_HIGH);
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	63 e0       	ldi	r22, 0x03	; 3
    2546:	41 e0       	ldi	r20, 0x01	; 1
    2548:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	a8 e4       	ldi	r26, 0x48	; 72
    2552:	b3 e4       	ldi	r27, 0x43	; 67
    2554:	8d ab       	std	Y+53, r24	; 0x35
    2556:	9e ab       	std	Y+54, r25	; 0x36
    2558:	af ab       	std	Y+55, r26	; 0x37
    255a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255c:	6d a9       	ldd	r22, Y+53	; 0x35
    255e:	7e a9       	ldd	r23, Y+54	; 0x36
    2560:	8f a9       	ldd	r24, Y+55	; 0x37
    2562:	98 ad       	ldd	r25, Y+56	; 0x38
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	4a ef       	ldi	r20, 0xFA	; 250
    256a:	54 e4       	ldi	r21, 0x44	; 68
    256c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	89 ab       	std	Y+49, r24	; 0x31
    2576:	9a ab       	std	Y+50, r25	; 0x32
    2578:	ab ab       	std	Y+51, r26	; 0x33
    257a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    257c:	69 a9       	ldd	r22, Y+49	; 0x31
    257e:	7a a9       	ldd	r23, Y+50	; 0x32
    2580:	8b a9       	ldd	r24, Y+51	; 0x33
    2582:	9c a9       	ldd	r25, Y+52	; 0x34
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e8       	ldi	r20, 0x80	; 128
    258a:	5f e3       	ldi	r21, 0x3F	; 63
    258c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2590:	88 23       	and	r24, r24
    2592:	2c f4       	brge	.+10     	; 0x259e <MOTOR_voidCounterClockwiseRotation+0x94>
		__ticks = 1;
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	98 ab       	std	Y+48, r25	; 0x30
    259a:	8f a7       	std	Y+47, r24	; 0x2f
    259c:	3f c0       	rjmp	.+126    	; 0x261c <MOTOR_voidCounterClockwiseRotation+0x112>
	else if (__tmp > 65535)
    259e:	69 a9       	ldd	r22, Y+49	; 0x31
    25a0:	7a a9       	ldd	r23, Y+50	; 0x32
    25a2:	8b a9       	ldd	r24, Y+51	; 0x33
    25a4:	9c a9       	ldd	r25, Y+52	; 0x34
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	3f ef       	ldi	r19, 0xFF	; 255
    25aa:	4f e7       	ldi	r20, 0x7F	; 127
    25ac:	57 e4       	ldi	r21, 0x47	; 71
    25ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b2:	18 16       	cp	r1, r24
    25b4:	4c f5       	brge	.+82     	; 0x2608 <MOTOR_voidCounterClockwiseRotation+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b6:	6d a9       	ldd	r22, Y+53	; 0x35
    25b8:	7e a9       	ldd	r23, Y+54	; 0x36
    25ba:	8f a9       	ldd	r24, Y+55	; 0x37
    25bc:	98 ad       	ldd	r25, Y+56	; 0x38
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e2       	ldi	r20, 0x20	; 32
    25c4:	51 e4       	ldi	r21, 0x41	; 65
    25c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	bc 01       	movw	r22, r24
    25d0:	cd 01       	movw	r24, r26
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	98 ab       	std	Y+48, r25	; 0x30
    25dc:	8f a7       	std	Y+47, r24	; 0x2f
    25de:	0f c0       	rjmp	.+30     	; 0x25fe <MOTOR_voidCounterClockwiseRotation+0xf4>
    25e0:	88 ec       	ldi	r24, 0xC8	; 200
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	9e a7       	std	Y+46, r25	; 0x2e
    25e6:	8d a7       	std	Y+45, r24	; 0x2d
    25e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    25ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <MOTOR_voidCounterClockwiseRotation+0xe2>
    25f0:	9e a7       	std	Y+46, r25	; 0x2e
    25f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    25f6:	98 a9       	ldd	r25, Y+48	; 0x30
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	98 ab       	std	Y+48, r25	; 0x30
    25fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2600:	98 a9       	ldd	r25, Y+48	; 0x30
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	69 f7       	brne	.-38     	; 0x25e0 <MOTOR_voidCounterClockwiseRotation+0xd6>
    2606:	14 c0       	rjmp	.+40     	; 0x2630 <MOTOR_voidCounterClockwiseRotation+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2608:	69 a9       	ldd	r22, Y+49	; 0x31
    260a:	7a a9       	ldd	r23, Y+50	; 0x32
    260c:	8b a9       	ldd	r24, Y+51	; 0x33
    260e:	9c a9       	ldd	r25, Y+52	; 0x34
    2610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	98 ab       	std	Y+48, r25	; 0x30
    261a:	8f a7       	std	Y+47, r24	; 0x2f
    261c:	8f a5       	ldd	r24, Y+47	; 0x2f
    261e:	98 a9       	ldd	r25, Y+48	; 0x30
    2620:	9c a7       	std	Y+44, r25	; 0x2c
    2622:	8b a7       	std	Y+43, r24	; 0x2b
    2624:	8b a5       	ldd	r24, Y+43	; 0x2b
    2626:	9c a5       	ldd	r25, Y+44	; 0x2c
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <MOTOR_voidCounterClockwiseRotation+0x11e>
    262c:	9c a7       	std	Y+44, r25	; 0x2c
    262e:	8b a7       	std	Y+43, r24	; 0x2b
		// because proteus work on 200 ms
		_delay_ms(200);

		// pink
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN0, DIO_LOW);
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN1, DIO_LOW);
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	61 e0       	ldi	r22, 0x01	; 1
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN2, DIO_HIGH);
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	62 e0       	ldi	r22, 0x02	; 2
    2648:	41 e0       	ldi	r20, 0x01	; 1
    264a:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN3, DIO_LOW);
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	63 e0       	ldi	r22, 0x03	; 3
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	a8 e4       	ldi	r26, 0x48	; 72
    265e:	b3 e4       	ldi	r27, 0x43	; 67
    2660:	8f a3       	std	Y+39, r24	; 0x27
    2662:	98 a7       	std	Y+40, r25	; 0x28
    2664:	a9 a7       	std	Y+41, r26	; 0x29
    2666:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2668:	6f a1       	ldd	r22, Y+39	; 0x27
    266a:	78 a5       	ldd	r23, Y+40	; 0x28
    266c:	89 a5       	ldd	r24, Y+41	; 0x29
    266e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	4a ef       	ldi	r20, 0xFA	; 250
    2676:	54 e4       	ldi	r21, 0x44	; 68
    2678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	8b a3       	std	Y+35, r24	; 0x23
    2682:	9c a3       	std	Y+36, r25	; 0x24
    2684:	ad a3       	std	Y+37, r26	; 0x25
    2686:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2688:	6b a1       	ldd	r22, Y+35	; 0x23
    268a:	7c a1       	ldd	r23, Y+36	; 0x24
    268c:	8d a1       	ldd	r24, Y+37	; 0x25
    268e:	9e a1       	ldd	r25, Y+38	; 0x26
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e8       	ldi	r20, 0x80	; 128
    2696:	5f e3       	ldi	r21, 0x3F	; 63
    2698:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    269c:	88 23       	and	r24, r24
    269e:	2c f4       	brge	.+10     	; 0x26aa <MOTOR_voidCounterClockwiseRotation+0x1a0>
		__ticks = 1;
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	9a a3       	std	Y+34, r25	; 0x22
    26a6:	89 a3       	std	Y+33, r24	; 0x21
    26a8:	3f c0       	rjmp	.+126    	; 0x2728 <MOTOR_voidCounterClockwiseRotation+0x21e>
	else if (__tmp > 65535)
    26aa:	6b a1       	ldd	r22, Y+35	; 0x23
    26ac:	7c a1       	ldd	r23, Y+36	; 0x24
    26ae:	8d a1       	ldd	r24, Y+37	; 0x25
    26b0:	9e a1       	ldd	r25, Y+38	; 0x26
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	3f ef       	ldi	r19, 0xFF	; 255
    26b6:	4f e7       	ldi	r20, 0x7F	; 127
    26b8:	57 e4       	ldi	r21, 0x47	; 71
    26ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26be:	18 16       	cp	r1, r24
    26c0:	4c f5       	brge	.+82     	; 0x2714 <MOTOR_voidCounterClockwiseRotation+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c2:	6f a1       	ldd	r22, Y+39	; 0x27
    26c4:	78 a5       	ldd	r23, Y+40	; 0x28
    26c6:	89 a5       	ldd	r24, Y+41	; 0x29
    26c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	40 e2       	ldi	r20, 0x20	; 32
    26d0:	51 e4       	ldi	r21, 0x41	; 65
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	bc 01       	movw	r22, r24
    26dc:	cd 01       	movw	r24, r26
    26de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	9a a3       	std	Y+34, r25	; 0x22
    26e8:	89 a3       	std	Y+33, r24	; 0x21
    26ea:	0f c0       	rjmp	.+30     	; 0x270a <MOTOR_voidCounterClockwiseRotation+0x200>
    26ec:	88 ec       	ldi	r24, 0xC8	; 200
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	98 a3       	std	Y+32, r25	; 0x20
    26f2:	8f 8f       	std	Y+31, r24	; 0x1f
    26f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26f6:	98 a1       	ldd	r25, Y+32	; 0x20
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	f1 f7       	brne	.-4      	; 0x26f8 <MOTOR_voidCounterClockwiseRotation+0x1ee>
    26fc:	98 a3       	std	Y+32, r25	; 0x20
    26fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2700:	89 a1       	ldd	r24, Y+33	; 0x21
    2702:	9a a1       	ldd	r25, Y+34	; 0x22
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	9a a3       	std	Y+34, r25	; 0x22
    2708:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270a:	89 a1       	ldd	r24, Y+33	; 0x21
    270c:	9a a1       	ldd	r25, Y+34	; 0x22
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	69 f7       	brne	.-38     	; 0x26ec <MOTOR_voidCounterClockwiseRotation+0x1e2>
    2712:	14 c0       	rjmp	.+40     	; 0x273c <MOTOR_voidCounterClockwiseRotation+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2714:	6b a1       	ldd	r22, Y+35	; 0x23
    2716:	7c a1       	ldd	r23, Y+36	; 0x24
    2718:	8d a1       	ldd	r24, Y+37	; 0x25
    271a:	9e a1       	ldd	r25, Y+38	; 0x26
    271c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	9a a3       	std	Y+34, r25	; 0x22
    2726:	89 a3       	std	Y+33, r24	; 0x21
    2728:	89 a1       	ldd	r24, Y+33	; 0x21
    272a:	9a a1       	ldd	r25, Y+34	; 0x22
    272c:	9e 8f       	std	Y+30, r25	; 0x1e
    272e:	8d 8f       	std	Y+29, r24	; 0x1d
    2730:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2732:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <MOTOR_voidCounterClockwiseRotation+0x22a>
    2738:	9e 8f       	std	Y+30, r25	; 0x1e
    273a:	8d 8f       	std	Y+29, r24	; 0x1d
		// because proteus work on 200 ms
		_delay_ms(200);

		// yellow
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN0, DIO_LOW);
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	60 e0       	ldi	r22, 0x00	; 0
    2740:	40 e0       	ldi	r20, 0x00	; 0
    2742:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN1, DIO_HIGH);
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	61 e0       	ldi	r22, 0x01	; 1
    274a:	41 e0       	ldi	r20, 0x01	; 1
    274c:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN2, DIO_LOW);
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	62 e0       	ldi	r22, 0x02	; 2
    2754:	40 e0       	ldi	r20, 0x00	; 0
    2756:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN3, DIO_LOW);
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	63 e0       	ldi	r22, 0x03	; 3
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	a8 e4       	ldi	r26, 0x48	; 72
    276a:	b3 e4       	ldi	r27, 0x43	; 67
    276c:	89 8f       	std	Y+25, r24	; 0x19
    276e:	9a 8f       	std	Y+26, r25	; 0x1a
    2770:	ab 8f       	std	Y+27, r26	; 0x1b
    2772:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2774:	69 8d       	ldd	r22, Y+25	; 0x19
    2776:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2778:	8b 8d       	ldd	r24, Y+27	; 0x1b
    277a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	4a ef       	ldi	r20, 0xFA	; 250
    2782:	54 e4       	ldi	r21, 0x44	; 68
    2784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	8d 8b       	std	Y+21, r24	; 0x15
    278e:	9e 8b       	std	Y+22, r25	; 0x16
    2790:	af 8b       	std	Y+23, r26	; 0x17
    2792:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2794:	6d 89       	ldd	r22, Y+21	; 0x15
    2796:	7e 89       	ldd	r23, Y+22	; 0x16
    2798:	8f 89       	ldd	r24, Y+23	; 0x17
    279a:	98 8d       	ldd	r25, Y+24	; 0x18
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e8       	ldi	r20, 0x80	; 128
    27a2:	5f e3       	ldi	r21, 0x3F	; 63
    27a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27a8:	88 23       	and	r24, r24
    27aa:	2c f4       	brge	.+10     	; 0x27b6 <MOTOR_voidCounterClockwiseRotation+0x2ac>
		__ticks = 1;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	9c 8b       	std	Y+20, r25	; 0x14
    27b2:	8b 8b       	std	Y+19, r24	; 0x13
    27b4:	3f c0       	rjmp	.+126    	; 0x2834 <MOTOR_voidCounterClockwiseRotation+0x32a>
	else if (__tmp > 65535)
    27b6:	6d 89       	ldd	r22, Y+21	; 0x15
    27b8:	7e 89       	ldd	r23, Y+22	; 0x16
    27ba:	8f 89       	ldd	r24, Y+23	; 0x17
    27bc:	98 8d       	ldd	r25, Y+24	; 0x18
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	3f ef       	ldi	r19, 0xFF	; 255
    27c2:	4f e7       	ldi	r20, 0x7F	; 127
    27c4:	57 e4       	ldi	r21, 0x47	; 71
    27c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ca:	18 16       	cp	r1, r24
    27cc:	4c f5       	brge	.+82     	; 0x2820 <MOTOR_voidCounterClockwiseRotation+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ce:	69 8d       	ldd	r22, Y+25	; 0x19
    27d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e2       	ldi	r20, 0x20	; 32
    27dc:	51 e4       	ldi	r21, 0x41	; 65
    27de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	bc 01       	movw	r22, r24
    27e8:	cd 01       	movw	r24, r26
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9c 8b       	std	Y+20, r25	; 0x14
    27f4:	8b 8b       	std	Y+19, r24	; 0x13
    27f6:	0f c0       	rjmp	.+30     	; 0x2816 <MOTOR_voidCounterClockwiseRotation+0x30c>
    27f8:	88 ec       	ldi	r24, 0xC8	; 200
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	9a 8b       	std	Y+18, r25	; 0x12
    27fe:	89 8b       	std	Y+17, r24	; 0x11
    2800:	89 89       	ldd	r24, Y+17	; 0x11
    2802:	9a 89       	ldd	r25, Y+18	; 0x12
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	f1 f7       	brne	.-4      	; 0x2804 <MOTOR_voidCounterClockwiseRotation+0x2fa>
    2808:	9a 8b       	std	Y+18, r25	; 0x12
    280a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280c:	8b 89       	ldd	r24, Y+19	; 0x13
    280e:	9c 89       	ldd	r25, Y+20	; 0x14
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	9c 8b       	std	Y+20, r25	; 0x14
    2814:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2816:	8b 89       	ldd	r24, Y+19	; 0x13
    2818:	9c 89       	ldd	r25, Y+20	; 0x14
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	69 f7       	brne	.-38     	; 0x27f8 <MOTOR_voidCounterClockwiseRotation+0x2ee>
    281e:	14 c0       	rjmp	.+40     	; 0x2848 <MOTOR_voidCounterClockwiseRotation+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2820:	6d 89       	ldd	r22, Y+21	; 0x15
    2822:	7e 89       	ldd	r23, Y+22	; 0x16
    2824:	8f 89       	ldd	r24, Y+23	; 0x17
    2826:	98 8d       	ldd	r25, Y+24	; 0x18
    2828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	9c 8b       	std	Y+20, r25	; 0x14
    2832:	8b 8b       	std	Y+19, r24	; 0x13
    2834:	8b 89       	ldd	r24, Y+19	; 0x13
    2836:	9c 89       	ldd	r25, Y+20	; 0x14
    2838:	98 8b       	std	Y+16, r25	; 0x10
    283a:	8f 87       	std	Y+15, r24	; 0x0f
    283c:	8f 85       	ldd	r24, Y+15	; 0x0f
    283e:	98 89       	ldd	r25, Y+16	; 0x10
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	f1 f7       	brne	.-4      	; 0x2840 <MOTOR_voidCounterClockwiseRotation+0x336>
    2844:	98 8b       	std	Y+16, r25	; 0x10
    2846:	8f 87       	std	Y+15, r24	; 0x0f
		// because proteus work on 200 ms
		_delay_ms(200);

		// orange
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN0, DIO_HIGH);
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	60 e0       	ldi	r22, 0x00	; 0
    284c:	41 e0       	ldi	r20, 0x01	; 1
    284e:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN1, DIO_LOW);
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	61 e0       	ldi	r22, 0x01	; 1
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN2, DIO_LOW);
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	62 e0       	ldi	r22, 0x02	; 2
    2860:	40 e0       	ldi	r20, 0x00	; 0
    2862:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN3, DIO_LOW);
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	63 e0       	ldi	r22, 0x03	; 3
    286a:	40 e0       	ldi	r20, 0x00	; 0
    286c:	0e 94 fc 07 	call	0xff8	; 0xff8 <DIO_voidSetPinValue>
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	a8 e4       	ldi	r26, 0x48	; 72
    2876:	b3 e4       	ldi	r27, 0x43	; 67
    2878:	8b 87       	std	Y+11, r24	; 0x0b
    287a:	9c 87       	std	Y+12, r25	; 0x0c
    287c:	ad 87       	std	Y+13, r26	; 0x0d
    287e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2880:	6b 85       	ldd	r22, Y+11	; 0x0b
    2882:	7c 85       	ldd	r23, Y+12	; 0x0c
    2884:	8d 85       	ldd	r24, Y+13	; 0x0d
    2886:	9e 85       	ldd	r25, Y+14	; 0x0e
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	4a ef       	ldi	r20, 0xFA	; 250
    288e:	54 e4       	ldi	r21, 0x44	; 68
    2890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	8f 83       	std	Y+7, r24	; 0x07
    289a:	98 87       	std	Y+8, r25	; 0x08
    289c:	a9 87       	std	Y+9, r26	; 0x09
    289e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28a0:	6f 81       	ldd	r22, Y+7	; 0x07
    28a2:	78 85       	ldd	r23, Y+8	; 0x08
    28a4:	89 85       	ldd	r24, Y+9	; 0x09
    28a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e8       	ldi	r20, 0x80	; 128
    28ae:	5f e3       	ldi	r21, 0x3F	; 63
    28b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b4:	88 23       	and	r24, r24
    28b6:	2c f4       	brge	.+10     	; 0x28c2 <MOTOR_voidCounterClockwiseRotation+0x3b8>
		__ticks = 1;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	9e 83       	std	Y+6, r25	; 0x06
    28be:	8d 83       	std	Y+5, r24	; 0x05
    28c0:	3f c0       	rjmp	.+126    	; 0x2940 <MOTOR_voidCounterClockwiseRotation+0x436>
	else if (__tmp > 65535)
    28c2:	6f 81       	ldd	r22, Y+7	; 0x07
    28c4:	78 85       	ldd	r23, Y+8	; 0x08
    28c6:	89 85       	ldd	r24, Y+9	; 0x09
    28c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	3f ef       	ldi	r19, 0xFF	; 255
    28ce:	4f e7       	ldi	r20, 0x7F	; 127
    28d0:	57 e4       	ldi	r21, 0x47	; 71
    28d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d6:	18 16       	cp	r1, r24
    28d8:	4c f5       	brge	.+82     	; 0x292c <MOTOR_voidCounterClockwiseRotation+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28da:	6b 85       	ldd	r22, Y+11	; 0x0b
    28dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28de:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e2       	ldi	r20, 0x20	; 32
    28e8:	51 e4       	ldi	r21, 0x41	; 65
    28ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	bc 01       	movw	r22, r24
    28f4:	cd 01       	movw	r24, r26
    28f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	9e 83       	std	Y+6, r25	; 0x06
    2900:	8d 83       	std	Y+5, r24	; 0x05
    2902:	0f c0       	rjmp	.+30     	; 0x2922 <MOTOR_voidCounterClockwiseRotation+0x418>
    2904:	88 ec       	ldi	r24, 0xC8	; 200
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	9c 83       	std	Y+4, r25	; 0x04
    290a:	8b 83       	std	Y+3, r24	; 0x03
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <MOTOR_voidCounterClockwiseRotation+0x406>
    2914:	9c 83       	std	Y+4, r25	; 0x04
    2916:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2918:	8d 81       	ldd	r24, Y+5	; 0x05
    291a:	9e 81       	ldd	r25, Y+6	; 0x06
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	9e 83       	std	Y+6, r25	; 0x06
    2920:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2922:	8d 81       	ldd	r24, Y+5	; 0x05
    2924:	9e 81       	ldd	r25, Y+6	; 0x06
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	69 f7       	brne	.-38     	; 0x2904 <MOTOR_voidCounterClockwiseRotation+0x3fa>
    292a:	14 c0       	rjmp	.+40     	; 0x2954 <MOTOR_voidCounterClockwiseRotation+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292c:	6f 81       	ldd	r22, Y+7	; 0x07
    292e:	78 85       	ldd	r23, Y+8	; 0x08
    2930:	89 85       	ldd	r24, Y+9	; 0x09
    2932:	9a 85       	ldd	r25, Y+10	; 0x0a
    2934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	9e 83       	std	Y+6, r25	; 0x06
    293e:	8d 83       	std	Y+5, r24	; 0x05
    2940:	8d 81       	ldd	r24, Y+5	; 0x05
    2942:	9e 81       	ldd	r25, Y+6	; 0x06
    2944:	9a 83       	std	Y+2, r25	; 0x02
    2946:	89 83       	std	Y+1, r24	; 0x01
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	9a 81       	ldd	r25, Y+2	; 0x02
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	f1 f7       	brne	.-4      	; 0x294c <MOTOR_voidCounterClockwiseRotation+0x442>
    2950:	9a 83       	std	Y+2, r25	; 0x02
    2952:	89 83       	std	Y+1, r24	; 0x01
}

void MOTOR_voidCounterClockwiseRotation(u8 Copy_u8Step)
{

	for(u8 Localu8Count = 0; Localu8Count < Copy_u8Step/4; Localu8Count++)
    2954:	89 ad       	ldd	r24, Y+57	; 0x39
    2956:	8f 5f       	subi	r24, 0xFF	; 255
    2958:	89 af       	std	Y+57, r24	; 0x39
    295a:	8a ad       	ldd	r24, Y+58	; 0x3a
    295c:	98 2f       	mov	r25, r24
    295e:	96 95       	lsr	r25
    2960:	96 95       	lsr	r25
    2962:	89 ad       	ldd	r24, Y+57	; 0x39
    2964:	89 17       	cp	r24, r25
    2966:	08 f4       	brcc	.+2      	; 0x296a <MOTOR_voidCounterClockwiseRotation+0x460>
    2968:	dd cd       	rjmp	.-1094   	; 0x2524 <MOTOR_voidCounterClockwiseRotation+0x1a>
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN2, DIO_LOW);
		DIO_voidSetPinValue(MOTOR_PORT, DIO_PIN3, DIO_LOW);
		// because proteus work on 200 ms
		_delay_ms(200);
	}
}
    296a:	ea 96       	adiw	r28, 0x3a	; 58
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	f8 94       	cli
    2970:	de bf       	out	0x3e, r29	; 62
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	cd bf       	out	0x3d, r28	; 61
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	08 95       	ret

0000297c <MOTOR_u8NumOfIterations>:

u8 MOTOR_u8NumOfIterations(u8 Copy_u8CustomAngle){
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	00 d0       	rcall	.+0      	; 0x2982 <MOTOR_u8NumOfIterations+0x6>
    2982:	0f 92       	push	r0
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8StepAngle = Copy_u8CustomAngle/(0.1);
    298a:	8b 81       	ldd	r24, Y+3	; 0x03
    298c:	88 2f       	mov	r24, r24
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	aa 27       	eor	r26, r26
    2992:	97 fd       	sbrc	r25, 7
    2994:	a0 95       	com	r26
    2996:	ba 2f       	mov	r27, r26
    2998:	bc 01       	movw	r22, r24
    299a:	cd 01       	movw	r24, r26
    299c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	bc 01       	movw	r22, r24
    29a6:	cd 01       	movw	r24, r26
    29a8:	2d ec       	ldi	r18, 0xCD	; 205
    29aa:	3c ec       	ldi	r19, 0xCC	; 204
    29ac:	4c ec       	ldi	r20, 0xCC	; 204
    29ae:	5d e3       	ldi	r21, 0x3D	; 61
    29b0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	bc 01       	movw	r22, r24
    29ba:	cd 01       	movw	r24, r26
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8NumOfLoops = (Copy_u8CustomAngle / Local_u8StepAngle) / 4;
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ca:	69 2f       	mov	r22, r25
    29cc:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <__udivmodqi4>
    29d0:	86 95       	lsr	r24
    29d2:	86 95       	lsr	r24
    29d4:	89 83       	std	Y+1, r24	; 0x01
    return Local_u8NumOfLoops;
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	cf 91       	pop	r28
    29e0:	df 91       	pop	r29
    29e2:	08 95       	ret

000029e4 <main>:
#include "LCD.h"
#include "MOTOR.h"


int main()
{
    29e4:	df 93       	push	r29
    29e6:	cf 93       	push	r28
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
	//DIO_voidSetPinDirection(DIO_PORTD, DIO_PIN0, DIO_INPUT);
	//DIO_voidSetPinValue(DIO_PORTD, DIO_PIN0, DIO_HIGH);
	//DIO_voidSetPinValue(DIO_PORTD, DIO_PIN0, DIO_LOW);

	MOTOR_voidInit();
    29ec:	0e 94 31 10 	call	0x2062	; 0x2062 <MOTOR_voidInit>
	MOTOR_voidClockwiseRotation(100);
    29f0:	84 e6       	ldi	r24, 0x64	; 100
    29f2:	0e 94 4c 10 	call	0x2098	; 0x2098 <MOTOR_voidClockwiseRotation>
	LCD_voidDisplayDirection(0); // 0 ==> CLOCKWISE, 1 ==> COUNTER CLOCKWISE
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	0e 94 11 10 	call	0x2022	; 0x2022 <LCD_voidDisplayDirection>
    29fc:	ff cf       	rjmp	.-2      	; 0x29fc <main+0x18>

000029fe <__mulsi3>:
    29fe:	62 9f       	mul	r22, r18
    2a00:	d0 01       	movw	r26, r0
    2a02:	73 9f       	mul	r23, r19
    2a04:	f0 01       	movw	r30, r0
    2a06:	82 9f       	mul	r24, r18
    2a08:	e0 0d       	add	r30, r0
    2a0a:	f1 1d       	adc	r31, r1
    2a0c:	64 9f       	mul	r22, r20
    2a0e:	e0 0d       	add	r30, r0
    2a10:	f1 1d       	adc	r31, r1
    2a12:	92 9f       	mul	r25, r18
    2a14:	f0 0d       	add	r31, r0
    2a16:	83 9f       	mul	r24, r19
    2a18:	f0 0d       	add	r31, r0
    2a1a:	74 9f       	mul	r23, r20
    2a1c:	f0 0d       	add	r31, r0
    2a1e:	65 9f       	mul	r22, r21
    2a20:	f0 0d       	add	r31, r0
    2a22:	99 27       	eor	r25, r25
    2a24:	72 9f       	mul	r23, r18
    2a26:	b0 0d       	add	r27, r0
    2a28:	e1 1d       	adc	r30, r1
    2a2a:	f9 1f       	adc	r31, r25
    2a2c:	63 9f       	mul	r22, r19
    2a2e:	b0 0d       	add	r27, r0
    2a30:	e1 1d       	adc	r30, r1
    2a32:	f9 1f       	adc	r31, r25
    2a34:	bd 01       	movw	r22, r26
    2a36:	cf 01       	movw	r24, r30
    2a38:	11 24       	eor	r1, r1
    2a3a:	08 95       	ret

00002a3c <__udivmodqi4>:
    2a3c:	99 1b       	sub	r25, r25
    2a3e:	79 e0       	ldi	r23, 0x09	; 9
    2a40:	04 c0       	rjmp	.+8      	; 0x2a4a <__udivmodqi4_ep>

00002a42 <__udivmodqi4_loop>:
    2a42:	99 1f       	adc	r25, r25
    2a44:	96 17       	cp	r25, r22
    2a46:	08 f0       	brcs	.+2      	; 0x2a4a <__udivmodqi4_ep>
    2a48:	96 1b       	sub	r25, r22

00002a4a <__udivmodqi4_ep>:
    2a4a:	88 1f       	adc	r24, r24
    2a4c:	7a 95       	dec	r23
    2a4e:	c9 f7       	brne	.-14     	; 0x2a42 <__udivmodqi4_loop>
    2a50:	80 95       	com	r24
    2a52:	08 95       	ret

00002a54 <__udivmodsi4>:
    2a54:	a1 e2       	ldi	r26, 0x21	; 33
    2a56:	1a 2e       	mov	r1, r26
    2a58:	aa 1b       	sub	r26, r26
    2a5a:	bb 1b       	sub	r27, r27
    2a5c:	fd 01       	movw	r30, r26
    2a5e:	0d c0       	rjmp	.+26     	; 0x2a7a <__udivmodsi4_ep>

00002a60 <__udivmodsi4_loop>:
    2a60:	aa 1f       	adc	r26, r26
    2a62:	bb 1f       	adc	r27, r27
    2a64:	ee 1f       	adc	r30, r30
    2a66:	ff 1f       	adc	r31, r31
    2a68:	a2 17       	cp	r26, r18
    2a6a:	b3 07       	cpc	r27, r19
    2a6c:	e4 07       	cpc	r30, r20
    2a6e:	f5 07       	cpc	r31, r21
    2a70:	20 f0       	brcs	.+8      	; 0x2a7a <__udivmodsi4_ep>
    2a72:	a2 1b       	sub	r26, r18
    2a74:	b3 0b       	sbc	r27, r19
    2a76:	e4 0b       	sbc	r30, r20
    2a78:	f5 0b       	sbc	r31, r21

00002a7a <__udivmodsi4_ep>:
    2a7a:	66 1f       	adc	r22, r22
    2a7c:	77 1f       	adc	r23, r23
    2a7e:	88 1f       	adc	r24, r24
    2a80:	99 1f       	adc	r25, r25
    2a82:	1a 94       	dec	r1
    2a84:	69 f7       	brne	.-38     	; 0x2a60 <__udivmodsi4_loop>
    2a86:	60 95       	com	r22
    2a88:	70 95       	com	r23
    2a8a:	80 95       	com	r24
    2a8c:	90 95       	com	r25
    2a8e:	9b 01       	movw	r18, r22
    2a90:	ac 01       	movw	r20, r24
    2a92:	bd 01       	movw	r22, r26
    2a94:	cf 01       	movw	r24, r30
    2a96:	08 95       	ret

00002a98 <__prologue_saves__>:
    2a98:	2f 92       	push	r2
    2a9a:	3f 92       	push	r3
    2a9c:	4f 92       	push	r4
    2a9e:	5f 92       	push	r5
    2aa0:	6f 92       	push	r6
    2aa2:	7f 92       	push	r7
    2aa4:	8f 92       	push	r8
    2aa6:	9f 92       	push	r9
    2aa8:	af 92       	push	r10
    2aaa:	bf 92       	push	r11
    2aac:	cf 92       	push	r12
    2aae:	df 92       	push	r13
    2ab0:	ef 92       	push	r14
    2ab2:	ff 92       	push	r15
    2ab4:	0f 93       	push	r16
    2ab6:	1f 93       	push	r17
    2ab8:	cf 93       	push	r28
    2aba:	df 93       	push	r29
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	ca 1b       	sub	r28, r26
    2ac2:	db 0b       	sbc	r29, r27
    2ac4:	0f b6       	in	r0, 0x3f	; 63
    2ac6:	f8 94       	cli
    2ac8:	de bf       	out	0x3e, r29	; 62
    2aca:	0f be       	out	0x3f, r0	; 63
    2acc:	cd bf       	out	0x3d, r28	; 61
    2ace:	09 94       	ijmp

00002ad0 <__epilogue_restores__>:
    2ad0:	2a 88       	ldd	r2, Y+18	; 0x12
    2ad2:	39 88       	ldd	r3, Y+17	; 0x11
    2ad4:	48 88       	ldd	r4, Y+16	; 0x10
    2ad6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ad8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ada:	7d 84       	ldd	r7, Y+13	; 0x0d
    2adc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ade:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ae0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ae2:	b9 84       	ldd	r11, Y+9	; 0x09
    2ae4:	c8 84       	ldd	r12, Y+8	; 0x08
    2ae6:	df 80       	ldd	r13, Y+7	; 0x07
    2ae8:	ee 80       	ldd	r14, Y+6	; 0x06
    2aea:	fd 80       	ldd	r15, Y+5	; 0x05
    2aec:	0c 81       	ldd	r16, Y+4	; 0x04
    2aee:	1b 81       	ldd	r17, Y+3	; 0x03
    2af0:	aa 81       	ldd	r26, Y+2	; 0x02
    2af2:	b9 81       	ldd	r27, Y+1	; 0x01
    2af4:	ce 0f       	add	r28, r30
    2af6:	d1 1d       	adc	r29, r1
    2af8:	0f b6       	in	r0, 0x3f	; 63
    2afa:	f8 94       	cli
    2afc:	de bf       	out	0x3e, r29	; 62
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	cd bf       	out	0x3d, r28	; 61
    2b02:	ed 01       	movw	r28, r26
    2b04:	08 95       	ret

00002b06 <_exit>:
    2b06:	f8 94       	cli

00002b08 <__stop_program>:
    2b08:	ff cf       	rjmp	.-2      	; 0x2b08 <__stop_program>
