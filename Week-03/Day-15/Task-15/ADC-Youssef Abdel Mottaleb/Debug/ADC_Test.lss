
ADC_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000021e2  00002276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080006a  0080006a  00002280  2**0
                  ALLOC
  3 .stab         000015f0  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dac  00000000  00000000  00003870  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000461c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000477c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000490b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00006950  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00007a51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000089d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00008b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00008e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000096a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <main>
      8a:	0c 94 ef 10 	jmp	0x21de	; 0x21de <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e6       	ldi	r26, 0x62	; 98
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e6       	ldi	r24, 0x62	; 98
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e6       	ldi	r22, 0x62	; 98
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "DIO.h"
#include "ADC.h"

void ADC_voidInit(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
    // enable adc
    SET_BIT(ADCSRA, ADEN);
     ca6:	a6 e2       	ldi	r26, 0x26	; 38
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e6 e2       	ldi	r30, 0x26	; 38
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 68       	ori	r24, 0x80	; 128
     cb2:	8c 93       	st	X, r24

    // SELECT V ref --> AVCC = 5V
    SET_BIT(ADMUX, REFS0);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, REFS1);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	8c 93       	st	X, r24

    // Right Adjust
    CLR_BIT(ADMUX, ADLAR);
     cd0:	a7 e2       	ldi	r26, 0x27	; 39
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e7 e2       	ldi	r30, 0x27	; 39
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24

    // Disable Auto Trig
    CLR_BIT(ADCSRA, ADATE);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 7d       	andi	r24, 0xDF	; 223
     cea:	8c 93       	st	X, r24

    // SELECT Prescalar
    CLR_BIT(ADCSRA, ADPS0);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8e 7f       	andi	r24, 0xFE	; 254
     cf8:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADPS1);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	82 60       	ori	r24, 0x02	; 2
     d06:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADPS2);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	84 60       	ori	r24, 0x04	; 4
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_u16GetDigitalValue>:

u16 ADC_u16GetDigitalValue(u8 Copy_u8ChannelNum){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <ADC_u16GetDigitalValue+0x6>
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	89 83       	std	Y+1, r24	; 0x01

    // SELECT CHANNEL
    ADMUX &= ADC_CHANNEL_RESET;
     d28:	a7 e2       	ldi	r26, 0x27	; 39
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e7 e2       	ldi	r30, 0x27	; 39
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 7e       	andi	r24, 0xE0	; 224
     d34:	8c 93       	st	X, r24
    ADMUX |= Copy_u8ChannelNum;
     d36:	a7 e2       	ldi	r26, 0x27	; 39
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e7 e2       	ldi	r30, 0x27	; 39
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	90 81       	ld	r25, Z
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	89 2b       	or	r24, r25
     d44:	8c 93       	st	X, r24

    // START CONVERSION
    SET_BIT(ADCSRA, ADSC);
     d46:	a6 e2       	ldi	r26, 0x26	; 38
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e6 e2       	ldi	r30, 0x26	; 38
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 64       	ori	r24, 0x40	; 64
     d52:	8c 93       	st	X, r24

    // WAIT UNTILL THE FLAG EQUAL 1
    while (GET_BIT(ADCSRA, ADIF) == 0);
     d54:	e6 e2       	ldi	r30, 0x26	; 38
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z

    //CLEAR THE FLAG
    SET_BIT(ADCSRA, ADIF);
     d5a:	a6 e2       	ldi	r26, 0x26	; 38
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e6 e2       	ldi	r30, 0x26	; 38
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	80 61       	ori	r24, 0x10	; 16
     d66:	8c 93       	st	X, r24

    // READ THE DIGITAL VALUE
    return ADC_REG;
     d68:	e4 e2       	ldi	r30, 0x24	; 36
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	91 81       	ldd	r25, Z+1	; 0x01
    
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <DIO_voidSetPinDirection>:
#include "BIT_MATH.h"

#include "DIO.h"

void DIO_voidSetPinDirection (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	27 97       	sbiw	r28, 0x07	; 7
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	6a 83       	std	Y+2, r22	; 0x02
     d92:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Direction == DIO_OUTPUT)
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	81 30       	cpi	r24, 0x01	; 1
     d98:	09 f0       	breq	.+2      	; 0xd9c <DIO_voidSetPinDirection+0x22>
     d9a:	6f c0       	rjmp	.+222    	; 0xe7a <DIO_voidSetPinDirection+0x100>
	{
		switch (Copy_u8Port)
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	3f 83       	std	Y+7, r19	; 0x07
     da4:	2e 83       	std	Y+6, r18	; 0x06
     da6:	8e 81       	ldd	r24, Y+6	; 0x06
     da8:	9f 81       	ldd	r25, Y+7	; 0x07
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	91 05       	cpc	r25, r1
     dae:	49 f1       	breq	.+82     	; 0xe02 <DIO_voidSetPinDirection+0x88>
     db0:	2e 81       	ldd	r18, Y+6	; 0x06
     db2:	3f 81       	ldd	r19, Y+7	; 0x07
     db4:	22 30       	cpi	r18, 0x02	; 2
     db6:	31 05       	cpc	r19, r1
     db8:	2c f4       	brge	.+10     	; 0xdc4 <DIO_voidSetPinDirection+0x4a>
     dba:	8e 81       	ldd	r24, Y+6	; 0x06
     dbc:	9f 81       	ldd	r25, Y+7	; 0x07
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	61 f0       	breq	.+24     	; 0xdda <DIO_voidSetPinDirection+0x60>
     dc2:	d2 c0       	rjmp	.+420    	; 0xf68 <DIO_voidSetPinDirection+0x1ee>
     dc4:	2e 81       	ldd	r18, Y+6	; 0x06
     dc6:	3f 81       	ldd	r19, Y+7	; 0x07
     dc8:	22 30       	cpi	r18, 0x02	; 2
     dca:	31 05       	cpc	r19, r1
     dcc:	71 f1       	breq	.+92     	; 0xe2a <DIO_voidSetPinDirection+0xb0>
     dce:	8e 81       	ldd	r24, Y+6	; 0x06
     dd0:	9f 81       	ldd	r25, Y+7	; 0x07
     dd2:	83 30       	cpi	r24, 0x03	; 3
     dd4:	91 05       	cpc	r25, r1
     dd6:	e9 f1       	breq	.+122    	; 0xe52 <DIO_voidSetPinDirection+0xd8>
     dd8:	c7 c0       	rjmp	.+398    	; 0xf68 <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA : SET_BIT(DDRA , Copy_u8Pin); break ;
     dda:	aa e3       	ldi	r26, 0x3A	; 58
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	ea e3       	ldi	r30, 0x3A	; 58
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 2e       	mov	r0, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_voidSetPinDirection+0x7e>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_voidSetPinDirection+0x7a>
     dfc:	84 2b       	or	r24, r20
     dfe:	8c 93       	st	X, r24
     e00:	b3 c0       	rjmp	.+358    	; 0xf68 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTB : SET_BIT(DDRB , Copy_u8Pin); break ;
     e02:	a7 e3       	ldi	r26, 0x37	; 55
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e7 e3       	ldi	r30, 0x37	; 55
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <DIO_voidSetPinDirection+0xa6>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <DIO_voidSetPinDirection+0xa2>
     e24:	84 2b       	or	r24, r20
     e26:	8c 93       	st	X, r24
     e28:	9f c0       	rjmp	.+318    	; 0xf68 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTC : SET_BIT(DDRC , Copy_u8Pin); break ;
     e2a:	a4 e3       	ldi	r26, 0x34	; 52
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e4 e3       	ldi	r30, 0x34	; 52
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <DIO_voidSetPinDirection+0xce>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <DIO_voidSetPinDirection+0xca>
     e4c:	84 2b       	or	r24, r20
     e4e:	8c 93       	st	X, r24
     e50:	8b c0       	rjmp	.+278    	; 0xf68 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTD : SET_BIT(DDRD , Copy_u8Pin); break ;
     e52:	a1 e3       	ldi	r26, 0x31	; 49
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e1 e3       	ldi	r30, 0x31	; 49
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <DIO_voidSetPinDirection+0xf6>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <DIO_voidSetPinDirection+0xf2>
     e74:	84 2b       	or	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	77 c0       	rjmp	.+238    	; 0xf68 <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if (Copy_u8Direction == DIO_INPUT)
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	88 23       	and	r24, r24
     e7e:	09 f0       	breq	.+2      	; 0xe82 <DIO_voidSetPinDirection+0x108>
     e80:	73 c0       	rjmp	.+230    	; 0xf68 <DIO_voidSetPinDirection+0x1ee>
	{
		switch (Copy_u8Port)
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	3d 83       	std	Y+5, r19	; 0x05
     e8a:	2c 83       	std	Y+4, r18	; 0x04
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	9d 81       	ldd	r25, Y+5	; 0x05
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	91 05       	cpc	r25, r1
     e94:	59 f1       	breq	.+86     	; 0xeec <DIO_voidSetPinDirection+0x172>
     e96:	2c 81       	ldd	r18, Y+4	; 0x04
     e98:	3d 81       	ldd	r19, Y+5	; 0x05
     e9a:	22 30       	cpi	r18, 0x02	; 2
     e9c:	31 05       	cpc	r19, r1
     e9e:	2c f4       	brge	.+10     	; 0xeaa <DIO_voidSetPinDirection+0x130>
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	9d 81       	ldd	r25, Y+5	; 0x05
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	69 f0       	breq	.+26     	; 0xec2 <DIO_voidSetPinDirection+0x148>
     ea8:	5f c0       	rjmp	.+190    	; 0xf68 <DIO_voidSetPinDirection+0x1ee>
     eaa:	2c 81       	ldd	r18, Y+4	; 0x04
     eac:	3d 81       	ldd	r19, Y+5	; 0x05
     eae:	22 30       	cpi	r18, 0x02	; 2
     eb0:	31 05       	cpc	r19, r1
     eb2:	89 f1       	breq	.+98     	; 0xf16 <DIO_voidSetPinDirection+0x19c>
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
     eb6:	9d 81       	ldd	r25, Y+5	; 0x05
     eb8:	83 30       	cpi	r24, 0x03	; 3
     eba:	91 05       	cpc	r25, r1
     ebc:	09 f4       	brne	.+2      	; 0xec0 <DIO_voidSetPinDirection+0x146>
     ebe:	40 c0       	rjmp	.+128    	; 0xf40 <DIO_voidSetPinDirection+0x1c6>
     ec0:	53 c0       	rjmp	.+166    	; 0xf68 <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA : CLR_BIT(DDRA , Copy_u8Pin); break ;
     ec2:	aa e3       	ldi	r26, 0x3A	; 58
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	ea e3       	ldi	r30, 0x3A	; 58
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <DIO_voidSetPinDirection+0x166>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <DIO_voidSetPinDirection+0x162>
     ee4:	80 95       	com	r24
     ee6:	84 23       	and	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	3e c0       	rjmp	.+124    	; 0xf68 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTB : CLR_BIT(DDRB , Copy_u8Pin); break ;
     eec:	a7 e3       	ldi	r26, 0x37	; 55
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e7 e3       	ldi	r30, 0x37	; 55
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_voidSetPinDirection+0x190>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_voidSetPinDirection+0x18c>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	29 c0       	rjmp	.+82     	; 0xf68 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTC : CLR_BIT(DDRC , Copy_u8Pin); break ;
     f16:	a4 e3       	ldi	r26, 0x34	; 52
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e4 e3       	ldi	r30, 0x34	; 52
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_voidSetPinDirection+0x1ba>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_voidSetPinDirection+0x1b6>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	14 c0       	rjmp	.+40     	; 0xf68 <DIO_voidSetPinDirection+0x1ee>
			case DIO_PORTD : CLR_BIT(DDRD , Copy_u8Pin); break ;
     f40:	a1 e3       	ldi	r26, 0x31	; 49
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e1 e3       	ldi	r30, 0x31	; 49
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_voidSetPinDirection+0x1e4>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_voidSetPinDirection+0x1e0>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
		}
	}

}
     f68:	27 96       	adiw	r28, 0x07	; 7
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <DIO_voidSetPinValue>:

void DIO_voidSetPinValue (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	27 97       	sbiw	r28, 0x07	; 7
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	6a 83       	std	Y+2, r22	; 0x02
     f92:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Value == DIO_HIGH)
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	09 f0       	breq	.+2      	; 0xf9c <DIO_voidSetPinValue+0x22>
     f9a:	6f c0       	rjmp	.+222    	; 0x107a <DIO_voidSetPinValue+0x100>
	{
		switch (Copy_u8Port)
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	3f 83       	std	Y+7, r19	; 0x07
     fa4:	2e 83       	std	Y+6, r18	; 0x06
     fa6:	8e 81       	ldd	r24, Y+6	; 0x06
     fa8:	9f 81       	ldd	r25, Y+7	; 0x07
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	91 05       	cpc	r25, r1
     fae:	49 f1       	breq	.+82     	; 0x1002 <DIO_voidSetPinValue+0x88>
     fb0:	2e 81       	ldd	r18, Y+6	; 0x06
     fb2:	3f 81       	ldd	r19, Y+7	; 0x07
     fb4:	22 30       	cpi	r18, 0x02	; 2
     fb6:	31 05       	cpc	r19, r1
     fb8:	2c f4       	brge	.+10     	; 0xfc4 <DIO_voidSetPinValue+0x4a>
     fba:	8e 81       	ldd	r24, Y+6	; 0x06
     fbc:	9f 81       	ldd	r25, Y+7	; 0x07
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	61 f0       	breq	.+24     	; 0xfda <DIO_voidSetPinValue+0x60>
     fc2:	d2 c0       	rjmp	.+420    	; 0x1168 <DIO_voidSetPinValue+0x1ee>
     fc4:	2e 81       	ldd	r18, Y+6	; 0x06
     fc6:	3f 81       	ldd	r19, Y+7	; 0x07
     fc8:	22 30       	cpi	r18, 0x02	; 2
     fca:	31 05       	cpc	r19, r1
     fcc:	71 f1       	breq	.+92     	; 0x102a <DIO_voidSetPinValue+0xb0>
     fce:	8e 81       	ldd	r24, Y+6	; 0x06
     fd0:	9f 81       	ldd	r25, Y+7	; 0x07
     fd2:	83 30       	cpi	r24, 0x03	; 3
     fd4:	91 05       	cpc	r25, r1
     fd6:	e9 f1       	breq	.+122    	; 0x1052 <DIO_voidSetPinValue+0xd8>
     fd8:	c7 c0       	rjmp	.+398    	; 0x1168 <DIO_voidSetPinValue+0x1ee>
		{
			case DIO_PORTA : SET_BIT(PORTA , Copy_u8Pin); break ;
     fda:	ab e3       	ldi	r26, 0x3B	; 59
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	eb e3       	ldi	r30, 0x3B	; 59
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_voidSetPinValue+0x7e>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_voidSetPinValue+0x7a>
     ffc:	84 2b       	or	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	b3 c0       	rjmp	.+358    	; 0x1168 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTB : SET_BIT(PORTB , Copy_u8Pin); break ;
    1002:	a8 e3       	ldi	r26, 0x38	; 56
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e8 e3       	ldi	r30, 0x38	; 56
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_voidSetPinValue+0xa6>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_voidSetPinValue+0xa2>
    1024:	84 2b       	or	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	9f c0       	rjmp	.+318    	; 0x1168 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTC : SET_BIT(PORTC , Copy_u8Pin); break ;
    102a:	a5 e3       	ldi	r26, 0x35	; 53
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e5 e3       	ldi	r30, 0x35	; 53
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <DIO_voidSetPinValue+0xce>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <DIO_voidSetPinValue+0xca>
    104c:	84 2b       	or	r24, r20
    104e:	8c 93       	st	X, r24
    1050:	8b c0       	rjmp	.+278    	; 0x1168 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTD : SET_BIT(PORTD , Copy_u8Pin); break ;
    1052:	a2 e3       	ldi	r26, 0x32	; 50
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e2 e3       	ldi	r30, 0x32	; 50
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_voidSetPinValue+0xf6>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_voidSetPinValue+0xf2>
    1074:	84 2b       	or	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	77 c0       	rjmp	.+238    	; 0x1168 <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if (Copy_u8Value == DIO_LOW)
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	88 23       	and	r24, r24
    107e:	09 f0       	breq	.+2      	; 0x1082 <DIO_voidSetPinValue+0x108>
    1080:	73 c0       	rjmp	.+230    	; 0x1168 <DIO_voidSetPinValue+0x1ee>
	{
		switch (Copy_u8Port)
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	3d 83       	std	Y+5, r19	; 0x05
    108a:	2c 83       	std	Y+4, r18	; 0x04
    108c:	8c 81       	ldd	r24, Y+4	; 0x04
    108e:	9d 81       	ldd	r25, Y+5	; 0x05
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	91 05       	cpc	r25, r1
    1094:	59 f1       	breq	.+86     	; 0x10ec <DIO_voidSetPinValue+0x172>
    1096:	2c 81       	ldd	r18, Y+4	; 0x04
    1098:	3d 81       	ldd	r19, Y+5	; 0x05
    109a:	22 30       	cpi	r18, 0x02	; 2
    109c:	31 05       	cpc	r19, r1
    109e:	2c f4       	brge	.+10     	; 0x10aa <DIO_voidSetPinValue+0x130>
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	9d 81       	ldd	r25, Y+5	; 0x05
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	69 f0       	breq	.+26     	; 0x10c2 <DIO_voidSetPinValue+0x148>
    10a8:	5f c0       	rjmp	.+190    	; 0x1168 <DIO_voidSetPinValue+0x1ee>
    10aa:	2c 81       	ldd	r18, Y+4	; 0x04
    10ac:	3d 81       	ldd	r19, Y+5	; 0x05
    10ae:	22 30       	cpi	r18, 0x02	; 2
    10b0:	31 05       	cpc	r19, r1
    10b2:	89 f1       	breq	.+98     	; 0x1116 <DIO_voidSetPinValue+0x19c>
    10b4:	8c 81       	ldd	r24, Y+4	; 0x04
    10b6:	9d 81       	ldd	r25, Y+5	; 0x05
    10b8:	83 30       	cpi	r24, 0x03	; 3
    10ba:	91 05       	cpc	r25, r1
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <DIO_voidSetPinValue+0x146>
    10be:	40 c0       	rjmp	.+128    	; 0x1140 <DIO_voidSetPinValue+0x1c6>
    10c0:	53 c0       	rjmp	.+166    	; 0x1168 <DIO_voidSetPinValue+0x1ee>
		{
			case DIO_PORTA : CLR_BIT(PORTA , Copy_u8Pin); break ;
    10c2:	ab e3       	ldi	r26, 0x3B	; 59
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	eb e3       	ldi	r30, 0x3B	; 59
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_voidSetPinValue+0x166>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_voidSetPinValue+0x162>
    10e4:	80 95       	com	r24
    10e6:	84 23       	and	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	3e c0       	rjmp	.+124    	; 0x1168 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTB : CLR_BIT(PORTB , Copy_u8Pin); break ;
    10ec:	a8 e3       	ldi	r26, 0x38	; 56
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e8 e3       	ldi	r30, 0x38	; 56
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_voidSetPinValue+0x190>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <DIO_voidSetPinValue+0x18c>
    110e:	80 95       	com	r24
    1110:	84 23       	and	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	29 c0       	rjmp	.+82     	; 0x1168 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTC : CLR_BIT(PORTC , Copy_u8Pin); break ;
    1116:	a5 e3       	ldi	r26, 0x35	; 53
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e5 e3       	ldi	r30, 0x35	; 53
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_voidSetPinValue+0x1ba>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO_voidSetPinValue+0x1b6>
    1138:	80 95       	com	r24
    113a:	84 23       	and	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	14 c0       	rjmp	.+40     	; 0x1168 <DIO_voidSetPinValue+0x1ee>
			case DIO_PORTD : CLR_BIT(PORTD , Copy_u8Pin); break ;
    1140:	a2 e3       	ldi	r26, 0x32	; 50
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e2 e3       	ldi	r30, 0x32	; 50
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_voidSetPinValue+0x1e4>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_voidSetPinValue+0x1e0>
    1162:	80 95       	com	r24
    1164:	84 23       	and	r24, r20
    1166:	8c 93       	st	X, r24
		}
	}
}
    1168:	27 96       	adiw	r28, 0x07	; 7
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <DIO_u8GetPinValue>:

u8   DIO_u8GetPinValue	 (u8 Copy_u8Port , u8 Copy_u8Pin)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	00 d0       	rcall	.+0      	; 0x1180 <DIO_u8GetPinValue+0x6>
    1180:	00 d0       	rcall	.+0      	; 0x1182 <DIO_u8GetPinValue+0x8>
    1182:	00 d0       	rcall	.+0      	; 0x1184 <DIO_u8GetPinValue+0xa>
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3d 83       	std	Y+5, r19	; 0x05
    1194:	2c 83       	std	Y+4, r18	; 0x04
    1196:	4c 81       	ldd	r20, Y+4	; 0x04
    1198:	5d 81       	ldd	r21, Y+5	; 0x05
    119a:	41 30       	cpi	r20, 0x01	; 1
    119c:	51 05       	cpc	r21, r1
    119e:	49 f1       	breq	.+82     	; 0x11f2 <DIO_u8GetPinValue+0x78>
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	9d 81       	ldd	r25, Y+5	; 0x05
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	91 05       	cpc	r25, r1
    11a8:	34 f4       	brge	.+12     	; 0x11b6 <DIO_u8GetPinValue+0x3c>
    11aa:	2c 81       	ldd	r18, Y+4	; 0x04
    11ac:	3d 81       	ldd	r19, Y+5	; 0x05
    11ae:	21 15       	cp	r18, r1
    11b0:	31 05       	cpc	r19, r1
    11b2:	61 f0       	breq	.+24     	; 0x11cc <DIO_u8GetPinValue+0x52>
    11b4:	57 c0       	rjmp	.+174    	; 0x1264 <DIO_u8GetPinValue+0xea>
    11b6:	4c 81       	ldd	r20, Y+4	; 0x04
    11b8:	5d 81       	ldd	r21, Y+5	; 0x05
    11ba:	42 30       	cpi	r20, 0x02	; 2
    11bc:	51 05       	cpc	r21, r1
    11be:	61 f1       	breq	.+88     	; 0x1218 <DIO_u8GetPinValue+0x9e>
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	9d 81       	ldd	r25, Y+5	; 0x05
    11c4:	83 30       	cpi	r24, 0x03	; 3
    11c6:	91 05       	cpc	r25, r1
    11c8:	d1 f1       	breq	.+116    	; 0x123e <DIO_u8GetPinValue+0xc4>
    11ca:	4c c0       	rjmp	.+152    	; 0x1264 <DIO_u8GetPinValue+0xea>
		{
			case DIO_PORTA : return GET_BIT(PINA , Copy_u8Pin); 
    11cc:	e9 e3       	ldi	r30, 0x39	; 57
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	a9 01       	movw	r20, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <DIO_u8GetPinValue+0x6a>
    11e0:	55 95       	asr	r21
    11e2:	47 95       	ror	r20
    11e4:	8a 95       	dec	r24
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <DIO_u8GetPinValue+0x66>
    11e8:	ca 01       	movw	r24, r20
    11ea:	58 2f       	mov	r21, r24
    11ec:	51 70       	andi	r21, 0x01	; 1
    11ee:	5b 83       	std	Y+3, r21	; 0x03
    11f0:	3a c0       	rjmp	.+116    	; 0x1266 <DIO_u8GetPinValue+0xec>
			case DIO_PORTB : return GET_BIT(PINB , Copy_u8Pin); 
    11f2:	e6 e3       	ldi	r30, 0x36	; 54
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	a9 01       	movw	r20, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_u8GetPinValue+0x90>
    1206:	55 95       	asr	r21
    1208:	47 95       	ror	r20
    120a:	8a 95       	dec	r24
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_u8GetPinValue+0x8c>
    120e:	ca 01       	movw	r24, r20
    1210:	58 2f       	mov	r21, r24
    1212:	51 70       	andi	r21, 0x01	; 1
    1214:	5b 83       	std	Y+3, r21	; 0x03
    1216:	27 c0       	rjmp	.+78     	; 0x1266 <DIO_u8GetPinValue+0xec>
			case DIO_PORTC : return GET_BIT(PINC , Copy_u8Pin); 
    1218:	e3 e3       	ldi	r30, 0x33	; 51
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	88 2f       	mov	r24, r24
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	a9 01       	movw	r20, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_u8GetPinValue+0xb6>
    122c:	55 95       	asr	r21
    122e:	47 95       	ror	r20
    1230:	8a 95       	dec	r24
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_u8GetPinValue+0xb2>
    1234:	ca 01       	movw	r24, r20
    1236:	58 2f       	mov	r21, r24
    1238:	51 70       	andi	r21, 0x01	; 1
    123a:	5b 83       	std	Y+3, r21	; 0x03
    123c:	14 c0       	rjmp	.+40     	; 0x1266 <DIO_u8GetPinValue+0xec>
			case DIO_PORTD : return GET_BIT(PIND , Copy_u8Pin); 
    123e:	e0 e3       	ldi	r30, 0x30	; 48
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a9 01       	movw	r20, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DIO_u8GetPinValue+0xdc>
    1252:	55 95       	asr	r21
    1254:	47 95       	ror	r20
    1256:	8a 95       	dec	r24
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <DIO_u8GetPinValue+0xd8>
    125a:	ca 01       	movw	r24, r20
    125c:	58 2f       	mov	r21, r24
    125e:	51 70       	andi	r21, 0x01	; 1
    1260:	5b 83       	std	Y+3, r21	; 0x03
    1262:	01 c0       	rjmp	.+2      	; 0x1266 <DIO_u8GetPinValue+0xec>
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_u8GetPinValue+0xf0>
		}
}
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	8e 83       	std	Y+6, r24	; 0x06
    126a:	8e 81       	ldd	r24, Y+6	; 0x06
    126c:	26 96       	adiw	r28, 0x06	; 6
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <DIO_voidTogglePin>:

void DIO_voidTogglePin	 (u8 Copy_u8Port , u8 Copy_u8Pin)
{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	00 d0       	rcall	.+0      	; 0x1284 <DIO_voidTogglePin+0x6>
    1284:	00 d0       	rcall	.+0      	; 0x1286 <DIO_voidTogglePin+0x8>
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	3c 83       	std	Y+4, r19	; 0x04
    1296:	2b 83       	std	Y+3, r18	; 0x03
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	91 05       	cpc	r25, r1
    12a0:	49 f1       	breq	.+82     	; 0x12f4 <DIO_voidTogglePin+0x76>
    12a2:	2b 81       	ldd	r18, Y+3	; 0x03
    12a4:	3c 81       	ldd	r19, Y+4	; 0x04
    12a6:	22 30       	cpi	r18, 0x02	; 2
    12a8:	31 05       	cpc	r19, r1
    12aa:	2c f4       	brge	.+10     	; 0x12b6 <DIO_voidTogglePin+0x38>
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	9c 81       	ldd	r25, Y+4	; 0x04
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	61 f0       	breq	.+24     	; 0x12cc <DIO_voidTogglePin+0x4e>
    12b4:	5a c0       	rjmp	.+180    	; 0x136a <DIO_voidTogglePin+0xec>
    12b6:	2b 81       	ldd	r18, Y+3	; 0x03
    12b8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ba:	22 30       	cpi	r18, 0x02	; 2
    12bc:	31 05       	cpc	r19, r1
    12be:	71 f1       	breq	.+92     	; 0x131c <DIO_voidTogglePin+0x9e>
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	83 30       	cpi	r24, 0x03	; 3
    12c6:	91 05       	cpc	r25, r1
    12c8:	e9 f1       	breq	.+122    	; 0x1344 <DIO_voidTogglePin+0xc6>
    12ca:	4f c0       	rjmp	.+158    	; 0x136a <DIO_voidTogglePin+0xec>
		{
			case DIO_PORTA : TOGGLE_BIT(PORTA , Copy_u8Pin); break ;
    12cc:	ab e3       	ldi	r26, 0x3B	; 59
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	eb e3       	ldi	r30, 0x3B	; 59
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_voidTogglePin+0x6c>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_voidTogglePin+0x68>
    12ee:	84 27       	eor	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	3b c0       	rjmp	.+118    	; 0x136a <DIO_voidTogglePin+0xec>
			case DIO_PORTB : TOGGLE_BIT(PORTB , Copy_u8Pin); break ;
    12f4:	a8 e3       	ldi	r26, 0x38	; 56
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e8 e3       	ldi	r30, 0x38	; 56
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_voidTogglePin+0x94>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_voidTogglePin+0x90>
    1316:	84 27       	eor	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	27 c0       	rjmp	.+78     	; 0x136a <DIO_voidTogglePin+0xec>
			case DIO_PORTC : TOGGLE_BIT(PORTC , Copy_u8Pin); break ;
    131c:	a5 e3       	ldi	r26, 0x35	; 53
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e5 e3       	ldi	r30, 0x35	; 53
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_voidTogglePin+0xbc>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_voidTogglePin+0xb8>
    133e:	84 27       	eor	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	13 c0       	rjmp	.+38     	; 0x136a <DIO_voidTogglePin+0xec>
			case DIO_PORTD : TOGGLE_BIT(PORTD , Copy_u8Pin); break ;
    1344:	a2 e3       	ldi	r26, 0x32	; 50
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e2 e3       	ldi	r30, 0x32	; 50
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_voidTogglePin+0xe4>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_voidTogglePin+0xe0>
    1366:	84 27       	eor	r24, r20
    1368:	8c 93       	st	X, r24
		}
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection (u8 Copy_u8Port , u8 Copy_u8Direction)
{
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	00 d0       	rcall	.+0      	; 0x137e <DIO_voidSetPortDirection+0x6>
    137e:	00 d0       	rcall	.+0      	; 0x1380 <DIO_voidSetPortDirection+0x8>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	3c 83       	std	Y+4, r19	; 0x04
    1390:	2b 83       	std	Y+3, r18	; 0x03
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	91 05       	cpc	r25, r1
    139a:	d1 f0       	breq	.+52     	; 0x13d0 <DIO_voidSetPortDirection+0x58>
    139c:	2b 81       	ldd	r18, Y+3	; 0x03
    139e:	3c 81       	ldd	r19, Y+4	; 0x04
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <DIO_voidSetPortDirection+0x38>
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	9c 81       	ldd	r25, Y+4	; 0x04
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	61 f0       	breq	.+24     	; 0x13c6 <DIO_voidSetPortDirection+0x4e>
    13ae:	1e c0       	rjmp	.+60     	; 0x13ec <DIO_voidSetPortDirection+0x74>
    13b0:	2b 81       	ldd	r18, Y+3	; 0x03
    13b2:	3c 81       	ldd	r19, Y+4	; 0x04
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	81 f0       	breq	.+32     	; 0x13da <DIO_voidSetPortDirection+0x62>
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	9c 81       	ldd	r25, Y+4	; 0x04
    13be:	83 30       	cpi	r24, 0x03	; 3
    13c0:	91 05       	cpc	r25, r1
    13c2:	81 f0       	breq	.+32     	; 0x13e4 <DIO_voidSetPortDirection+0x6c>
    13c4:	13 c0       	rjmp	.+38     	; 0x13ec <DIO_voidSetPortDirection+0x74>
		{
			case DIO_PORTA : DDRA = Copy_u8Direction ; break ;
    13c6:	ea e3       	ldi	r30, 0x3A	; 58
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	80 83       	st	Z, r24
    13ce:	0e c0       	rjmp	.+28     	; 0x13ec <DIO_voidSetPortDirection+0x74>
			case DIO_PORTB : DDRB = Copy_u8Direction ; break ;
    13d0:	e7 e3       	ldi	r30, 0x37	; 55
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	80 83       	st	Z, r24
    13d8:	09 c0       	rjmp	.+18     	; 0x13ec <DIO_voidSetPortDirection+0x74>
			case DIO_PORTC : DDRC = Copy_u8Direction ; break ;
    13da:	e4 e3       	ldi	r30, 0x34	; 52
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	80 83       	st	Z, r24
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <DIO_voidSetPortDirection+0x74>
			case DIO_PORTD : DDRD = Copy_u8Direction ; break ;
    13e4:	e1 e3       	ldi	r30, 0x31	; 49
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	80 83       	st	Z, r24
		}
}
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <DIO_voidSetPortValue>:

void DIO_voidSetPortValue (u8 Copy_u8Port , u8 Copy_u8Value)
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <DIO_voidSetPortValue+0x6>
    1400:	00 d0       	rcall	.+0      	; 0x1402 <DIO_voidSetPortValue+0x8>
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	89 83       	std	Y+1, r24	; 0x01
    1408:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	3c 83       	std	Y+4, r19	; 0x04
    1412:	2b 83       	std	Y+3, r18	; 0x03
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	9c 81       	ldd	r25, Y+4	; 0x04
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	91 05       	cpc	r25, r1
    141c:	d1 f0       	breq	.+52     	; 0x1452 <DIO_voidSetPortValue+0x58>
    141e:	2b 81       	ldd	r18, Y+3	; 0x03
    1420:	3c 81       	ldd	r19, Y+4	; 0x04
    1422:	22 30       	cpi	r18, 0x02	; 2
    1424:	31 05       	cpc	r19, r1
    1426:	2c f4       	brge	.+10     	; 0x1432 <DIO_voidSetPortValue+0x38>
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	9c 81       	ldd	r25, Y+4	; 0x04
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	61 f0       	breq	.+24     	; 0x1448 <DIO_voidSetPortValue+0x4e>
    1430:	1e c0       	rjmp	.+60     	; 0x146e <DIO_voidSetPortValue+0x74>
    1432:	2b 81       	ldd	r18, Y+3	; 0x03
    1434:	3c 81       	ldd	r19, Y+4	; 0x04
    1436:	22 30       	cpi	r18, 0x02	; 2
    1438:	31 05       	cpc	r19, r1
    143a:	81 f0       	breq	.+32     	; 0x145c <DIO_voidSetPortValue+0x62>
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	83 30       	cpi	r24, 0x03	; 3
    1442:	91 05       	cpc	r25, r1
    1444:	81 f0       	breq	.+32     	; 0x1466 <DIO_voidSetPortValue+0x6c>
    1446:	13 c0       	rjmp	.+38     	; 0x146e <DIO_voidSetPortValue+0x74>
		{
			case DIO_PORTA : PORTA = Copy_u8Value ; break ;
    1448:	eb e3       	ldi	r30, 0x3B	; 59
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	80 83       	st	Z, r24
    1450:	0e c0       	rjmp	.+28     	; 0x146e <DIO_voidSetPortValue+0x74>
			case DIO_PORTB : PORTB = Copy_u8Value ; break ;
    1452:	e8 e3       	ldi	r30, 0x38	; 56
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	80 83       	st	Z, r24
    145a:	09 c0       	rjmp	.+18     	; 0x146e <DIO_voidSetPortValue+0x74>
			case DIO_PORTC : PORTC = Copy_u8Value ; break ;
    145c:	e5 e3       	ldi	r30, 0x35	; 53
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	80 83       	st	Z, r24
    1464:	04 c0       	rjmp	.+8      	; 0x146e <DIO_voidSetPortValue+0x74>
			case DIO_PORTD : PORTD = Copy_u8Value ; break ;
    1466:	e2 e3       	ldi	r30, 0x32	; 50
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	80 83       	st	Z, r24
		}
}
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <DIO_u8GetPortValue>:

u8 	 DIO_u8GetPortValue	  (u8 Copy_u8Port)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	00 d0       	rcall	.+0      	; 0x1482 <DIO_u8GetPortValue+0x6>
    1482:	00 d0       	rcall	.+0      	; 0x1484 <DIO_u8GetPortValue+0x8>
    1484:	0f 92       	push	r0
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Port)
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	3c 83       	std	Y+4, r19	; 0x04
    1494:	2b 83       	std	Y+3, r18	; 0x03
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	91 05       	cpc	r25, r1
    149e:	d1 f0       	breq	.+52     	; 0x14d4 <DIO_u8GetPortValue+0x58>
    14a0:	2b 81       	ldd	r18, Y+3	; 0x03
    14a2:	3c 81       	ldd	r19, Y+4	; 0x04
    14a4:	22 30       	cpi	r18, 0x02	; 2
    14a6:	31 05       	cpc	r19, r1
    14a8:	2c f4       	brge	.+10     	; 0x14b4 <DIO_u8GetPortValue+0x38>
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	61 f0       	breq	.+24     	; 0x14ca <DIO_u8GetPortValue+0x4e>
    14b2:	1f c0       	rjmp	.+62     	; 0x14f2 <DIO_u8GetPortValue+0x76>
    14b4:	2b 81       	ldd	r18, Y+3	; 0x03
    14b6:	3c 81       	ldd	r19, Y+4	; 0x04
    14b8:	22 30       	cpi	r18, 0x02	; 2
    14ba:	31 05       	cpc	r19, r1
    14bc:	81 f0       	breq	.+32     	; 0x14de <DIO_u8GetPortValue+0x62>
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	83 30       	cpi	r24, 0x03	; 3
    14c4:	91 05       	cpc	r25, r1
    14c6:	81 f0       	breq	.+32     	; 0x14e8 <DIO_u8GetPortValue+0x6c>
    14c8:	14 c0       	rjmp	.+40     	; 0x14f2 <DIO_u8GetPortValue+0x76>
		{
			case DIO_PORTA : return PINA ;
    14ca:	e9 e3       	ldi	r30, 0x39	; 57
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	90 81       	ld	r25, Z
    14d0:	9a 83       	std	Y+2, r25	; 0x02
    14d2:	10 c0       	rjmp	.+32     	; 0x14f4 <DIO_u8GetPortValue+0x78>
			case DIO_PORTB : return PINB ;
    14d4:	e6 e3       	ldi	r30, 0x36	; 54
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	20 81       	ld	r18, Z
    14da:	2a 83       	std	Y+2, r18	; 0x02
    14dc:	0b c0       	rjmp	.+22     	; 0x14f4 <DIO_u8GetPortValue+0x78>
			case DIO_PORTC : return PINC ;
    14de:	e3 e3       	ldi	r30, 0x33	; 51
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	30 81       	ld	r19, Z
    14e4:	3a 83       	std	Y+2, r19	; 0x02
    14e6:	06 c0       	rjmp	.+12     	; 0x14f4 <DIO_u8GetPortValue+0x78>
			case DIO_PORTD : return PIND ;
    14e8:	e0 e3       	ldi	r30, 0x30	; 48
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8a 83       	std	Y+2, r24	; 0x02
    14f0:	01 c0       	rjmp	.+2      	; 0x14f4 <DIO_u8GetPortValue+0x78>
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_u8GetPortValue+0x7c>
		}
}
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	9d 83       	std	Y+5, r25	; 0x05
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <LCD_voidSendCommand>:
#include "BIT_MATH.h"

#include "DIO.h"
#include "LCD.h"

void LCD_voidSendCommand(u8 Copy_u8Command){
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	2f 97       	sbiw	r28, 0x0f	; 15
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	8f 87       	std	Y+15, r24	; 0x0f

    DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_LOW);
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	40 e0       	ldi	r20, 0x00	; 0
    1530:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_voidSetPinValue>

    DIO_voidSetPortValue(LCD_Data_PORT, Copy_u8Command);
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	6f 85       	ldd	r22, Y+15	; 0x0f
    1538:	0e 94 fd 09 	call	0x13fa	; 0x13fa <DIO_voidSetPortValue>

    DIO_voidSetPinValue(LCD_CONTROL_PORT, E, DIO_HIGH);
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	62 e0       	ldi	r22, 0x02	; 2
    1540:	41 e0       	ldi	r20, 0x01	; 1
    1542:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_voidSetPinValue>
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	a0 e0       	ldi	r26, 0x00	; 0
    154c:	b0 e4       	ldi	r27, 0x40	; 64
    154e:	8b 87       	std	Y+11, r24	; 0x0b
    1550:	9c 87       	std	Y+12, r25	; 0x0c
    1552:	ad 87       	std	Y+13, r26	; 0x0d
    1554:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1556:	6b 85       	ldd	r22, Y+11	; 0x0b
    1558:	7c 85       	ldd	r23, Y+12	; 0x0c
    155a:	8d 85       	ldd	r24, Y+13	; 0x0d
    155c:	9e 85       	ldd	r25, Y+14	; 0x0e
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	4a ef       	ldi	r20, 0xFA	; 250
    1564:	54 e4       	ldi	r21, 0x44	; 68
    1566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	8f 83       	std	Y+7, r24	; 0x07
    1570:	98 87       	std	Y+8, r25	; 0x08
    1572:	a9 87       	std	Y+9, r26	; 0x09
    1574:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1576:	6f 81       	ldd	r22, Y+7	; 0x07
    1578:	78 85       	ldd	r23, Y+8	; 0x08
    157a:	89 85       	ldd	r24, Y+9	; 0x09
    157c:	9a 85       	ldd	r25, Y+10	; 0x0a
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 e8       	ldi	r20, 0x80	; 128
    1584:	5f e3       	ldi	r21, 0x3F	; 63
    1586:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    158a:	88 23       	and	r24, r24
    158c:	2c f4       	brge	.+10     	; 0x1598 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	9e 83       	std	Y+6, r25	; 0x06
    1594:	8d 83       	std	Y+5, r24	; 0x05
    1596:	3f c0       	rjmp	.+126    	; 0x1616 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1598:	6f 81       	ldd	r22, Y+7	; 0x07
    159a:	78 85       	ldd	r23, Y+8	; 0x08
    159c:	89 85       	ldd	r24, Y+9	; 0x09
    159e:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	3f ef       	ldi	r19, 0xFF	; 255
    15a4:	4f e7       	ldi	r20, 0x7F	; 127
    15a6:	57 e4       	ldi	r21, 0x47	; 71
    15a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15ac:	18 16       	cp	r1, r24
    15ae:	4c f5       	brge	.+82     	; 0x1602 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e2       	ldi	r20, 0x20	; 32
    15be:	51 e4       	ldi	r21, 0x41	; 65
    15c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	bc 01       	movw	r22, r24
    15ca:	cd 01       	movw	r24, r26
    15cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	9e 83       	std	Y+6, r25	; 0x06
    15d6:	8d 83       	std	Y+5, r24	; 0x05
    15d8:	0f c0       	rjmp	.+30     	; 0x15f8 <LCD_voidSendCommand+0xee>
    15da:	88 ec       	ldi	r24, 0xC8	; 200
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	9c 83       	std	Y+4, r25	; 0x04
    15e0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	f1 f7       	brne	.-4      	; 0x15e6 <LCD_voidSendCommand+0xdc>
    15ea:	9c 83       	std	Y+4, r25	; 0x04
    15ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ee:	8d 81       	ldd	r24, Y+5	; 0x05
    15f0:	9e 81       	ldd	r25, Y+6	; 0x06
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	9e 83       	std	Y+6, r25	; 0x06
    15f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f8:	8d 81       	ldd	r24, Y+5	; 0x05
    15fa:	9e 81       	ldd	r25, Y+6	; 0x06
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	69 f7       	brne	.-38     	; 0x15da <LCD_voidSendCommand+0xd0>
    1600:	14 c0       	rjmp	.+40     	; 0x162a <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1602:	6f 81       	ldd	r22, Y+7	; 0x07
    1604:	78 85       	ldd	r23, Y+8	; 0x08
    1606:	89 85       	ldd	r24, Y+9	; 0x09
    1608:	9a 85       	ldd	r25, Y+10	; 0x0a
    160a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	9e 83       	std	Y+6, r25	; 0x06
    1614:	8d 83       	std	Y+5, r24	; 0x05
    1616:	8d 81       	ldd	r24, Y+5	; 0x05
    1618:	9e 81       	ldd	r25, Y+6	; 0x06
    161a:	9a 83       	std	Y+2, r25	; 0x02
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	9a 81       	ldd	r25, Y+2	; 0x02
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <LCD_voidSendCommand+0x118>
    1626:	9a 83       	std	Y+2, r25	; 0x02
    1628:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(LCD_CONTROL_PORT, E, DIO_LOW);
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	62 e0       	ldi	r22, 0x02	; 2
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_voidSetPinValue>

}
    1634:	2f 96       	adiw	r28, 0x0f	; 15
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char){
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	2f 97       	sbiw	r28, 0x0f	; 15
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	8f 87       	std	Y+15, r24	; 0x0f

    DIO_voidSetPinValue(LCD_CONTROL_PORT, RS, DIO_HIGH);
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	41 e0       	ldi	r20, 0x01	; 1
    1662:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_voidSetPinValue>
    DIO_voidSetPinValue(LCD_CONTROL_PORT, RW, DIO_LOW);
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	61 e0       	ldi	r22, 0x01	; 1
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_voidSetPinValue>

    DIO_voidSetPortValue(LCD_Data_PORT, Copy_u8Char);
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	6f 85       	ldd	r22, Y+15	; 0x0f
    1674:	0e 94 fd 09 	call	0x13fa	; 0x13fa <DIO_voidSetPortValue>

    DIO_voidSetPinValue(LCD_CONTROL_PORT, E, DIO_HIGH);
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	62 e0       	ldi	r22, 0x02	; 2
    167c:	41 e0       	ldi	r20, 0x01	; 1
    167e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_voidSetPinValue>
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a0 e0       	ldi	r26, 0x00	; 0
    1688:	b0 e4       	ldi	r27, 0x40	; 64
    168a:	8b 87       	std	Y+11, r24	; 0x0b
    168c:	9c 87       	std	Y+12, r25	; 0x0c
    168e:	ad 87       	std	Y+13, r26	; 0x0d
    1690:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1692:	6b 85       	ldd	r22, Y+11	; 0x0b
    1694:	7c 85       	ldd	r23, Y+12	; 0x0c
    1696:	8d 85       	ldd	r24, Y+13	; 0x0d
    1698:	9e 85       	ldd	r25, Y+14	; 0x0e
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	4a ef       	ldi	r20, 0xFA	; 250
    16a0:	54 e4       	ldi	r21, 0x44	; 68
    16a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	8f 83       	std	Y+7, r24	; 0x07
    16ac:	98 87       	std	Y+8, r25	; 0x08
    16ae:	a9 87       	std	Y+9, r26	; 0x09
    16b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b2:	6f 81       	ldd	r22, Y+7	; 0x07
    16b4:	78 85       	ldd	r23, Y+8	; 0x08
    16b6:	89 85       	ldd	r24, Y+9	; 0x09
    16b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e8       	ldi	r20, 0x80	; 128
    16c0:	5f e3       	ldi	r21, 0x3F	; 63
    16c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16c6:	88 23       	and	r24, r24
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <LCD_voidSendChar+0x8e>
		__ticks = 1;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8d 83       	std	Y+5, r24	; 0x05
    16d2:	3f c0       	rjmp	.+126    	; 0x1752 <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
    16d4:	6f 81       	ldd	r22, Y+7	; 0x07
    16d6:	78 85       	ldd	r23, Y+8	; 0x08
    16d8:	89 85       	ldd	r24, Y+9	; 0x09
    16da:	9a 85       	ldd	r25, Y+10	; 0x0a
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	3f ef       	ldi	r19, 0xFF	; 255
    16e0:	4f e7       	ldi	r20, 0x7F	; 127
    16e2:	57 e4       	ldi	r21, 0x47	; 71
    16e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16e8:	18 16       	cp	r1, r24
    16ea:	4c f5       	brge	.+82     	; 0x173e <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e2       	ldi	r20, 0x20	; 32
    16fa:	51 e4       	ldi	r21, 0x41	; 65
    16fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	bc 01       	movw	r22, r24
    1706:	cd 01       	movw	r24, r26
    1708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	8d 83       	std	Y+5, r24	; 0x05
    1714:	0f c0       	rjmp	.+30     	; 0x1734 <LCD_voidSendChar+0xee>
    1716:	88 ec       	ldi	r24, 0xC8	; 200
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9c 83       	std	Y+4, r25	; 0x04
    171c:	8b 83       	std	Y+3, r24	; 0x03
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <LCD_voidSendChar+0xdc>
    1726:	9c 83       	std	Y+4, r25	; 0x04
    1728:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	9e 83       	std	Y+6, r25	; 0x06
    1732:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	69 f7       	brne	.-38     	; 0x1716 <LCD_voidSendChar+0xd0>
    173c:	14 c0       	rjmp	.+40     	; 0x1766 <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173e:	6f 81       	ldd	r22, Y+7	; 0x07
    1740:	78 85       	ldd	r23, Y+8	; 0x08
    1742:	89 85       	ldd	r24, Y+9	; 0x09
    1744:	9a 85       	ldd	r25, Y+10	; 0x0a
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9e 83       	std	Y+6, r25	; 0x06
    1750:	8d 83       	std	Y+5, r24	; 0x05
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	9a 81       	ldd	r25, Y+2	; 0x02
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <LCD_voidSendChar+0x118>
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue(LCD_CONTROL_PORT, E, DIO_LOW);
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	62 e0       	ldi	r22, 0x02	; 2
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_voidSetPinValue>
}
    1770:	2f 96       	adiw	r28, 0x0f	; 15
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	de bf       	out	0x3e, r29	; 62
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	cd bf       	out	0x3d, r28	; 61
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <LCD_voidInit>:


void LCD_voidInit(void){
    1782:	0f 93       	push	r16
    1784:	1f 93       	push	r17
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	cc 54       	subi	r28, 0x4C	; 76
    1790:	d0 40       	sbci	r29, 0x00	; 0
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    // Data Port Direction --> OUTPUT
    DIO_voidSetPortDirection(LCD_Data_PORT, 0xff);
    179c:	82 e0       	ldi	r24, 0x02	; 2
    179e:	6f ef       	ldi	r22, 0xFF	; 255
    17a0:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_voidSetPortDirection>
    // Control Pins Direction --> OUTPUT
    DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS, DIO_OUTPUT);
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	41 e0       	ldi	r20, 0x01	; 1
    17aa:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW, DIO_OUTPUT);
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	61 e0       	ldi	r22, 0x01	; 1
    17b2:	41 e0       	ldi	r20, 0x01	; 1
    17b4:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT, E, DIO_OUTPUT);
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	62 e0       	ldi	r22, 0x02	; 2
    17bc:	41 e0       	ldi	r20, 0x01	; 1
    17be:	0e 94 bd 06 	call	0xd7a	; 0xd7a <DIO_voidSetPinDirection>
    17c2:	fe 01       	movw	r30, r28
    17c4:	e7 5b       	subi	r30, 0xB7	; 183
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	a0 ef       	ldi	r26, 0xF0	; 240
    17ce:	b1 e4       	ldi	r27, 0x41	; 65
    17d0:	80 83       	st	Z, r24
    17d2:	91 83       	std	Z+1, r25	; 0x01
    17d4:	a2 83       	std	Z+2, r26	; 0x02
    17d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d8:	8e 01       	movw	r16, r28
    17da:	0b 5b       	subi	r16, 0xBB	; 187
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	fe 01       	movw	r30, r28
    17e0:	e7 5b       	subi	r30, 0xB7	; 183
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	60 81       	ld	r22, Z
    17e6:	71 81       	ldd	r23, Z+1	; 0x01
    17e8:	82 81       	ldd	r24, Z+2	; 0x02
    17ea:	93 81       	ldd	r25, Z+3	; 0x03
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	4a ef       	ldi	r20, 0xFA	; 250
    17f2:	54 e4       	ldi	r21, 0x44	; 68
    17f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	f8 01       	movw	r30, r16
    17fe:	80 83       	st	Z, r24
    1800:	91 83       	std	Z+1, r25	; 0x01
    1802:	a2 83       	std	Z+2, r26	; 0x02
    1804:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1806:	fe 01       	movw	r30, r28
    1808:	eb 5b       	subi	r30, 0xBB	; 187
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	60 81       	ld	r22, Z
    180e:	71 81       	ldd	r23, Z+1	; 0x01
    1810:	82 81       	ldd	r24, Z+2	; 0x02
    1812:	93 81       	ldd	r25, Z+3	; 0x03
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e8       	ldi	r20, 0x80	; 128
    181a:	5f e3       	ldi	r21, 0x3F	; 63
    181c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1820:	88 23       	and	r24, r24
    1822:	44 f4       	brge	.+16     	; 0x1834 <LCD_voidInit+0xb2>
		__ticks = 1;
    1824:	fe 01       	movw	r30, r28
    1826:	ed 5b       	subi	r30, 0xBD	; 189
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	91 83       	std	Z+1, r25	; 0x01
    1830:	80 83       	st	Z, r24
    1832:	64 c0       	rjmp	.+200    	; 0x18fc <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    1834:	fe 01       	movw	r30, r28
    1836:	eb 5b       	subi	r30, 0xBB	; 187
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	60 81       	ld	r22, Z
    183c:	71 81       	ldd	r23, Z+1	; 0x01
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	93 81       	ldd	r25, Z+3	; 0x03
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	3f ef       	ldi	r19, 0xFF	; 255
    1846:	4f e7       	ldi	r20, 0x7F	; 127
    1848:	57 e4       	ldi	r21, 0x47	; 71
    184a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    184e:	18 16       	cp	r1, r24
    1850:	0c f0       	brlt	.+2      	; 0x1854 <LCD_voidInit+0xd2>
    1852:	43 c0       	rjmp	.+134    	; 0x18da <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1854:	fe 01       	movw	r30, r28
    1856:	e7 5b       	subi	r30, 0xB7	; 183
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	60 81       	ld	r22, Z
    185c:	71 81       	ldd	r23, Z+1	; 0x01
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e2       	ldi	r20, 0x20	; 32
    1868:	51 e4       	ldi	r21, 0x41	; 65
    186a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	8e 01       	movw	r16, r28
    1874:	0d 5b       	subi	r16, 0xBD	; 189
    1876:	1f 4f       	sbci	r17, 0xFF	; 255
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	f8 01       	movw	r30, r16
    1886:	91 83       	std	Z+1, r25	; 0x01
    1888:	80 83       	st	Z, r24
    188a:	1f c0       	rjmp	.+62     	; 0x18ca <LCD_voidInit+0x148>
    188c:	fe 01       	movw	r30, r28
    188e:	ef 5b       	subi	r30, 0xBF	; 191
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	88 ec       	ldi	r24, 0xC8	; 200
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	91 83       	std	Z+1, r25	; 0x01
    1898:	80 83       	st	Z, r24
    189a:	fe 01       	movw	r30, r28
    189c:	ef 5b       	subi	r30, 0xBF	; 191
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	80 81       	ld	r24, Z
    18a2:	91 81       	ldd	r25, Z+1	; 0x01
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	f1 f7       	brne	.-4      	; 0x18a4 <LCD_voidInit+0x122>
    18a8:	fe 01       	movw	r30, r28
    18aa:	ef 5b       	subi	r30, 0xBF	; 191
    18ac:	ff 4f       	sbci	r31, 0xFF	; 255
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b2:	de 01       	movw	r26, r28
    18b4:	ad 5b       	subi	r26, 0xBD	; 189
    18b6:	bf 4f       	sbci	r27, 0xFF	; 255
    18b8:	fe 01       	movw	r30, r28
    18ba:	ed 5b       	subi	r30, 0xBD	; 189
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	80 81       	ld	r24, Z
    18c0:	91 81       	ldd	r25, Z+1	; 0x01
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	11 96       	adiw	r26, 0x01	; 1
    18c6:	9c 93       	st	X, r25
    18c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ca:	fe 01       	movw	r30, r28
    18cc:	ed 5b       	subi	r30, 0xBD	; 189
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	80 81       	ld	r24, Z
    18d2:	91 81       	ldd	r25, Z+1	; 0x01
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	d1 f6       	brne	.-76     	; 0x188c <LCD_voidInit+0x10a>
    18d8:	24 c0       	rjmp	.+72     	; 0x1922 <LCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18da:	8e 01       	movw	r16, r28
    18dc:	0d 5b       	subi	r16, 0xBD	; 189
    18de:	1f 4f       	sbci	r17, 0xFF	; 255
    18e0:	fe 01       	movw	r30, r28
    18e2:	eb 5b       	subi	r30, 0xBB	; 187
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	60 81       	ld	r22, Z
    18e8:	71 81       	ldd	r23, Z+1	; 0x01
    18ea:	82 81       	ldd	r24, Z+2	; 0x02
    18ec:	93 81       	ldd	r25, Z+3	; 0x03
    18ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	f8 01       	movw	r30, r16
    18f8:	91 83       	std	Z+1, r25	; 0x01
    18fa:	80 83       	st	Z, r24
    18fc:	fe 01       	movw	r30, r28
    18fe:	ed 5b       	subi	r30, 0xBD	; 189
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	80 81       	ld	r24, Z
    1904:	91 81       	ldd	r25, Z+1	; 0x01
    1906:	fe 01       	movw	r30, r28
    1908:	ff 96       	adiw	r30, 0x3f	; 63
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	80 83       	st	Z, r24
    190e:	fe 01       	movw	r30, r28
    1910:	ff 96       	adiw	r30, 0x3f	; 63
    1912:	80 81       	ld	r24, Z
    1914:	91 81       	ldd	r25, Z+1	; 0x01
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	f1 f7       	brne	.-4      	; 0x1916 <LCD_voidInit+0x194>
    191a:	fe 01       	movw	r30, r28
    191c:	ff 96       	adiw	r30, 0x3f	; 63
    191e:	91 83       	std	Z+1, r25	; 0x01
    1920:	80 83       	st	Z, r24

    // DELAY FOR 30 milliseconds
    _delay_ms(30);

    LCD_voidSendCommand(FUNCTION_SET);
    1922:	88 e3       	ldi	r24, 0x38	; 56
    1924:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_voidSendCommand>
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	a0 e2       	ldi	r26, 0x20	; 32
    192e:	b2 e4       	ldi	r27, 0x42	; 66
    1930:	8b af       	std	Y+59, r24	; 0x3b
    1932:	9c af       	std	Y+60, r25	; 0x3c
    1934:	ad af       	std	Y+61, r26	; 0x3d
    1936:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1938:	6b ad       	ldd	r22, Y+59	; 0x3b
    193a:	7c ad       	ldd	r23, Y+60	; 0x3c
    193c:	8d ad       	ldd	r24, Y+61	; 0x3d
    193e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1940:	2b ea       	ldi	r18, 0xAB	; 171
    1942:	3a ea       	ldi	r19, 0xAA	; 170
    1944:	4a e2       	ldi	r20, 0x2A	; 42
    1946:	50 e4       	ldi	r21, 0x40	; 64
    1948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	8f ab       	std	Y+55, r24	; 0x37
    1952:	98 af       	std	Y+56, r25	; 0x38
    1954:	a9 af       	std	Y+57, r26	; 0x39
    1956:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1958:	6f a9       	ldd	r22, Y+55	; 0x37
    195a:	78 ad       	ldd	r23, Y+56	; 0x38
    195c:	89 ad       	ldd	r24, Y+57	; 0x39
    195e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	40 e8       	ldi	r20, 0x80	; 128
    1966:	5f e3       	ldi	r21, 0x3F	; 63
    1968:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    196c:	88 23       	and	r24, r24
    196e:	1c f4       	brge	.+6      	; 0x1976 <LCD_voidInit+0x1f4>
		__ticks = 1;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	8e ab       	std	Y+54, r24	; 0x36
    1974:	91 c0       	rjmp	.+290    	; 0x1a98 <LCD_voidInit+0x316>
	else if (__tmp > 255)
    1976:	6f a9       	ldd	r22, Y+55	; 0x37
    1978:	78 ad       	ldd	r23, Y+56	; 0x38
    197a:	89 ad       	ldd	r24, Y+57	; 0x39
    197c:	9a ad       	ldd	r25, Y+58	; 0x3a
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	4f e7       	ldi	r20, 0x7F	; 127
    1984:	53 e4       	ldi	r21, 0x43	; 67
    1986:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    198a:	18 16       	cp	r1, r24
    198c:	0c f0       	brlt	.+2      	; 0x1990 <LCD_voidInit+0x20e>
    198e:	7b c0       	rjmp	.+246    	; 0x1a86 <LCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1990:	6b ad       	ldd	r22, Y+59	; 0x3b
    1992:	7c ad       	ldd	r23, Y+60	; 0x3c
    1994:	8d ad       	ldd	r24, Y+61	; 0x3d
    1996:	9e ad       	ldd	r25, Y+62	; 0x3e
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	4a e7       	ldi	r20, 0x7A	; 122
    199e:	54 e4       	ldi	r21, 0x44	; 68
    19a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	8a ab       	std	Y+50, r24	; 0x32
    19aa:	9b ab       	std	Y+51, r25	; 0x33
    19ac:	ac ab       	std	Y+52, r26	; 0x34
    19ae:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b0:	6a a9       	ldd	r22, Y+50	; 0x32
    19b2:	7b a9       	ldd	r23, Y+51	; 0x33
    19b4:	8c a9       	ldd	r24, Y+52	; 0x34
    19b6:	9d a9       	ldd	r25, Y+53	; 0x35
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	4a ef       	ldi	r20, 0xFA	; 250
    19be:	54 e4       	ldi	r21, 0x44	; 68
    19c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	8e a7       	std	Y+46, r24	; 0x2e
    19ca:	9f a7       	std	Y+47, r25	; 0x2f
    19cc:	a8 ab       	std	Y+48, r26	; 0x30
    19ce:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    19d0:	6e a5       	ldd	r22, Y+46	; 0x2e
    19d2:	7f a5       	ldd	r23, Y+47	; 0x2f
    19d4:	88 a9       	ldd	r24, Y+48	; 0x30
    19d6:	99 a9       	ldd	r25, Y+49	; 0x31
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e8       	ldi	r20, 0x80	; 128
    19de:	5f e3       	ldi	r21, 0x3F	; 63
    19e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19e4:	88 23       	and	r24, r24
    19e6:	2c f4       	brge	.+10     	; 0x19f2 <LCD_voidInit+0x270>
		__ticks = 1;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	9d a7       	std	Y+45, r25	; 0x2d
    19ee:	8c a7       	std	Y+44, r24	; 0x2c
    19f0:	3f c0       	rjmp	.+126    	; 0x1a70 <LCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    19f2:	6e a5       	ldd	r22, Y+46	; 0x2e
    19f4:	7f a5       	ldd	r23, Y+47	; 0x2f
    19f6:	88 a9       	ldd	r24, Y+48	; 0x30
    19f8:	99 a9       	ldd	r25, Y+49	; 0x31
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	3f ef       	ldi	r19, 0xFF	; 255
    19fe:	4f e7       	ldi	r20, 0x7F	; 127
    1a00:	57 e4       	ldi	r21, 0x47	; 71
    1a02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a06:	18 16       	cp	r1, r24
    1a08:	4c f5       	brge	.+82     	; 0x1a5c <LCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0a:	6a a9       	ldd	r22, Y+50	; 0x32
    1a0c:	7b a9       	ldd	r23, Y+51	; 0x33
    1a0e:	8c a9       	ldd	r24, Y+52	; 0x34
    1a10:	9d a9       	ldd	r25, Y+53	; 0x35
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e2       	ldi	r20, 0x20	; 32
    1a18:	51 e4       	ldi	r21, 0x41	; 65
    1a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	bc 01       	movw	r22, r24
    1a24:	cd 01       	movw	r24, r26
    1a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	9d a7       	std	Y+45, r25	; 0x2d
    1a30:	8c a7       	std	Y+44, r24	; 0x2c
    1a32:	0f c0       	rjmp	.+30     	; 0x1a52 <LCD_voidInit+0x2d0>
    1a34:	88 ec       	ldi	r24, 0xC8	; 200
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9b a7       	std	Y+43, r25	; 0x2b
    1a3a:	8a a7       	std	Y+42, r24	; 0x2a
    1a3c:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a3e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <LCD_voidInit+0x2be>
    1a44:	9b a7       	std	Y+43, r25	; 0x2b
    1a46:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a48:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a4a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	9d a7       	std	Y+45, r25	; 0x2d
    1a50:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a52:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a54:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	69 f7       	brne	.-38     	; 0x1a34 <LCD_voidInit+0x2b2>
    1a5a:	24 c0       	rjmp	.+72     	; 0x1aa4 <LCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5c:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a5e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a60:	88 a9       	ldd	r24, Y+48	; 0x30
    1a62:	99 a9       	ldd	r25, Y+49	; 0x31
    1a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	9d a7       	std	Y+45, r25	; 0x2d
    1a6e:	8c a7       	std	Y+44, r24	; 0x2c
    1a70:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a72:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a74:	99 a7       	std	Y+41, r25	; 0x29
    1a76:	88 a7       	std	Y+40, r24	; 0x28
    1a78:	88 a5       	ldd	r24, Y+40	; 0x28
    1a7a:	99 a5       	ldd	r25, Y+41	; 0x29
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <LCD_voidInit+0x2fa>
    1a80:	99 a7       	std	Y+41, r25	; 0x29
    1a82:	88 a7       	std	Y+40, r24	; 0x28
    1a84:	0f c0       	rjmp	.+30     	; 0x1aa4 <LCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a86:	6f a9       	ldd	r22, Y+55	; 0x37
    1a88:	78 ad       	ldd	r23, Y+56	; 0x38
    1a8a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a8c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	8e ab       	std	Y+54, r24	; 0x36
    1a98:	8e a9       	ldd	r24, Y+54	; 0x36
    1a9a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a9c:	8f a1       	ldd	r24, Y+39	; 0x27
    1a9e:	8a 95       	dec	r24
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <LCD_voidInit+0x31c>
    1aa2:	8f a3       	std	Y+39, r24	; 0x27
    // DELAY FOR 40 microseconds
    _delay_us(40);

    LCD_voidSendCommand(ON_OFF_DISPLAY);
    1aa4:	8f e0       	ldi	r24, 0x0F	; 15
    1aa6:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_voidSendCommand>
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	a0 e2       	ldi	r26, 0x20	; 32
    1ab0:	b2 e4       	ldi	r27, 0x42	; 66
    1ab2:	8b a3       	std	Y+35, r24	; 0x23
    1ab4:	9c a3       	std	Y+36, r25	; 0x24
    1ab6:	ad a3       	std	Y+37, r26	; 0x25
    1ab8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1aba:	6b a1       	ldd	r22, Y+35	; 0x23
    1abc:	7c a1       	ldd	r23, Y+36	; 0x24
    1abe:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac2:	2b ea       	ldi	r18, 0xAB	; 171
    1ac4:	3a ea       	ldi	r19, 0xAA	; 170
    1ac6:	4a e2       	ldi	r20, 0x2A	; 42
    1ac8:	50 e4       	ldi	r21, 0x40	; 64
    1aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	8f 8f       	std	Y+31, r24	; 0x1f
    1ad4:	98 a3       	std	Y+32, r25	; 0x20
    1ad6:	a9 a3       	std	Y+33, r26	; 0x21
    1ad8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1ada:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1adc:	78 a1       	ldd	r23, Y+32	; 0x20
    1ade:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e8       	ldi	r20, 0x80	; 128
    1ae8:	5f e3       	ldi	r21, 0x3F	; 63
    1aea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aee:	88 23       	and	r24, r24
    1af0:	1c f4       	brge	.+6      	; 0x1af8 <LCD_voidInit+0x376>
		__ticks = 1;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	8e 8f       	std	Y+30, r24	; 0x1e
    1af6:	91 c0       	rjmp	.+290    	; 0x1c1a <LCD_voidInit+0x498>
	else if (__tmp > 255)
    1af8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1afa:	78 a1       	ldd	r23, Y+32	; 0x20
    1afc:	89 a1       	ldd	r24, Y+33	; 0x21
    1afe:	9a a1       	ldd	r25, Y+34	; 0x22
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4f e7       	ldi	r20, 0x7F	; 127
    1b06:	53 e4       	ldi	r21, 0x43	; 67
    1b08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b0c:	18 16       	cp	r1, r24
    1b0e:	0c f0       	brlt	.+2      	; 0x1b12 <LCD_voidInit+0x390>
    1b10:	7b c0       	rjmp	.+246    	; 0x1c08 <LCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    1b12:	6b a1       	ldd	r22, Y+35	; 0x23
    1b14:	7c a1       	ldd	r23, Y+36	; 0x24
    1b16:	8d a1       	ldd	r24, Y+37	; 0x25
    1b18:	9e a1       	ldd	r25, Y+38	; 0x26
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	4a e7       	ldi	r20, 0x7A	; 122
    1b20:	54 e4       	ldi	r21, 0x44	; 68
    1b22:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	8a 8f       	std	Y+26, r24	; 0x1a
    1b2c:	9b 8f       	std	Y+27, r25	; 0x1b
    1b2e:	ac 8f       	std	Y+28, r26	; 0x1c
    1b30:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b32:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b34:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b36:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b38:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4a ef       	ldi	r20, 0xFA	; 250
    1b40:	54 e4       	ldi	r21, 0x44	; 68
    1b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	8e 8b       	std	Y+22, r24	; 0x16
    1b4c:	9f 8b       	std	Y+23, r25	; 0x17
    1b4e:	a8 8f       	std	Y+24, r26	; 0x18
    1b50:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1b52:	6e 89       	ldd	r22, Y+22	; 0x16
    1b54:	7f 89       	ldd	r23, Y+23	; 0x17
    1b56:	88 8d       	ldd	r24, Y+24	; 0x18
    1b58:	99 8d       	ldd	r25, Y+25	; 0x19
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e8       	ldi	r20, 0x80	; 128
    1b60:	5f e3       	ldi	r21, 0x3F	; 63
    1b62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b66:	88 23       	and	r24, r24
    1b68:	2c f4       	brge	.+10     	; 0x1b74 <LCD_voidInit+0x3f2>
		__ticks = 1;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9d 8b       	std	Y+21, r25	; 0x15
    1b70:	8c 8b       	std	Y+20, r24	; 0x14
    1b72:	3f c0       	rjmp	.+126    	; 0x1bf2 <LCD_voidInit+0x470>
	else if (__tmp > 65535)
    1b74:	6e 89       	ldd	r22, Y+22	; 0x16
    1b76:	7f 89       	ldd	r23, Y+23	; 0x17
    1b78:	88 8d       	ldd	r24, Y+24	; 0x18
    1b7a:	99 8d       	ldd	r25, Y+25	; 0x19
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	3f ef       	ldi	r19, 0xFF	; 255
    1b80:	4f e7       	ldi	r20, 0x7F	; 127
    1b82:	57 e4       	ldi	r21, 0x47	; 71
    1b84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b88:	18 16       	cp	r1, r24
    1b8a:	4c f5       	brge	.+82     	; 0x1bde <LCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b8e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b90:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b92:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	51 e4       	ldi	r21, 0x41	; 65
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9d 8b       	std	Y+21, r25	; 0x15
    1bb2:	8c 8b       	std	Y+20, r24	; 0x14
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4 <LCD_voidInit+0x452>
    1bb6:	88 ec       	ldi	r24, 0xC8	; 200
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	9b 8b       	std	Y+19, r25	; 0x13
    1bbc:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bbe:	8a 89       	ldd	r24, Y+18	; 0x12
    1bc0:	9b 89       	ldd	r25, Y+19	; 0x13
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <LCD_voidInit+0x440>
    1bc6:	9b 8b       	std	Y+19, r25	; 0x13
    1bc8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bca:	8c 89       	ldd	r24, Y+20	; 0x14
    1bcc:	9d 89       	ldd	r25, Y+21	; 0x15
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	9d 8b       	std	Y+21, r25	; 0x15
    1bd2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd4:	8c 89       	ldd	r24, Y+20	; 0x14
    1bd6:	9d 89       	ldd	r25, Y+21	; 0x15
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	69 f7       	brne	.-38     	; 0x1bb6 <LCD_voidInit+0x434>
    1bdc:	24 c0       	rjmp	.+72     	; 0x1c26 <LCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bde:	6e 89       	ldd	r22, Y+22	; 0x16
    1be0:	7f 89       	ldd	r23, Y+23	; 0x17
    1be2:	88 8d       	ldd	r24, Y+24	; 0x18
    1be4:	99 8d       	ldd	r25, Y+25	; 0x19
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9d 8b       	std	Y+21, r25	; 0x15
    1bf0:	8c 8b       	std	Y+20, r24	; 0x14
    1bf2:	8c 89       	ldd	r24, Y+20	; 0x14
    1bf4:	9d 89       	ldd	r25, Y+21	; 0x15
    1bf6:	99 8b       	std	Y+17, r25	; 0x11
    1bf8:	88 8b       	std	Y+16, r24	; 0x10
    1bfa:	88 89       	ldd	r24, Y+16	; 0x10
    1bfc:	99 89       	ldd	r25, Y+17	; 0x11
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <LCD_voidInit+0x47c>
    1c02:	99 8b       	std	Y+17, r25	; 0x11
    1c04:	88 8b       	std	Y+16, r24	; 0x10
    1c06:	0f c0       	rjmp	.+30     	; 0x1c26 <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c08:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c0a:	78 a1       	ldd	r23, Y+32	; 0x20
    1c0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	8e 8f       	std	Y+30, r24	; 0x1e
    1c1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c1c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c20:	8a 95       	dec	r24
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCD_voidInit+0x49e>
    1c24:	8f 87       	std	Y+15, r24	; 0x0f
    // DELAY FOR 40 microseconds
    _delay_us(40);

    LCD_voidSendCommand(CLEAR_DISPLAY);
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_voidSendCommand>
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a0 e0       	ldi	r26, 0x00	; 0
    1c32:	b0 e4       	ldi	r27, 0x40	; 64
    1c34:	8b 87       	std	Y+11, r24	; 0x0b
    1c36:	9c 87       	std	Y+12, r25	; 0x0c
    1c38:	ad 87       	std	Y+13, r26	; 0x0d
    1c3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	4a ef       	ldi	r20, 0xFA	; 250
    1c4a:	54 e4       	ldi	r21, 0x44	; 68
    1c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	8f 83       	std	Y+7, r24	; 0x07
    1c56:	98 87       	std	Y+8, r25	; 0x08
    1c58:	a9 87       	std	Y+9, r26	; 0x09
    1c5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5e:	78 85       	ldd	r23, Y+8	; 0x08
    1c60:	89 85       	ldd	r24, Y+9	; 0x09
    1c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e8       	ldi	r20, 0x80	; 128
    1c6a:	5f e3       	ldi	r21, 0x3F	; 63
    1c6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c70:	88 23       	and	r24, r24
    1c72:	2c f4       	brge	.+10     	; 0x1c7e <LCD_voidInit+0x4fc>
		__ticks = 1;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9e 83       	std	Y+6, r25	; 0x06
    1c7a:	8d 83       	std	Y+5, r24	; 0x05
    1c7c:	3f c0       	rjmp	.+126    	; 0x1cfc <LCD_voidInit+0x57a>
	else if (__tmp > 65535)
    1c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c80:	78 85       	ldd	r23, Y+8	; 0x08
    1c82:	89 85       	ldd	r24, Y+9	; 0x09
    1c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	3f ef       	ldi	r19, 0xFF	; 255
    1c8a:	4f e7       	ldi	r20, 0x7F	; 127
    1c8c:	57 e4       	ldi	r21, 0x47	; 71
    1c8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c92:	18 16       	cp	r1, r24
    1c94:	4c f5       	brge	.+82     	; 0x1ce8 <LCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e2       	ldi	r20, 0x20	; 32
    1ca4:	51 e4       	ldi	r21, 0x41	; 65
    1ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	bc 01       	movw	r22, r24
    1cb0:	cd 01       	movw	r24, r26
    1cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	0f c0       	rjmp	.+30     	; 0x1cde <LCD_voidInit+0x55c>
    1cc0:	88 ec       	ldi	r24, 0xC8	; 200
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9c 83       	std	Y+4, r25	; 0x04
    1cc6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <LCD_voidInit+0x54a>
    1cd0:	9c 83       	std	Y+4, r25	; 0x04
    1cd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	9e 83       	std	Y+6, r25	; 0x06
    1cdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	69 f7       	brne	.-38     	; 0x1cc0 <LCD_voidInit+0x53e>
    1ce6:	14 c0       	rjmp	.+40     	; 0x1d10 <LCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cea:	78 85       	ldd	r23, Y+8	; 0x08
    1cec:	89 85       	ldd	r24, Y+9	; 0x09
    1cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	9e 83       	std	Y+6, r25	; 0x06
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1d00:	9a 83       	std	Y+2, r25	; 0x02
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	9a 81       	ldd	r25, Y+2	; 0x02
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <LCD_voidInit+0x586>
    1d0c:	9a 83       	std	Y+2, r25	; 0x02
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    // DELAY FOR 2 microseconds
    _delay_ms(2);



}
    1d10:	c4 5b       	subi	r28, 0xB4	; 180
    1d12:	df 4f       	sbci	r29, 0xFF	; 255
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	1f 91       	pop	r17
    1d24:	0f 91       	pop	r16
    1d26:	08 95       	ret

00001d28 <LCD_voidSendString>:

void LCD_voidSendString(u8* Copy_u8PString){
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <LCD_voidSendString+0x6>
    1d2e:	0f 92       	push	r0
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	9b 83       	std	Y+3, r25	; 0x03
    1d36:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8Counter;
    for ( Local_u8Counter = 0; Copy_u8PString[Local_u8Counter] != "\0"; Local_u8Counter++)
    1d38:	19 82       	std	Y+1, r1	; 0x01
    1d3a:	0e c0       	rjmp	.+28     	; 0x1d58 <LCD_voidSendString+0x30>
    {
        LCD_voidSendChar(Copy_u8PString[Local_u8Counter]);
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	9b 81       	ldd	r25, Y+3	; 0x03
    1d46:	fc 01       	movw	r30, r24
    1d48:	e2 0f       	add	r30, r18
    1d4a:	f3 1f       	adc	r31, r19
    1d4c:	80 81       	ld	r24, Z
    1d4e:	0e 94 23 0b 	call	0x1646	; 0x1646 <LCD_voidSendChar>
}

void LCD_voidSendString(u8* Copy_u8PString){

    u8 Local_u8Counter;
    for ( Local_u8Counter = 0; Copy_u8PString[Local_u8Counter] != "\0"; Local_u8Counter++)
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	8f 5f       	subi	r24, 0xFF	; 255
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	9b 81       	ldd	r25, Y+3	; 0x03
    1d62:	fc 01       	movw	r30, r24
    1d64:	e2 0f       	add	r30, r18
    1d66:	f3 1f       	adc	r31, r19
    1d68:	80 81       	ld	r24, Z
    1d6a:	88 2f       	mov	r24, r24
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	80 36       	cpi	r24, 0x60	; 96
    1d72:	92 07       	cpc	r25, r18
    1d74:	19 f7       	brne	.-58     	; 0x1d3c <LCD_voidSendString+0x14>
    {
        LCD_voidSendChar(Copy_u8PString[Local_u8Counter]);
    }
    
}
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 Copy_u8CharAddress, u8* Copy_u8PASpecialChar){
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <LCD_voidSendSpecialChar+0x6>
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <LCD_voidSendSpecialChar+0x8>
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	8a 83       	std	Y+2, r24	; 0x02
    1d90:	7c 83       	std	Y+4, r23	; 0x04
    1d92:	6b 83       	std	Y+3, r22	; 0x03

    LCD_voidSendCommand(CG_BASE_ADDRESS + Copy_u8CharAddress * 8);
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	88 2f       	mov	r24, r24
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	08 96       	adiw	r24, 0x08	; 8
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_voidSendCommand>
    u8 Local_u8Counter;
    for ( Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    1dac:	19 82       	std	Y+1, r1	; 0x01
    1dae:	0e c0       	rjmp	.+28     	; 0x1dcc <LCD_voidSendSpecialChar+0x4a>
    {
        LCD_voidSendChar(Copy_u8PASpecialChar[Local_u8Counter]);
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	fc 01       	movw	r30, r24
    1dbc:	e2 0f       	add	r30, r18
    1dbe:	f3 1f       	adc	r31, r19
    1dc0:	80 81       	ld	r24, Z
    1dc2:	0e 94 23 0b 	call	0x1646	; 0x1646 <LCD_voidSendChar>

void LCD_voidSendSpecialChar(u8 Copy_u8CharAddress, u8* Copy_u8PASpecialChar){

    LCD_voidSendCommand(CG_BASE_ADDRESS + Copy_u8CharAddress * 8);
    u8 Local_u8Counter;
    for ( Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	8f 5f       	subi	r24, 0xFF	; 255
    1dca:	89 83       	std	Y+1, r24	; 0x01
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	88 30       	cpi	r24, 0x08	; 8
    1dd0:	78 f3       	brcs	.-34     	; 0x1db0 <LCD_voidSendSpecialChar+0x2e>
    {
        LCD_voidSendChar(Copy_u8PASpecialChar[Local_u8Counter]);
    }
    LCD_voidSendCommand(0x80);
    1dd2:	80 e8       	ldi	r24, 0x80	; 128
    1dd4:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_voidSendCommand>
}
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <LCD_voidSendNumber>:

void LCD_voidSendNumber(s32 Copy_s32Number)
{
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	29 97       	sbiw	r28, 0x09	; 9
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	6e 83       	std	Y+6, r22	; 0x06
    1dfc:	7f 83       	std	Y+7, r23	; 0x07
    1dfe:	88 87       	std	Y+8, r24	; 0x08
    1e00:	99 87       	std	Y+9, r25	; 0x09
	u32 Local_u32Counter=1 ;
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	a0 e0       	ldi	r26, 0x00	; 0
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	8a 83       	std	Y+2, r24	; 0x02
    1e0c:	9b 83       	std	Y+3, r25	; 0x03
    1e0e:	ac 83       	std	Y+4, r26	; 0x04
    1e10:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_u32Digit=0 ;
    1e12:	19 82       	std	Y+1, r1	; 0x01

	/* print (-) if the number is negative */
	if(Copy_s32Number < 0)
    1e14:	8e 81       	ldd	r24, Y+6	; 0x06
    1e16:	9f 81       	ldd	r25, Y+7	; 0x07
    1e18:	a8 85       	ldd	r26, Y+8	; 0x08
    1e1a:	b9 85       	ldd	r27, Y+9	; 0x09
    1e1c:	bb 23       	and	r27, r27
    1e1e:	94 f4       	brge	.+36     	; 0x1e44 <LCD_voidSendNumber+0x5e>
	{
		LCD_voidSendChar('-');
    1e20:	8d e2       	ldi	r24, 0x2D	; 45
    1e22:	0e 94 23 0b 	call	0x1646	; 0x1646 <LCD_voidSendChar>
		/* return the number to positive */
		Copy_s32Number = -Copy_s32Number;
    1e26:	8e 81       	ldd	r24, Y+6	; 0x06
    1e28:	9f 81       	ldd	r25, Y+7	; 0x07
    1e2a:	a8 85       	ldd	r26, Y+8	; 0x08
    1e2c:	b9 85       	ldd	r27, Y+9	; 0x09
    1e2e:	b0 95       	com	r27
    1e30:	a0 95       	com	r26
    1e32:	90 95       	com	r25
    1e34:	81 95       	neg	r24
    1e36:	9f 4f       	sbci	r25, 0xFF	; 255
    1e38:	af 4f       	sbci	r26, 0xFF	; 255
    1e3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e3c:	8e 83       	std	Y+6, r24	; 0x06
    1e3e:	9f 83       	std	Y+7, r25	; 0x07
    1e40:	a8 87       	std	Y+8, r26	; 0x08
    1e42:	b9 87       	std	Y+9, r27	; 0x09
	}
	if (Copy_s32Number == 0)
    1e44:	8e 81       	ldd	r24, Y+6	; 0x06
    1e46:	9f 81       	ldd	r25, Y+7	; 0x07
    1e48:	a8 85       	ldd	r26, Y+8	; 0x08
    1e4a:	b9 85       	ldd	r27, Y+9	; 0x09
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	a1 05       	cpc	r26, r1
    1e50:	b1 05       	cpc	r27, r1
    1e52:	b1 f4       	brne	.+44     	; 0x1e80 <LCD_voidSendNumber+0x9a>
		LCD_voidSendChar('0');
    1e54:	80 e3       	ldi	r24, 0x30	; 48
    1e56:	0e 94 23 0b 	call	0x1646	; 0x1646 <LCD_voidSendChar>
    1e5a:	76 c0       	rjmp	.+236    	; 0x1f48 <LCD_voidSendNumber+0x162>
	else
	{
		while (Copy_s32Number/Local_u32Counter != 0)
		{
			Local_u32Counter *= 10;
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e60:	ac 81       	ldd	r26, Y+4	; 0x04
    1e62:	bd 81       	ldd	r27, Y+5	; 0x05
    1e64:	2a e0       	ldi	r18, 0x0A	; 10
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	50 e0       	ldi	r21, 0x00	; 0
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	cd 01       	movw	r24, r26
    1e70:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__mulsi3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	8a 83       	std	Y+2, r24	; 0x02
    1e7a:	9b 83       	std	Y+3, r25	; 0x03
    1e7c:	ac 83       	std	Y+4, r26	; 0x04
    1e7e:	bd 83       	std	Y+5, r27	; 0x05
	}
	if (Copy_s32Number == 0)
		LCD_voidSendChar('0');
	else
	{
		while (Copy_s32Number/Local_u32Counter != 0)
    1e80:	8e 81       	ldd	r24, Y+6	; 0x06
    1e82:	9f 81       	ldd	r25, Y+7	; 0x07
    1e84:	a8 85       	ldd	r26, Y+8	; 0x08
    1e86:	b9 85       	ldd	r27, Y+9	; 0x09
    1e88:	2a 81       	ldd	r18, Y+2	; 0x02
    1e8a:	3b 81       	ldd	r19, Y+3	; 0x03
    1e8c:	4c 81       	ldd	r20, Y+4	; 0x04
    1e8e:	5d 81       	ldd	r21, Y+5	; 0x05
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 96 10 	call	0x212c	; 0x212c <__udivmodsi4>
    1e98:	da 01       	movw	r26, r20
    1e9a:	c9 01       	movw	r24, r18
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	a1 05       	cpc	r26, r1
    1ea0:	b1 05       	cpc	r27, r1
    1ea2:	e1 f6       	brne	.-72     	; 0x1e5c <LCD_voidSendNumber+0x76>
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;
    1ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea8:	ac 81       	ldd	r26, Y+4	; 0x04
    1eaa:	bd 81       	ldd	r27, Y+5	; 0x05
    1eac:	2a e0       	ldi	r18, 0x0A	; 10
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e0       	ldi	r20, 0x00	; 0
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	bc 01       	movw	r22, r24
    1eb6:	cd 01       	movw	r24, r26
    1eb8:	0e 94 96 10 	call	0x212c	; 0x212c <__udivmodsi4>
    1ebc:	da 01       	movw	r26, r20
    1ebe:	c9 01       	movw	r24, r18
    1ec0:	8a 83       	std	Y+2, r24	; 0x02
    1ec2:	9b 83       	std	Y+3, r25	; 0x03
    1ec4:	ac 83       	std	Y+4, r26	; 0x04
    1ec6:	bd 83       	std	Y+5, r27	; 0x05
    1ec8:	37 c0       	rjmp	.+110    	; 0x1f38 <LCD_voidSendNumber+0x152>

		while (Local_u32Counter != 0)
		{
			Local_u32Digit = Copy_s32Number/Local_u32Counter;
    1eca:	8e 81       	ldd	r24, Y+6	; 0x06
    1ecc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ece:	a8 85       	ldd	r26, Y+8	; 0x08
    1ed0:	b9 85       	ldd	r27, Y+9	; 0x09
    1ed2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ed4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ed6:	4c 81       	ldd	r20, Y+4	; 0x04
    1ed8:	5d 81       	ldd	r21, Y+5	; 0x05
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 96 10 	call	0x212c	; 0x212c <__udivmodsi4>
    1ee2:	da 01       	movw	r26, r20
    1ee4:	c9 01       	movw	r24, r18
    1ee6:	89 83       	std	Y+1, r24	; 0x01

			LCD_voidSendChar(Local_u32Digit + '0');
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	80 5d       	subi	r24, 0xD0	; 208
    1eec:	0e 94 23 0b 	call	0x1646	; 0x1646 <LCD_voidSendChar>

			Copy_s32Number = Copy_s32Number%Local_u32Counter;
    1ef0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef4:	a8 85       	ldd	r26, Y+8	; 0x08
    1ef6:	b9 85       	ldd	r27, Y+9	; 0x09
    1ef8:	2a 81       	ldd	r18, Y+2	; 0x02
    1efa:	3b 81       	ldd	r19, Y+3	; 0x03
    1efc:	4c 81       	ldd	r20, Y+4	; 0x04
    1efe:	5d 81       	ldd	r21, Y+5	; 0x05
    1f00:	bc 01       	movw	r22, r24
    1f02:	cd 01       	movw	r24, r26
    1f04:	0e 94 96 10 	call	0x212c	; 0x212c <__udivmodsi4>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	8e 83       	std	Y+6, r24	; 0x06
    1f0e:	9f 83       	std	Y+7, r25	; 0x07
    1f10:	a8 87       	std	Y+8, r26	; 0x08
    1f12:	b9 87       	std	Y+9, r27	; 0x09

			Local_u32Counter /= 10;
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	9b 81       	ldd	r25, Y+3	; 0x03
    1f18:	ac 81       	ldd	r26, Y+4	; 0x04
    1f1a:	bd 81       	ldd	r27, Y+5	; 0x05
    1f1c:	2a e0       	ldi	r18, 0x0A	; 10
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	bc 01       	movw	r22, r24
    1f26:	cd 01       	movw	r24, r26
    1f28:	0e 94 96 10 	call	0x212c	; 0x212c <__udivmodsi4>
    1f2c:	da 01       	movw	r26, r20
    1f2e:	c9 01       	movw	r24, r18
    1f30:	8a 83       	std	Y+2, r24	; 0x02
    1f32:	9b 83       	std	Y+3, r25	; 0x03
    1f34:	ac 83       	std	Y+4, r26	; 0x04
    1f36:	bd 83       	std	Y+5, r27	; 0x05
		{
			Local_u32Counter *= 10;
		}
		Local_u32Counter /=10;

		while (Local_u32Counter != 0)
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f3c:	ac 81       	ldd	r26, Y+4	; 0x04
    1f3e:	bd 81       	ldd	r27, Y+5	; 0x05
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	a1 05       	cpc	r26, r1
    1f44:	b1 05       	cpc	r27, r1
    1f46:	09 f6       	brne	.-126    	; 0x1eca <LCD_voidSendNumber+0xe4>
			Copy_s32Number = Copy_s32Number%Local_u32Counter;

			Local_u32Counter /= 10;
		}
	}
}
    1f48:	29 96       	adiw	r28, 0x09	; 9
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <main>:
#include "BIT_MATH.h"
#include "DIO.h"
#include "LCD.h"
#include "ADC.h"

int main(){
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	64 97       	sbiw	r28, 0x14	; 20
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61

	ADC_voidInit();
    1f6e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_voidInit>
	LCD_voidInit();
    1f72:	0e 94 c1 0b 	call	0x1782	; 0x1782 <LCD_voidInit>
	u16 Local_u16DigitalValue, Local_u16AnalogeValue, Localu16Temp;

	while(1){
		Local_u16DigitalValue = ADC_u16GetDigitalValue(ADC_CHANNEL0);
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_u16GetDigitalValue>
    1f7c:	9c 8b       	std	Y+20, r25	; 0x14
    1f7e:	8b 8b       	std	Y+19, r24	; 0x13
		Local_u16AnalogeValue = (Local_u16DigitalValue * 5000UL) / 1024; //5000 mVolt
    1f80:	8b 89       	ldd	r24, Y+19	; 0x13
    1f82:	9c 89       	ldd	r25, Y+20	; 0x14
    1f84:	cc 01       	movw	r24, r24
    1f86:	a0 e0       	ldi	r26, 0x00	; 0
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	28 e8       	ldi	r18, 0x88	; 136
    1f8c:	33 e1       	ldi	r19, 0x13	; 19
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	50 e0       	ldi	r21, 0x00	; 0
    1f92:	bc 01       	movw	r22, r24
    1f94:	cd 01       	movw	r24, r26
    1f96:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__mulsi3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	07 2e       	mov	r0, r23
    1fa0:	7a e0       	ldi	r23, 0x0A	; 10
    1fa2:	b6 95       	lsr	r27
    1fa4:	a7 95       	ror	r26
    1fa6:	97 95       	ror	r25
    1fa8:	87 95       	ror	r24
    1faa:	7a 95       	dec	r23
    1fac:	d1 f7       	brne	.-12     	; 0x1fa2 <main+0x48>
    1fae:	70 2d       	mov	r23, r0
    1fb0:	9a 8b       	std	Y+18, r25	; 0x12
    1fb2:	89 8b       	std	Y+17, r24	; 0x11
		Localu16Temp =  Local_u16AnalogeValue / 10;
    1fb4:	89 89       	ldd	r24, Y+17	; 0x11
    1fb6:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb8:	2a e0       	ldi	r18, 0x0A	; 10
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	b9 01       	movw	r22, r18
    1fbe:	0e 94 82 10 	call	0x2104	; 0x2104 <__udivmodhi4>
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	98 8b       	std	Y+16, r25	; 0x10
    1fc6:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_voidSendNumber(Localu16Temp);
    1fc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fca:	98 89       	ldd	r25, Y+16	; 0x10
    1fcc:	cc 01       	movw	r24, r24
    1fce:	a0 e0       	ldi	r26, 0x00	; 0
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	bc 01       	movw	r22, r24
    1fd4:	cd 01       	movw	r24, r26
    1fd6:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <LCD_voidSendNumber>
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	aa ef       	ldi	r26, 0xFA	; 250
    1fe0:	b3 e4       	ldi	r27, 0x43	; 67
    1fe2:	8b 87       	std	Y+11, r24	; 0x0b
    1fe4:	9c 87       	std	Y+12, r25	; 0x0c
    1fe6:	ad 87       	std	Y+13, r26	; 0x0d
    1fe8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	4a ef       	ldi	r20, 0xFA	; 250
    1ff8:	54 e4       	ldi	r21, 0x44	; 68
    1ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	8f 83       	std	Y+7, r24	; 0x07
    2004:	98 87       	std	Y+8, r25	; 0x08
    2006:	a9 87       	std	Y+9, r26	; 0x09
    2008:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    200a:	6f 81       	ldd	r22, Y+7	; 0x07
    200c:	78 85       	ldd	r23, Y+8	; 0x08
    200e:	89 85       	ldd	r24, Y+9	; 0x09
    2010:	9a 85       	ldd	r25, Y+10	; 0x0a
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e8       	ldi	r20, 0x80	; 128
    2018:	5f e3       	ldi	r21, 0x3F	; 63
    201a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    201e:	88 23       	and	r24, r24
    2020:	2c f4       	brge	.+10     	; 0x202c <main+0xd2>
		__ticks = 1;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9e 83       	std	Y+6, r25	; 0x06
    2028:	8d 83       	std	Y+5, r24	; 0x05
    202a:	3f c0       	rjmp	.+126    	; 0x20aa <main+0x150>
	else if (__tmp > 65535)
    202c:	6f 81       	ldd	r22, Y+7	; 0x07
    202e:	78 85       	ldd	r23, Y+8	; 0x08
    2030:	89 85       	ldd	r24, Y+9	; 0x09
    2032:	9a 85       	ldd	r25, Y+10	; 0x0a
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	3f ef       	ldi	r19, 0xFF	; 255
    2038:	4f e7       	ldi	r20, 0x7F	; 127
    203a:	57 e4       	ldi	r21, 0x47	; 71
    203c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2040:	18 16       	cp	r1, r24
    2042:	4c f5       	brge	.+82     	; 0x2096 <main+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2044:	6b 85       	ldd	r22, Y+11	; 0x0b
    2046:	7c 85       	ldd	r23, Y+12	; 0x0c
    2048:	8d 85       	ldd	r24, Y+13	; 0x0d
    204a:	9e 85       	ldd	r25, Y+14	; 0x0e
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e2       	ldi	r20, 0x20	; 32
    2052:	51 e4       	ldi	r21, 0x41	; 65
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	bc 01       	movw	r22, r24
    205e:	cd 01       	movw	r24, r26
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	9e 83       	std	Y+6, r25	; 0x06
    206a:	8d 83       	std	Y+5, r24	; 0x05
    206c:	0f c0       	rjmp	.+30     	; 0x208c <main+0x132>
    206e:	88 ec       	ldi	r24, 0xC8	; 200
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9c 83       	std	Y+4, r25	; 0x04
    2074:	8b 83       	std	Y+3, r24	; 0x03
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <main+0x120>
    207e:	9c 83       	std	Y+4, r25	; 0x04
    2080:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2082:	8d 81       	ldd	r24, Y+5	; 0x05
    2084:	9e 81       	ldd	r25, Y+6	; 0x06
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208c:	8d 81       	ldd	r24, Y+5	; 0x05
    208e:	9e 81       	ldd	r25, Y+6	; 0x06
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	69 f7       	brne	.-38     	; 0x206e <main+0x114>
    2094:	14 c0       	rjmp	.+40     	; 0x20be <main+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2096:	6f 81       	ldd	r22, Y+7	; 0x07
    2098:	78 85       	ldd	r23, Y+8	; 0x08
    209a:	89 85       	ldd	r24, Y+9	; 0x09
    209c:	9a 85       	ldd	r25, Y+10	; 0x0a
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9e 83       	std	Y+6, r25	; 0x06
    20a8:	8d 83       	std	Y+5, r24	; 0x05
    20aa:	8d 81       	ldd	r24, Y+5	; 0x05
    20ac:	9e 81       	ldd	r25, Y+6	; 0x06
    20ae:	9a 83       	std	Y+2, r25	; 0x02
    20b0:	89 83       	std	Y+1, r24	; 0x01
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	9a 81       	ldd	r25, Y+2	; 0x02
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <main+0x15c>
    20ba:	9a 83       	std	Y+2, r25	; 0x02
    20bc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_voidSendCommand(CLEAR_DISPLAY);
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_voidSendCommand>
    20c4:	58 cf       	rjmp	.-336    	; 0x1f76 <main+0x1c>

000020c6 <__mulsi3>:
    20c6:	62 9f       	mul	r22, r18
    20c8:	d0 01       	movw	r26, r0
    20ca:	73 9f       	mul	r23, r19
    20cc:	f0 01       	movw	r30, r0
    20ce:	82 9f       	mul	r24, r18
    20d0:	e0 0d       	add	r30, r0
    20d2:	f1 1d       	adc	r31, r1
    20d4:	64 9f       	mul	r22, r20
    20d6:	e0 0d       	add	r30, r0
    20d8:	f1 1d       	adc	r31, r1
    20da:	92 9f       	mul	r25, r18
    20dc:	f0 0d       	add	r31, r0
    20de:	83 9f       	mul	r24, r19
    20e0:	f0 0d       	add	r31, r0
    20e2:	74 9f       	mul	r23, r20
    20e4:	f0 0d       	add	r31, r0
    20e6:	65 9f       	mul	r22, r21
    20e8:	f0 0d       	add	r31, r0
    20ea:	99 27       	eor	r25, r25
    20ec:	72 9f       	mul	r23, r18
    20ee:	b0 0d       	add	r27, r0
    20f0:	e1 1d       	adc	r30, r1
    20f2:	f9 1f       	adc	r31, r25
    20f4:	63 9f       	mul	r22, r19
    20f6:	b0 0d       	add	r27, r0
    20f8:	e1 1d       	adc	r30, r1
    20fa:	f9 1f       	adc	r31, r25
    20fc:	bd 01       	movw	r22, r26
    20fe:	cf 01       	movw	r24, r30
    2100:	11 24       	eor	r1, r1
    2102:	08 95       	ret

00002104 <__udivmodhi4>:
    2104:	aa 1b       	sub	r26, r26
    2106:	bb 1b       	sub	r27, r27
    2108:	51 e1       	ldi	r21, 0x11	; 17
    210a:	07 c0       	rjmp	.+14     	; 0x211a <__udivmodhi4_ep>

0000210c <__udivmodhi4_loop>:
    210c:	aa 1f       	adc	r26, r26
    210e:	bb 1f       	adc	r27, r27
    2110:	a6 17       	cp	r26, r22
    2112:	b7 07       	cpc	r27, r23
    2114:	10 f0       	brcs	.+4      	; 0x211a <__udivmodhi4_ep>
    2116:	a6 1b       	sub	r26, r22
    2118:	b7 0b       	sbc	r27, r23

0000211a <__udivmodhi4_ep>:
    211a:	88 1f       	adc	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	5a 95       	dec	r21
    2120:	a9 f7       	brne	.-22     	; 0x210c <__udivmodhi4_loop>
    2122:	80 95       	com	r24
    2124:	90 95       	com	r25
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	08 95       	ret

0000212c <__udivmodsi4>:
    212c:	a1 e2       	ldi	r26, 0x21	; 33
    212e:	1a 2e       	mov	r1, r26
    2130:	aa 1b       	sub	r26, r26
    2132:	bb 1b       	sub	r27, r27
    2134:	fd 01       	movw	r30, r26
    2136:	0d c0       	rjmp	.+26     	; 0x2152 <__udivmodsi4_ep>

00002138 <__udivmodsi4_loop>:
    2138:	aa 1f       	adc	r26, r26
    213a:	bb 1f       	adc	r27, r27
    213c:	ee 1f       	adc	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	a2 17       	cp	r26, r18
    2142:	b3 07       	cpc	r27, r19
    2144:	e4 07       	cpc	r30, r20
    2146:	f5 07       	cpc	r31, r21
    2148:	20 f0       	brcs	.+8      	; 0x2152 <__udivmodsi4_ep>
    214a:	a2 1b       	sub	r26, r18
    214c:	b3 0b       	sbc	r27, r19
    214e:	e4 0b       	sbc	r30, r20
    2150:	f5 0b       	sbc	r31, r21

00002152 <__udivmodsi4_ep>:
    2152:	66 1f       	adc	r22, r22
    2154:	77 1f       	adc	r23, r23
    2156:	88 1f       	adc	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	1a 94       	dec	r1
    215c:	69 f7       	brne	.-38     	; 0x2138 <__udivmodsi4_loop>
    215e:	60 95       	com	r22
    2160:	70 95       	com	r23
    2162:	80 95       	com	r24
    2164:	90 95       	com	r25
    2166:	9b 01       	movw	r18, r22
    2168:	ac 01       	movw	r20, r24
    216a:	bd 01       	movw	r22, r26
    216c:	cf 01       	movw	r24, r30
    216e:	08 95       	ret

00002170 <__prologue_saves__>:
    2170:	2f 92       	push	r2
    2172:	3f 92       	push	r3
    2174:	4f 92       	push	r4
    2176:	5f 92       	push	r5
    2178:	6f 92       	push	r6
    217a:	7f 92       	push	r7
    217c:	8f 92       	push	r8
    217e:	9f 92       	push	r9
    2180:	af 92       	push	r10
    2182:	bf 92       	push	r11
    2184:	cf 92       	push	r12
    2186:	df 92       	push	r13
    2188:	ef 92       	push	r14
    218a:	ff 92       	push	r15
    218c:	0f 93       	push	r16
    218e:	1f 93       	push	r17
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	ca 1b       	sub	r28, r26
    219a:	db 0b       	sbc	r29, r27
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	09 94       	ijmp

000021a8 <__epilogue_restores__>:
    21a8:	2a 88       	ldd	r2, Y+18	; 0x12
    21aa:	39 88       	ldd	r3, Y+17	; 0x11
    21ac:	48 88       	ldd	r4, Y+16	; 0x10
    21ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    21b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    21b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    21b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    21b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    21b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    21ba:	b9 84       	ldd	r11, Y+9	; 0x09
    21bc:	c8 84       	ldd	r12, Y+8	; 0x08
    21be:	df 80       	ldd	r13, Y+7	; 0x07
    21c0:	ee 80       	ldd	r14, Y+6	; 0x06
    21c2:	fd 80       	ldd	r15, Y+5	; 0x05
    21c4:	0c 81       	ldd	r16, Y+4	; 0x04
    21c6:	1b 81       	ldd	r17, Y+3	; 0x03
    21c8:	aa 81       	ldd	r26, Y+2	; 0x02
    21ca:	b9 81       	ldd	r27, Y+1	; 0x01
    21cc:	ce 0f       	add	r28, r30
    21ce:	d1 1d       	adc	r29, r1
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	ed 01       	movw	r28, r26
    21dc:	08 95       	ret

000021de <_exit>:
    21de:	f8 94       	cli

000021e0 <__stop_program>:
    21e0:	ff cf       	rjmp	.-2      	; 0x21e0 <__stop_program>
